
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001398  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001538  08001538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015e0  080015e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080015e0  080015e0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015e0  080015e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e0  080015e0  000115e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015e4  080015e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080015e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08001650  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001650  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bb7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000918  00000000  00000000  00022c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00023568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  00023818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150b6  00000000  00000000  00023a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002075  00000000  00000000  00038b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a47  00000000  00000000  0003ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be5d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010b4  00000000  00000000  000be628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001520 	.word	0x08001520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001520 	.word	0x08001520

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <init_pin>:
#include "main.h"

void init_pin(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
	//output led
	unsigned int tempreg;
	tempreg = read_reg(GPIO_MODE, ~(0x03u << 24));
 8000286:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <init_pin+0x3c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800028e:	607b      	str	r3, [r7, #4]
	tempreg = tempreg | GPIO_MODE_OUTPUT << 24;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000296:	607b      	str	r3, [r7, #4]
	write_reg(GPIO_MODE,tempreg);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <init_pin+0x3c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
    //input button
    tempreg = read_reg(GPIO_MODEA,~(0x03u << 0));
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <init_pin+0x40>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	607b      	str	r3, [r7, #4]
    tempreg = tempreg | GPIO_MODE_INPUT << 0;
    write_reg(GPIO_MODEA,tempreg);
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <init_pin+0x40>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6013      	str	r3, [r2, #0]

}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020c00 	.word	0x40020c00
 80002c0:	40020000 	.word	0x40020000

080002c4 <led_on>:
void led_on(unsigned long int pinLed)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

	unsigned int tempreg;
	tempreg = read_reg(GPIO_BSRR, ~(1u << pinLed));
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <led_on+0x3c>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	2101      	movs	r1, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	43db      	mvns	r3, r3
 80002da:	4013      	ands	r3, r2
 80002dc:	60fb      	str	r3, [r7, #12]
	tempreg = tempreg | 1u << pinLed;
 80002de:	2201      	movs	r2, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	fa02 f303 	lsl.w	r3, r2, r3
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	4313      	orrs	r3, r2
 80002ea:	60fb      	str	r3, [r7, #12]
	write_reg(GPIO_BSRR,tempreg);
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <led_on+0x3c>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6013      	str	r3, [r2, #0]

}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40020c18 	.word	0x40020c18

08000304 <led_off>:
void led_off(unsigned long int pinLed)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	
	unsigned int tempreg;
	tempreg = read_reg(GPIO_BSRR, 1u << pinLed + 16u);
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <led_off+0x3c>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3310      	adds	r3, #16
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	4013      	ands	r3, r2
 800031c:	60fb      	str	r3, [r7, #12]
	tempreg = tempreg | 1u << pinLed + 16u;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3310      	adds	r3, #16
 8000322:	2201      	movs	r2, #1
 8000324:	fa02 f303 	lsl.w	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4313      	orrs	r3, r2
 800032c:	60fb      	str	r3, [r7, #12]
	write_reg(GPIO_BSRR,tempreg);
 800032e:	4a04      	ldr	r2, [pc, #16]	; (8000340 <led_off+0x3c>)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	6013      	str	r3, [r2, #0]

}
 8000334:	bf00      	nop
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40020c18 	.word	0x40020c18

08000344 <ennable_clock>:
			asm("nop");
		}
	}
}
void ennable_clock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
//led
	unsigned int tempreg;
	tempreg = read_reg(RCC_AHB1ENR, ~(1u << 3));
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <ennable_clock+0x44>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f023 0308 	bic.w	r3, r3, #8
 8000352:	607b      	str	r3, [r7, #4]
	tempreg = tempreg | 1u << 3;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	607b      	str	r3, [r7, #4]
	write_reg(RCC_AHB1ENR,tempreg);
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <ennable_clock+0x44>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6013      	str	r3, [r2, #0]
//button
	tempreg = read_reg(RCC_AHB1ENR, ~(1u << 0));
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <ennable_clock+0x44>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f023 0301 	bic.w	r3, r3, #1
 800036a:	607b      	str	r3, [r7, #4]
	tempreg = tempreg | 1u << 0;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	607b      	str	r3, [r7, #4]
	write_reg(RCC_AHB1ENR,tempreg);
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <ennable_clock+0x44>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6013      	str	r3, [r2, #0]
 
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40023830 	.word	0x40023830

0800038c <main>:
void main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	printf("hello world !!!");
 8000392:	480e      	ldr	r0, [pc, #56]	; (80003cc <main+0x40>)
 8000394:	f000 f96e 	bl	8000674 <iprintf>
	unsigned int temple = 0u;
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
	ennable_clock();
 800039c:	f7ff ffd2 	bl	8000344 <ennable_clock>
	init_pin();
 80003a0:	f7ff ff6e 	bl	8000280 <init_pin>
	led_on(LED4);
 80003a4:	200c      	movs	r0, #12
 80003a6:	f7ff ff8d 	bl	80002c4 <led_on>
	while(1)
	{
		temple = read_reg(GPIO_IDR,(1u << 0));
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <main+0x44>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
		if(temple == 0)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d103      	bne.n	80003c2 <main+0x36>
		{
			led_on(LED4);
 80003ba:	200c      	movs	r0, #12
 80003bc:	f7ff ff82 	bl	80002c4 <led_on>
 80003c0:	e7f3      	b.n	80003aa <main+0x1e>
		}
		else 
		{
			led_off(LED4);
 80003c2:	200c      	movs	r0, #12
 80003c4:	f7ff ff9e 	bl	8000304 <led_off>
		temple = read_reg(GPIO_IDR,(1u << 0));
 80003c8:	e7ef      	b.n	80003aa <main+0x1e>
 80003ca:	bf00      	nop
 80003cc:	08001538 	.word	0x08001538
 80003d0:	40020010 	.word	0x40020010

080003d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <NMI_Handler+0x4>

080003da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <MemManage_Handler+0x4>

080003e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <BusFault_Handler+0x4>

080003ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <UsageFault_Handler+0x4>

080003f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000420:	f000 f8e2 	bl	80005e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	e00a      	b.n	8000450 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800043a:	f3af 8000 	nop.w
 800043e:	4601      	mov	r1, r0
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	60ba      	str	r2, [r7, #8]
 8000446:	b2ca      	uxtb	r2, r1
 8000448:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	3301      	adds	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	697a      	ldr	r2, [r7, #20]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	dbf0      	blt.n	800043a <_read+0x12>
	}

return len;
 8000458:	687b      	ldr	r3, [r7, #4]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b086      	sub	sp, #24
 8000466:	af00      	add	r7, sp, #0
 8000468:	60f8      	str	r0, [r7, #12]
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e009      	b.n	8000488 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	60ba      	str	r2, [r7, #8]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	429a      	cmp	r2, r3
 800048e:	dbf1      	blt.n	8000474 <_write+0x12>
	}
	return len;
 8000490:	687b      	ldr	r3, [r7, #4]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <_close>:

int _close(int file)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
	return -1;
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004c2:	605a      	str	r2, [r3, #4]
	return 0;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <_isatty>:

int _isatty(int file)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
	return 1;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
	return 0;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <_sbrk+0x5c>)
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <_sbrk+0x60>)
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <_sbrk+0x64>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <_sbrk+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d207      	bcs.n	8000544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000534:	f000 f86c 	bl	8000610 <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	220c      	movs	r2, #12
 800053c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000542:	e009      	b.n	8000558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <_sbrk+0x64>)
 8000554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20020000 	.word	0x20020000
 8000564:	00000400 	.word	0x00000400
 8000568:	20000084 	.word	0x20000084
 800056c:	200000a8 	.word	0x200000a8

08000570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SystemInit+0x20>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <SystemInit+0x20>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005b0:	4c0b      	ldr	r4, [pc, #44]	; (80005e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005be:	f7ff ffd7 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c2:	f000 f82b 	bl	800061c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005c6:	f7ff fee1 	bl	800038c <main>
  bx  lr    
 80005ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80005d8:	080015e8 	.word	0x080015e8
  ldr r2, =_sbss
 80005dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005e0:	200000a4 	.word	0x200000a4

080005e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC_IRQHandler>
	...

080005e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x20>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_IncTick+0x24>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <HAL_IncTick+0x24>)
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000
 800060c:	20000090 	.word	0x20000090

08000610 <__errno>:
 8000610:	4b01      	ldr	r3, [pc, #4]	; (8000618 <__errno+0x8>)
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000004 	.word	0x20000004

0800061c <__libc_init_array>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	4d0d      	ldr	r5, [pc, #52]	; (8000654 <__libc_init_array+0x38>)
 8000620:	4c0d      	ldr	r4, [pc, #52]	; (8000658 <__libc_init_array+0x3c>)
 8000622:	1b64      	subs	r4, r4, r5
 8000624:	10a4      	asrs	r4, r4, #2
 8000626:	2600      	movs	r6, #0
 8000628:	42a6      	cmp	r6, r4
 800062a:	d109      	bne.n	8000640 <__libc_init_array+0x24>
 800062c:	4d0b      	ldr	r5, [pc, #44]	; (800065c <__libc_init_array+0x40>)
 800062e:	4c0c      	ldr	r4, [pc, #48]	; (8000660 <__libc_init_array+0x44>)
 8000630:	f000 ff76 	bl	8001520 <_init>
 8000634:	1b64      	subs	r4, r4, r5
 8000636:	10a4      	asrs	r4, r4, #2
 8000638:	2600      	movs	r6, #0
 800063a:	42a6      	cmp	r6, r4
 800063c:	d105      	bne.n	800064a <__libc_init_array+0x2e>
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f855 3b04 	ldr.w	r3, [r5], #4
 8000644:	4798      	blx	r3
 8000646:	3601      	adds	r6, #1
 8000648:	e7ee      	b.n	8000628 <__libc_init_array+0xc>
 800064a:	f855 3b04 	ldr.w	r3, [r5], #4
 800064e:	4798      	blx	r3
 8000650:	3601      	adds	r6, #1
 8000652:	e7f2      	b.n	800063a <__libc_init_array+0x1e>
 8000654:	080015e0 	.word	0x080015e0
 8000658:	080015e0 	.word	0x080015e0
 800065c:	080015e0 	.word	0x080015e0
 8000660:	080015e4 	.word	0x080015e4

08000664 <memset>:
 8000664:	4402      	add	r2, r0
 8000666:	4603      	mov	r3, r0
 8000668:	4293      	cmp	r3, r2
 800066a:	d100      	bne.n	800066e <memset+0xa>
 800066c:	4770      	bx	lr
 800066e:	f803 1b01 	strb.w	r1, [r3], #1
 8000672:	e7f9      	b.n	8000668 <memset+0x4>

08000674 <iprintf>:
 8000674:	b40f      	push	{r0, r1, r2, r3}
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <iprintf+0x2c>)
 8000678:	b513      	push	{r0, r1, r4, lr}
 800067a:	681c      	ldr	r4, [r3, #0]
 800067c:	b124      	cbz	r4, 8000688 <iprintf+0x14>
 800067e:	69a3      	ldr	r3, [r4, #24]
 8000680:	b913      	cbnz	r3, 8000688 <iprintf+0x14>
 8000682:	4620      	mov	r0, r4
 8000684:	f000 f866 	bl	8000754 <__sinit>
 8000688:	ab05      	add	r3, sp, #20
 800068a:	9a04      	ldr	r2, [sp, #16]
 800068c:	68a1      	ldr	r1, [r4, #8]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4620      	mov	r0, r4
 8000692:	f000 f983 	bl	800099c <_vfiprintf_r>
 8000696:	b002      	add	sp, #8
 8000698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800069c:	b004      	add	sp, #16
 800069e:	4770      	bx	lr
 80006a0:	20000004 	.word	0x20000004

080006a4 <std>:
 80006a4:	2300      	movs	r3, #0
 80006a6:	b510      	push	{r4, lr}
 80006a8:	4604      	mov	r4, r0
 80006aa:	e9c0 3300 	strd	r3, r3, [r0]
 80006ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006b2:	6083      	str	r3, [r0, #8]
 80006b4:	8181      	strh	r1, [r0, #12]
 80006b6:	6643      	str	r3, [r0, #100]	; 0x64
 80006b8:	81c2      	strh	r2, [r0, #14]
 80006ba:	6183      	str	r3, [r0, #24]
 80006bc:	4619      	mov	r1, r3
 80006be:	2208      	movs	r2, #8
 80006c0:	305c      	adds	r0, #92	; 0x5c
 80006c2:	f7ff ffcf 	bl	8000664 <memset>
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <std+0x38>)
 80006c8:	6263      	str	r3, [r4, #36]	; 0x24
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <std+0x3c>)
 80006cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <std+0x40>)
 80006d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <std+0x44>)
 80006d4:	6224      	str	r4, [r4, #32]
 80006d6:	6323      	str	r3, [r4, #48]	; 0x30
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	08000f45 	.word	0x08000f45
 80006e0:	08000f67 	.word	0x08000f67
 80006e4:	08000f9f 	.word	0x08000f9f
 80006e8:	08000fc3 	.word	0x08000fc3

080006ec <_cleanup_r>:
 80006ec:	4901      	ldr	r1, [pc, #4]	; (80006f4 <_cleanup_r+0x8>)
 80006ee:	f000 b8af 	b.w	8000850 <_fwalk_reent>
 80006f2:	bf00      	nop
 80006f4:	0800129d 	.word	0x0800129d

080006f8 <__sfmoreglue>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	1e4a      	subs	r2, r1, #1
 80006fc:	2568      	movs	r5, #104	; 0x68
 80006fe:	4355      	muls	r5, r2
 8000700:	460e      	mov	r6, r1
 8000702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000706:	f000 f8c5 	bl	8000894 <_malloc_r>
 800070a:	4604      	mov	r4, r0
 800070c:	b140      	cbz	r0, 8000720 <__sfmoreglue+0x28>
 800070e:	2100      	movs	r1, #0
 8000710:	e9c0 1600 	strd	r1, r6, [r0]
 8000714:	300c      	adds	r0, #12
 8000716:	60a0      	str	r0, [r4, #8]
 8000718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800071c:	f7ff ffa2 	bl	8000664 <memset>
 8000720:	4620      	mov	r0, r4
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__sfp_lock_acquire>:
 8000724:	4801      	ldr	r0, [pc, #4]	; (800072c <__sfp_lock_acquire+0x8>)
 8000726:	f000 b8b3 	b.w	8000890 <__retarget_lock_acquire_recursive>
 800072a:	bf00      	nop
 800072c:	2000009c 	.word	0x2000009c

08000730 <__sfp_lock_release>:
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <__sfp_lock_release+0x8>)
 8000732:	f000 b8ae 	b.w	8000892 <__retarget_lock_release_recursive>
 8000736:	bf00      	nop
 8000738:	2000009c 	.word	0x2000009c

0800073c <__sinit_lock_acquire>:
 800073c:	4801      	ldr	r0, [pc, #4]	; (8000744 <__sinit_lock_acquire+0x8>)
 800073e:	f000 b8a7 	b.w	8000890 <__retarget_lock_acquire_recursive>
 8000742:	bf00      	nop
 8000744:	20000097 	.word	0x20000097

08000748 <__sinit_lock_release>:
 8000748:	4801      	ldr	r0, [pc, #4]	; (8000750 <__sinit_lock_release+0x8>)
 800074a:	f000 b8a2 	b.w	8000892 <__retarget_lock_release_recursive>
 800074e:	bf00      	nop
 8000750:	20000097 	.word	0x20000097

08000754 <__sinit>:
 8000754:	b510      	push	{r4, lr}
 8000756:	4604      	mov	r4, r0
 8000758:	f7ff fff0 	bl	800073c <__sinit_lock_acquire>
 800075c:	69a3      	ldr	r3, [r4, #24]
 800075e:	b11b      	cbz	r3, 8000768 <__sinit+0x14>
 8000760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000764:	f7ff bff0 	b.w	8000748 <__sinit_lock_release>
 8000768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800076c:	6523      	str	r3, [r4, #80]	; 0x50
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <__sinit+0x68>)
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <__sinit+0x6c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	62a2      	str	r2, [r4, #40]	; 0x28
 8000776:	42a3      	cmp	r3, r4
 8000778:	bf04      	itt	eq
 800077a:	2301      	moveq	r3, #1
 800077c:	61a3      	streq	r3, [r4, #24]
 800077e:	4620      	mov	r0, r4
 8000780:	f000 f820 	bl	80007c4 <__sfp>
 8000784:	6060      	str	r0, [r4, #4]
 8000786:	4620      	mov	r0, r4
 8000788:	f000 f81c 	bl	80007c4 <__sfp>
 800078c:	60a0      	str	r0, [r4, #8]
 800078e:	4620      	mov	r0, r4
 8000790:	f000 f818 	bl	80007c4 <__sfp>
 8000794:	2200      	movs	r2, #0
 8000796:	60e0      	str	r0, [r4, #12]
 8000798:	2104      	movs	r1, #4
 800079a:	6860      	ldr	r0, [r4, #4]
 800079c:	f7ff ff82 	bl	80006a4 <std>
 80007a0:	68a0      	ldr	r0, [r4, #8]
 80007a2:	2201      	movs	r2, #1
 80007a4:	2109      	movs	r1, #9
 80007a6:	f7ff ff7d 	bl	80006a4 <std>
 80007aa:	68e0      	ldr	r0, [r4, #12]
 80007ac:	2202      	movs	r2, #2
 80007ae:	2112      	movs	r1, #18
 80007b0:	f7ff ff78 	bl	80006a4 <std>
 80007b4:	2301      	movs	r3, #1
 80007b6:	61a3      	str	r3, [r4, #24]
 80007b8:	e7d2      	b.n	8000760 <__sinit+0xc>
 80007ba:	bf00      	nop
 80007bc:	08001548 	.word	0x08001548
 80007c0:	080006ed 	.word	0x080006ed

080007c4 <__sfp>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4607      	mov	r7, r0
 80007c8:	f7ff ffac 	bl	8000724 <__sfp_lock_acquire>
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <__sfp+0x84>)
 80007ce:	681e      	ldr	r6, [r3, #0]
 80007d0:	69b3      	ldr	r3, [r6, #24]
 80007d2:	b913      	cbnz	r3, 80007da <__sfp+0x16>
 80007d4:	4630      	mov	r0, r6
 80007d6:	f7ff ffbd 	bl	8000754 <__sinit>
 80007da:	3648      	adds	r6, #72	; 0x48
 80007dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	d503      	bpl.n	80007ec <__sfp+0x28>
 80007e4:	6833      	ldr	r3, [r6, #0]
 80007e6:	b30b      	cbz	r3, 800082c <__sfp+0x68>
 80007e8:	6836      	ldr	r6, [r6, #0]
 80007ea:	e7f7      	b.n	80007dc <__sfp+0x18>
 80007ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80007f0:	b9d5      	cbnz	r5, 8000828 <__sfp+0x64>
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <__sfp+0x88>)
 80007f4:	60e3      	str	r3, [r4, #12]
 80007f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007fa:	6665      	str	r5, [r4, #100]	; 0x64
 80007fc:	f000 f847 	bl	800088e <__retarget_lock_init_recursive>
 8000800:	f7ff ff96 	bl	8000730 <__sfp_lock_release>
 8000804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800080c:	6025      	str	r5, [r4, #0]
 800080e:	61a5      	str	r5, [r4, #24]
 8000810:	2208      	movs	r2, #8
 8000812:	4629      	mov	r1, r5
 8000814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000818:	f7ff ff24 	bl	8000664 <memset>
 800081c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000824:	4620      	mov	r0, r4
 8000826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000828:	3468      	adds	r4, #104	; 0x68
 800082a:	e7d9      	b.n	80007e0 <__sfp+0x1c>
 800082c:	2104      	movs	r1, #4
 800082e:	4638      	mov	r0, r7
 8000830:	f7ff ff62 	bl	80006f8 <__sfmoreglue>
 8000834:	4604      	mov	r4, r0
 8000836:	6030      	str	r0, [r6, #0]
 8000838:	2800      	cmp	r0, #0
 800083a:	d1d5      	bne.n	80007e8 <__sfp+0x24>
 800083c:	f7ff ff78 	bl	8000730 <__sfp_lock_release>
 8000840:	230c      	movs	r3, #12
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	e7ee      	b.n	8000824 <__sfp+0x60>
 8000846:	bf00      	nop
 8000848:	08001548 	.word	0x08001548
 800084c:	ffff0001 	.word	0xffff0001

08000850 <_fwalk_reent>:
 8000850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000854:	4606      	mov	r6, r0
 8000856:	4688      	mov	r8, r1
 8000858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800085c:	2700      	movs	r7, #0
 800085e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000862:	f1b9 0901 	subs.w	r9, r9, #1
 8000866:	d505      	bpl.n	8000874 <_fwalk_reent+0x24>
 8000868:	6824      	ldr	r4, [r4, #0]
 800086a:	2c00      	cmp	r4, #0
 800086c:	d1f7      	bne.n	800085e <_fwalk_reent+0xe>
 800086e:	4638      	mov	r0, r7
 8000870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000874:	89ab      	ldrh	r3, [r5, #12]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d907      	bls.n	800088a <_fwalk_reent+0x3a>
 800087a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800087e:	3301      	adds	r3, #1
 8000880:	d003      	beq.n	800088a <_fwalk_reent+0x3a>
 8000882:	4629      	mov	r1, r5
 8000884:	4630      	mov	r0, r6
 8000886:	47c0      	blx	r8
 8000888:	4307      	orrs	r7, r0
 800088a:	3568      	adds	r5, #104	; 0x68
 800088c:	e7e9      	b.n	8000862 <_fwalk_reent+0x12>

0800088e <__retarget_lock_init_recursive>:
 800088e:	4770      	bx	lr

08000890 <__retarget_lock_acquire_recursive>:
 8000890:	4770      	bx	lr

08000892 <__retarget_lock_release_recursive>:
 8000892:	4770      	bx	lr

08000894 <_malloc_r>:
 8000894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000896:	1ccd      	adds	r5, r1, #3
 8000898:	f025 0503 	bic.w	r5, r5, #3
 800089c:	3508      	adds	r5, #8
 800089e:	2d0c      	cmp	r5, #12
 80008a0:	bf38      	it	cc
 80008a2:	250c      	movcc	r5, #12
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	4606      	mov	r6, r0
 80008a8:	db01      	blt.n	80008ae <_malloc_r+0x1a>
 80008aa:	42a9      	cmp	r1, r5
 80008ac:	d903      	bls.n	80008b6 <_malloc_r+0x22>
 80008ae:	230c      	movs	r3, #12
 80008b0:	6033      	str	r3, [r6, #0]
 80008b2:	2000      	movs	r0, #0
 80008b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b6:	f000 fda3 	bl	8001400 <__malloc_lock>
 80008ba:	4921      	ldr	r1, [pc, #132]	; (8000940 <_malloc_r+0xac>)
 80008bc:	680a      	ldr	r2, [r1, #0]
 80008be:	4614      	mov	r4, r2
 80008c0:	b99c      	cbnz	r4, 80008ea <_malloc_r+0x56>
 80008c2:	4f20      	ldr	r7, [pc, #128]	; (8000944 <_malloc_r+0xb0>)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b923      	cbnz	r3, 80008d2 <_malloc_r+0x3e>
 80008c8:	4621      	mov	r1, r4
 80008ca:	4630      	mov	r0, r6
 80008cc:	f000 fb2a 	bl	8000f24 <_sbrk_r>
 80008d0:	6038      	str	r0, [r7, #0]
 80008d2:	4629      	mov	r1, r5
 80008d4:	4630      	mov	r0, r6
 80008d6:	f000 fb25 	bl	8000f24 <_sbrk_r>
 80008da:	1c43      	adds	r3, r0, #1
 80008dc:	d123      	bne.n	8000926 <_malloc_r+0x92>
 80008de:	230c      	movs	r3, #12
 80008e0:	6033      	str	r3, [r6, #0]
 80008e2:	4630      	mov	r0, r6
 80008e4:	f000 fd92 	bl	800140c <__malloc_unlock>
 80008e8:	e7e3      	b.n	80008b2 <_malloc_r+0x1e>
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	1b5b      	subs	r3, r3, r5
 80008ee:	d417      	bmi.n	8000920 <_malloc_r+0x8c>
 80008f0:	2b0b      	cmp	r3, #11
 80008f2:	d903      	bls.n	80008fc <_malloc_r+0x68>
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	441c      	add	r4, r3
 80008f8:	6025      	str	r5, [r4, #0]
 80008fa:	e004      	b.n	8000906 <_malloc_r+0x72>
 80008fc:	6863      	ldr	r3, [r4, #4]
 80008fe:	42a2      	cmp	r2, r4
 8000900:	bf0c      	ite	eq
 8000902:	600b      	streq	r3, [r1, #0]
 8000904:	6053      	strne	r3, [r2, #4]
 8000906:	4630      	mov	r0, r6
 8000908:	f000 fd80 	bl	800140c <__malloc_unlock>
 800090c:	f104 000b 	add.w	r0, r4, #11
 8000910:	1d23      	adds	r3, r4, #4
 8000912:	f020 0007 	bic.w	r0, r0, #7
 8000916:	1ac2      	subs	r2, r0, r3
 8000918:	d0cc      	beq.n	80008b4 <_malloc_r+0x20>
 800091a:	1a1b      	subs	r3, r3, r0
 800091c:	50a3      	str	r3, [r4, r2]
 800091e:	e7c9      	b.n	80008b4 <_malloc_r+0x20>
 8000920:	4622      	mov	r2, r4
 8000922:	6864      	ldr	r4, [r4, #4]
 8000924:	e7cc      	b.n	80008c0 <_malloc_r+0x2c>
 8000926:	1cc4      	adds	r4, r0, #3
 8000928:	f024 0403 	bic.w	r4, r4, #3
 800092c:	42a0      	cmp	r0, r4
 800092e:	d0e3      	beq.n	80008f8 <_malloc_r+0x64>
 8000930:	1a21      	subs	r1, r4, r0
 8000932:	4630      	mov	r0, r6
 8000934:	f000 faf6 	bl	8000f24 <_sbrk_r>
 8000938:	3001      	adds	r0, #1
 800093a:	d1dd      	bne.n	80008f8 <_malloc_r+0x64>
 800093c:	e7cf      	b.n	80008de <_malloc_r+0x4a>
 800093e:	bf00      	nop
 8000940:	20000088 	.word	0x20000088
 8000944:	2000008c 	.word	0x2000008c

08000948 <__sfputc_r>:
 8000948:	6893      	ldr	r3, [r2, #8]
 800094a:	3b01      	subs	r3, #1
 800094c:	2b00      	cmp	r3, #0
 800094e:	b410      	push	{r4}
 8000950:	6093      	str	r3, [r2, #8]
 8000952:	da08      	bge.n	8000966 <__sfputc_r+0x1e>
 8000954:	6994      	ldr	r4, [r2, #24]
 8000956:	42a3      	cmp	r3, r4
 8000958:	db01      	blt.n	800095e <__sfputc_r+0x16>
 800095a:	290a      	cmp	r1, #10
 800095c:	d103      	bne.n	8000966 <__sfputc_r+0x1e>
 800095e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000962:	f000 bb33 	b.w	8000fcc <__swbuf_r>
 8000966:	6813      	ldr	r3, [r2, #0]
 8000968:	1c58      	adds	r0, r3, #1
 800096a:	6010      	str	r0, [r2, #0]
 800096c:	7019      	strb	r1, [r3, #0]
 800096e:	4608      	mov	r0, r1
 8000970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000974:	4770      	bx	lr

08000976 <__sfputs_r>:
 8000976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000978:	4606      	mov	r6, r0
 800097a:	460f      	mov	r7, r1
 800097c:	4614      	mov	r4, r2
 800097e:	18d5      	adds	r5, r2, r3
 8000980:	42ac      	cmp	r4, r5
 8000982:	d101      	bne.n	8000988 <__sfputs_r+0x12>
 8000984:	2000      	movs	r0, #0
 8000986:	e007      	b.n	8000998 <__sfputs_r+0x22>
 8000988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800098c:	463a      	mov	r2, r7
 800098e:	4630      	mov	r0, r6
 8000990:	f7ff ffda 	bl	8000948 <__sfputc_r>
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	d1f3      	bne.n	8000980 <__sfputs_r+0xa>
 8000998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800099c <_vfiprintf_r>:
 800099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a0:	460d      	mov	r5, r1
 80009a2:	b09d      	sub	sp, #116	; 0x74
 80009a4:	4614      	mov	r4, r2
 80009a6:	4698      	mov	r8, r3
 80009a8:	4606      	mov	r6, r0
 80009aa:	b118      	cbz	r0, 80009b4 <_vfiprintf_r+0x18>
 80009ac:	6983      	ldr	r3, [r0, #24]
 80009ae:	b90b      	cbnz	r3, 80009b4 <_vfiprintf_r+0x18>
 80009b0:	f7ff fed0 	bl	8000754 <__sinit>
 80009b4:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <_vfiprintf_r+0x240>)
 80009b6:	429d      	cmp	r5, r3
 80009b8:	d11b      	bne.n	80009f2 <_vfiprintf_r+0x56>
 80009ba:	6875      	ldr	r5, [r6, #4]
 80009bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009be:	07d9      	lsls	r1, r3, #31
 80009c0:	d405      	bmi.n	80009ce <_vfiprintf_r+0x32>
 80009c2:	89ab      	ldrh	r3, [r5, #12]
 80009c4:	059a      	lsls	r2, r3, #22
 80009c6:	d402      	bmi.n	80009ce <_vfiprintf_r+0x32>
 80009c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009ca:	f7ff ff61 	bl	8000890 <__retarget_lock_acquire_recursive>
 80009ce:	89ab      	ldrh	r3, [r5, #12]
 80009d0:	071b      	lsls	r3, r3, #28
 80009d2:	d501      	bpl.n	80009d8 <_vfiprintf_r+0x3c>
 80009d4:	692b      	ldr	r3, [r5, #16]
 80009d6:	b9eb      	cbnz	r3, 8000a14 <_vfiprintf_r+0x78>
 80009d8:	4629      	mov	r1, r5
 80009da:	4630      	mov	r0, r6
 80009dc:	f000 fb5a 	bl	8001094 <__swsetup_r>
 80009e0:	b1c0      	cbz	r0, 8000a14 <_vfiprintf_r+0x78>
 80009e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009e4:	07dc      	lsls	r4, r3, #31
 80009e6:	d50e      	bpl.n	8000a06 <_vfiprintf_r+0x6a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	b01d      	add	sp, #116	; 0x74
 80009ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f2:	4b7b      	ldr	r3, [pc, #492]	; (8000be0 <_vfiprintf_r+0x244>)
 80009f4:	429d      	cmp	r5, r3
 80009f6:	d101      	bne.n	80009fc <_vfiprintf_r+0x60>
 80009f8:	68b5      	ldr	r5, [r6, #8]
 80009fa:	e7df      	b.n	80009bc <_vfiprintf_r+0x20>
 80009fc:	4b79      	ldr	r3, [pc, #484]	; (8000be4 <_vfiprintf_r+0x248>)
 80009fe:	429d      	cmp	r5, r3
 8000a00:	bf08      	it	eq
 8000a02:	68f5      	ldreq	r5, [r6, #12]
 8000a04:	e7da      	b.n	80009bc <_vfiprintf_r+0x20>
 8000a06:	89ab      	ldrh	r3, [r5, #12]
 8000a08:	0598      	lsls	r0, r3, #22
 8000a0a:	d4ed      	bmi.n	80009e8 <_vfiprintf_r+0x4c>
 8000a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a0e:	f7ff ff40 	bl	8000892 <__retarget_lock_release_recursive>
 8000a12:	e7e9      	b.n	80009e8 <_vfiprintf_r+0x4c>
 8000a14:	2300      	movs	r3, #0
 8000a16:	9309      	str	r3, [sp, #36]	; 0x24
 8000a18:	2320      	movs	r3, #32
 8000a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a22:	2330      	movs	r3, #48	; 0x30
 8000a24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000be8 <_vfiprintf_r+0x24c>
 8000a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a2c:	f04f 0901 	mov.w	r9, #1
 8000a30:	4623      	mov	r3, r4
 8000a32:	469a      	mov	sl, r3
 8000a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a38:	b10a      	cbz	r2, 8000a3e <_vfiprintf_r+0xa2>
 8000a3a:	2a25      	cmp	r2, #37	; 0x25
 8000a3c:	d1f9      	bne.n	8000a32 <_vfiprintf_r+0x96>
 8000a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8000a42:	d00b      	beq.n	8000a5c <_vfiprintf_r+0xc0>
 8000a44:	465b      	mov	r3, fp
 8000a46:	4622      	mov	r2, r4
 8000a48:	4629      	mov	r1, r5
 8000a4a:	4630      	mov	r0, r6
 8000a4c:	f7ff ff93 	bl	8000976 <__sfputs_r>
 8000a50:	3001      	adds	r0, #1
 8000a52:	f000 80aa 	beq.w	8000baa <_vfiprintf_r+0x20e>
 8000a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a58:	445a      	add	r2, fp
 8000a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8000a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 80a2 	beq.w	8000baa <_vfiprintf_r+0x20e>
 8000a66:	2300      	movs	r3, #0
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a70:	f10a 0a01 	add.w	sl, sl, #1
 8000a74:	9304      	str	r3, [sp, #16]
 8000a76:	9307      	str	r3, [sp, #28]
 8000a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8000a7e:	4654      	mov	r4, sl
 8000a80:	2205      	movs	r2, #5
 8000a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a86:	4858      	ldr	r0, [pc, #352]	; (8000be8 <_vfiprintf_r+0x24c>)
 8000a88:	f7ff fbaa 	bl	80001e0 <memchr>
 8000a8c:	9a04      	ldr	r2, [sp, #16]
 8000a8e:	b9d8      	cbnz	r0, 8000ac8 <_vfiprintf_r+0x12c>
 8000a90:	06d1      	lsls	r1, r2, #27
 8000a92:	bf44      	itt	mi
 8000a94:	2320      	movmi	r3, #32
 8000a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a9a:	0713      	lsls	r3, r2, #28
 8000a9c:	bf44      	itt	mi
 8000a9e:	232b      	movmi	r3, #43	; 0x2b
 8000aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8000aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8000aaa:	d015      	beq.n	8000ad8 <_vfiprintf_r+0x13c>
 8000aac:	9a07      	ldr	r2, [sp, #28]
 8000aae:	4654      	mov	r4, sl
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f04f 0c0a 	mov.w	ip, #10
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000abc:	3b30      	subs	r3, #48	; 0x30
 8000abe:	2b09      	cmp	r3, #9
 8000ac0:	d94e      	bls.n	8000b60 <_vfiprintf_r+0x1c4>
 8000ac2:	b1b0      	cbz	r0, 8000af2 <_vfiprintf_r+0x156>
 8000ac4:	9207      	str	r2, [sp, #28]
 8000ac6:	e014      	b.n	8000af2 <_vfiprintf_r+0x156>
 8000ac8:	eba0 0308 	sub.w	r3, r0, r8
 8000acc:	fa09 f303 	lsl.w	r3, r9, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	9304      	str	r3, [sp, #16]
 8000ad4:	46a2      	mov	sl, r4
 8000ad6:	e7d2      	b.n	8000a7e <_vfiprintf_r+0xe2>
 8000ad8:	9b03      	ldr	r3, [sp, #12]
 8000ada:	1d19      	adds	r1, r3, #4
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	9103      	str	r1, [sp, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bfbb      	ittet	lt
 8000ae4:	425b      	neglt	r3, r3
 8000ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8000aea:	9307      	strge	r3, [sp, #28]
 8000aec:	9307      	strlt	r3, [sp, #28]
 8000aee:	bfb8      	it	lt
 8000af0:	9204      	strlt	r2, [sp, #16]
 8000af2:	7823      	ldrb	r3, [r4, #0]
 8000af4:	2b2e      	cmp	r3, #46	; 0x2e
 8000af6:	d10c      	bne.n	8000b12 <_vfiprintf_r+0x176>
 8000af8:	7863      	ldrb	r3, [r4, #1]
 8000afa:	2b2a      	cmp	r3, #42	; 0x2a
 8000afc:	d135      	bne.n	8000b6a <_vfiprintf_r+0x1ce>
 8000afe:	9b03      	ldr	r3, [sp, #12]
 8000b00:	1d1a      	adds	r2, r3, #4
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	9203      	str	r2, [sp, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bfb8      	it	lt
 8000b0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000b0e:	3402      	adds	r4, #2
 8000b10:	9305      	str	r3, [sp, #20]
 8000b12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000bf8 <_vfiprintf_r+0x25c>
 8000b16:	7821      	ldrb	r1, [r4, #0]
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4650      	mov	r0, sl
 8000b1c:	f7ff fb60 	bl	80001e0 <memchr>
 8000b20:	b140      	cbz	r0, 8000b34 <_vfiprintf_r+0x198>
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	eba0 000a 	sub.w	r0, r0, sl
 8000b28:	fa03 f000 	lsl.w	r0, r3, r0
 8000b2c:	9b04      	ldr	r3, [sp, #16]
 8000b2e:	4303      	orrs	r3, r0
 8000b30:	3401      	adds	r4, #1
 8000b32:	9304      	str	r3, [sp, #16]
 8000b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b38:	482c      	ldr	r0, [pc, #176]	; (8000bec <_vfiprintf_r+0x250>)
 8000b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b3e:	2206      	movs	r2, #6
 8000b40:	f7ff fb4e 	bl	80001e0 <memchr>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d03f      	beq.n	8000bc8 <_vfiprintf_r+0x22c>
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <_vfiprintf_r+0x254>)
 8000b4a:	bb1b      	cbnz	r3, 8000b94 <_vfiprintf_r+0x1f8>
 8000b4c:	9b03      	ldr	r3, [sp, #12]
 8000b4e:	3307      	adds	r3, #7
 8000b50:	f023 0307 	bic.w	r3, r3, #7
 8000b54:	3308      	adds	r3, #8
 8000b56:	9303      	str	r3, [sp, #12]
 8000b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b5a:	443b      	add	r3, r7
 8000b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b5e:	e767      	b.n	8000a30 <_vfiprintf_r+0x94>
 8000b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b64:	460c      	mov	r4, r1
 8000b66:	2001      	movs	r0, #1
 8000b68:	e7a5      	b.n	8000ab6 <_vfiprintf_r+0x11a>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	3401      	adds	r4, #1
 8000b6e:	9305      	str	r3, [sp, #20]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 0c0a 	mov.w	ip, #10
 8000b76:	4620      	mov	r0, r4
 8000b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b7c:	3a30      	subs	r2, #48	; 0x30
 8000b7e:	2a09      	cmp	r2, #9
 8000b80:	d903      	bls.n	8000b8a <_vfiprintf_r+0x1ee>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0c5      	beq.n	8000b12 <_vfiprintf_r+0x176>
 8000b86:	9105      	str	r1, [sp, #20]
 8000b88:	e7c3      	b.n	8000b12 <_vfiprintf_r+0x176>
 8000b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b8e:	4604      	mov	r4, r0
 8000b90:	2301      	movs	r3, #1
 8000b92:	e7f0      	b.n	8000b76 <_vfiprintf_r+0x1da>
 8000b94:	ab03      	add	r3, sp, #12
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	462a      	mov	r2, r5
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <_vfiprintf_r+0x258>)
 8000b9c:	a904      	add	r1, sp, #16
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	f3af 8000 	nop.w
 8000ba4:	4607      	mov	r7, r0
 8000ba6:	1c78      	adds	r0, r7, #1
 8000ba8:	d1d6      	bne.n	8000b58 <_vfiprintf_r+0x1bc>
 8000baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bac:	07d9      	lsls	r1, r3, #31
 8000bae:	d405      	bmi.n	8000bbc <_vfiprintf_r+0x220>
 8000bb0:	89ab      	ldrh	r3, [r5, #12]
 8000bb2:	059a      	lsls	r2, r3, #22
 8000bb4:	d402      	bmi.n	8000bbc <_vfiprintf_r+0x220>
 8000bb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bb8:	f7ff fe6b 	bl	8000892 <__retarget_lock_release_recursive>
 8000bbc:	89ab      	ldrh	r3, [r5, #12]
 8000bbe:	065b      	lsls	r3, r3, #25
 8000bc0:	f53f af12 	bmi.w	80009e8 <_vfiprintf_r+0x4c>
 8000bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bc6:	e711      	b.n	80009ec <_vfiprintf_r+0x50>
 8000bc8:	ab03      	add	r3, sp, #12
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	462a      	mov	r2, r5
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <_vfiprintf_r+0x258>)
 8000bd0:	a904      	add	r1, sp, #16
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f000 f880 	bl	8000cd8 <_printf_i>
 8000bd8:	e7e4      	b.n	8000ba4 <_vfiprintf_r+0x208>
 8000bda:	bf00      	nop
 8000bdc:	0800156c 	.word	0x0800156c
 8000be0:	0800158c 	.word	0x0800158c
 8000be4:	0800154c 	.word	0x0800154c
 8000be8:	080015ac 	.word	0x080015ac
 8000bec:	080015b6 	.word	0x080015b6
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	08000977 	.word	0x08000977
 8000bf8:	080015b2 	.word	0x080015b2

08000bfc <_printf_common>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	4616      	mov	r6, r2
 8000c02:	4699      	mov	r9, r3
 8000c04:	688a      	ldr	r2, [r1, #8]
 8000c06:	690b      	ldr	r3, [r1, #16]
 8000c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	bfb8      	it	lt
 8000c10:	4613      	movlt	r3, r2
 8000c12:	6033      	str	r3, [r6, #0]
 8000c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c18:	4607      	mov	r7, r0
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	b10a      	cbz	r2, 8000c22 <_printf_common+0x26>
 8000c1e:	3301      	adds	r3, #1
 8000c20:	6033      	str	r3, [r6, #0]
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	0699      	lsls	r1, r3, #26
 8000c26:	bf42      	ittt	mi
 8000c28:	6833      	ldrmi	r3, [r6, #0]
 8000c2a:	3302      	addmi	r3, #2
 8000c2c:	6033      	strmi	r3, [r6, #0]
 8000c2e:	6825      	ldr	r5, [r4, #0]
 8000c30:	f015 0506 	ands.w	r5, r5, #6
 8000c34:	d106      	bne.n	8000c44 <_printf_common+0x48>
 8000c36:	f104 0a19 	add.w	sl, r4, #25
 8000c3a:	68e3      	ldr	r3, [r4, #12]
 8000c3c:	6832      	ldr	r2, [r6, #0]
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	dc26      	bgt.n	8000c92 <_printf_common+0x96>
 8000c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c48:	1e13      	subs	r3, r2, #0
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	bf18      	it	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	0692      	lsls	r2, r2, #26
 8000c52:	d42b      	bmi.n	8000cac <_printf_common+0xb0>
 8000c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c58:	4649      	mov	r1, r9
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	47c0      	blx	r8
 8000c5e:	3001      	adds	r0, #1
 8000c60:	d01e      	beq.n	8000ca0 <_printf_common+0xa4>
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	68e5      	ldr	r5, [r4, #12]
 8000c66:	6832      	ldr	r2, [r6, #0]
 8000c68:	f003 0306 	and.w	r3, r3, #6
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	bf08      	it	eq
 8000c70:	1aad      	subeq	r5, r5, r2
 8000c72:	68a3      	ldr	r3, [r4, #8]
 8000c74:	6922      	ldr	r2, [r4, #16]
 8000c76:	bf0c      	ite	eq
 8000c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c7c:	2500      	movne	r5, #0
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	bfc4      	itt	gt
 8000c82:	1a9b      	subgt	r3, r3, r2
 8000c84:	18ed      	addgt	r5, r5, r3
 8000c86:	2600      	movs	r6, #0
 8000c88:	341a      	adds	r4, #26
 8000c8a:	42b5      	cmp	r5, r6
 8000c8c:	d11a      	bne.n	8000cc4 <_printf_common+0xc8>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	e008      	b.n	8000ca4 <_printf_common+0xa8>
 8000c92:	2301      	movs	r3, #1
 8000c94:	4652      	mov	r2, sl
 8000c96:	4649      	mov	r1, r9
 8000c98:	4638      	mov	r0, r7
 8000c9a:	47c0      	blx	r8
 8000c9c:	3001      	adds	r0, #1
 8000c9e:	d103      	bne.n	8000ca8 <_printf_common+0xac>
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	3501      	adds	r5, #1
 8000caa:	e7c6      	b.n	8000c3a <_printf_common+0x3e>
 8000cac:	18e1      	adds	r1, r4, r3
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	2030      	movs	r0, #48	; 0x30
 8000cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cb6:	4422      	add	r2, r4
 8000cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	e7c7      	b.n	8000c54 <_printf_common+0x58>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	4649      	mov	r1, r9
 8000cca:	4638      	mov	r0, r7
 8000ccc:	47c0      	blx	r8
 8000cce:	3001      	adds	r0, #1
 8000cd0:	d0e6      	beq.n	8000ca0 <_printf_common+0xa4>
 8000cd2:	3601      	adds	r6, #1
 8000cd4:	e7d9      	b.n	8000c8a <_printf_common+0x8e>
	...

08000cd8 <_printf_i>:
 8000cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	460c      	mov	r4, r1
 8000cde:	4691      	mov	r9, r2
 8000ce0:	7e27      	ldrb	r7, [r4, #24]
 8000ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000ce4:	2f78      	cmp	r7, #120	; 0x78
 8000ce6:	4680      	mov	r8, r0
 8000ce8:	469a      	mov	sl, r3
 8000cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cee:	d807      	bhi.n	8000d00 <_printf_i+0x28>
 8000cf0:	2f62      	cmp	r7, #98	; 0x62
 8000cf2:	d80a      	bhi.n	8000d0a <_printf_i+0x32>
 8000cf4:	2f00      	cmp	r7, #0
 8000cf6:	f000 80d8 	beq.w	8000eaa <_printf_i+0x1d2>
 8000cfa:	2f58      	cmp	r7, #88	; 0x58
 8000cfc:	f000 80a3 	beq.w	8000e46 <_printf_i+0x16e>
 8000d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d08:	e03a      	b.n	8000d80 <_printf_i+0xa8>
 8000d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d0e:	2b15      	cmp	r3, #21
 8000d10:	d8f6      	bhi.n	8000d00 <_printf_i+0x28>
 8000d12:	a001      	add	r0, pc, #4	; (adr r0, 8000d18 <_printf_i+0x40>)
 8000d14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000d18:	08000d71 	.word	0x08000d71
 8000d1c:	08000d85 	.word	0x08000d85
 8000d20:	08000d01 	.word	0x08000d01
 8000d24:	08000d01 	.word	0x08000d01
 8000d28:	08000d01 	.word	0x08000d01
 8000d2c:	08000d01 	.word	0x08000d01
 8000d30:	08000d85 	.word	0x08000d85
 8000d34:	08000d01 	.word	0x08000d01
 8000d38:	08000d01 	.word	0x08000d01
 8000d3c:	08000d01 	.word	0x08000d01
 8000d40:	08000d01 	.word	0x08000d01
 8000d44:	08000e91 	.word	0x08000e91
 8000d48:	08000db5 	.word	0x08000db5
 8000d4c:	08000e73 	.word	0x08000e73
 8000d50:	08000d01 	.word	0x08000d01
 8000d54:	08000d01 	.word	0x08000d01
 8000d58:	08000eb3 	.word	0x08000eb3
 8000d5c:	08000d01 	.word	0x08000d01
 8000d60:	08000db5 	.word	0x08000db5
 8000d64:	08000d01 	.word	0x08000d01
 8000d68:	08000d01 	.word	0x08000d01
 8000d6c:	08000e7b 	.word	0x08000e7b
 8000d70:	680b      	ldr	r3, [r1, #0]
 8000d72:	1d1a      	adds	r2, r3, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	600a      	str	r2, [r1, #0]
 8000d78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0a3      	b.n	8000ecc <_printf_i+0x1f4>
 8000d84:	6825      	ldr	r5, [r4, #0]
 8000d86:	6808      	ldr	r0, [r1, #0]
 8000d88:	062e      	lsls	r6, r5, #24
 8000d8a:	f100 0304 	add.w	r3, r0, #4
 8000d8e:	d50a      	bpl.n	8000da6 <_printf_i+0xce>
 8000d90:	6805      	ldr	r5, [r0, #0]
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	da03      	bge.n	8000da0 <_printf_i+0xc8>
 8000d98:	232d      	movs	r3, #45	; 0x2d
 8000d9a:	426d      	negs	r5, r5
 8000d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000da0:	485e      	ldr	r0, [pc, #376]	; (8000f1c <_printf_i+0x244>)
 8000da2:	230a      	movs	r3, #10
 8000da4:	e019      	b.n	8000dda <_printf_i+0x102>
 8000da6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000daa:	6805      	ldr	r5, [r0, #0]
 8000dac:	600b      	str	r3, [r1, #0]
 8000dae:	bf18      	it	ne
 8000db0:	b22d      	sxthne	r5, r5
 8000db2:	e7ef      	b.n	8000d94 <_printf_i+0xbc>
 8000db4:	680b      	ldr	r3, [r1, #0]
 8000db6:	6825      	ldr	r5, [r4, #0]
 8000db8:	1d18      	adds	r0, r3, #4
 8000dba:	6008      	str	r0, [r1, #0]
 8000dbc:	0628      	lsls	r0, r5, #24
 8000dbe:	d501      	bpl.n	8000dc4 <_printf_i+0xec>
 8000dc0:	681d      	ldr	r5, [r3, #0]
 8000dc2:	e002      	b.n	8000dca <_printf_i+0xf2>
 8000dc4:	0669      	lsls	r1, r5, #25
 8000dc6:	d5fb      	bpl.n	8000dc0 <_printf_i+0xe8>
 8000dc8:	881d      	ldrh	r5, [r3, #0]
 8000dca:	4854      	ldr	r0, [pc, #336]	; (8000f1c <_printf_i+0x244>)
 8000dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8000dce:	bf0c      	ite	eq
 8000dd0:	2308      	moveq	r3, #8
 8000dd2:	230a      	movne	r3, #10
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000dda:	6866      	ldr	r6, [r4, #4]
 8000ddc:	60a6      	str	r6, [r4, #8]
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	bfa2      	ittt	ge
 8000de2:	6821      	ldrge	r1, [r4, #0]
 8000de4:	f021 0104 	bicge.w	r1, r1, #4
 8000de8:	6021      	strge	r1, [r4, #0]
 8000dea:	b90d      	cbnz	r5, 8000df0 <_printf_i+0x118>
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d04d      	beq.n	8000e8c <_printf_i+0x1b4>
 8000df0:	4616      	mov	r6, r2
 8000df2:	fbb5 f1f3 	udiv	r1, r5, r3
 8000df6:	fb03 5711 	mls	r7, r3, r1, r5
 8000dfa:	5dc7      	ldrb	r7, [r0, r7]
 8000dfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e00:	462f      	mov	r7, r5
 8000e02:	42bb      	cmp	r3, r7
 8000e04:	460d      	mov	r5, r1
 8000e06:	d9f4      	bls.n	8000df2 <_printf_i+0x11a>
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d10b      	bne.n	8000e24 <_printf_i+0x14c>
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	07df      	lsls	r7, r3, #31
 8000e10:	d508      	bpl.n	8000e24 <_printf_i+0x14c>
 8000e12:	6923      	ldr	r3, [r4, #16]
 8000e14:	6861      	ldr	r1, [r4, #4]
 8000e16:	4299      	cmp	r1, r3
 8000e18:	bfde      	ittt	le
 8000e1a:	2330      	movle	r3, #48	; 0x30
 8000e1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e20:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8000e24:	1b92      	subs	r2, r2, r6
 8000e26:	6122      	str	r2, [r4, #16]
 8000e28:	f8cd a000 	str.w	sl, [sp]
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	aa03      	add	r2, sp, #12
 8000e30:	4621      	mov	r1, r4
 8000e32:	4640      	mov	r0, r8
 8000e34:	f7ff fee2 	bl	8000bfc <_printf_common>
 8000e38:	3001      	adds	r0, #1
 8000e3a:	d14c      	bne.n	8000ed6 <_printf_i+0x1fe>
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	b004      	add	sp, #16
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	4835      	ldr	r0, [pc, #212]	; (8000f1c <_printf_i+0x244>)
 8000e48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	680e      	ldr	r6, [r1, #0]
 8000e50:	061f      	lsls	r7, r3, #24
 8000e52:	f856 5b04 	ldr.w	r5, [r6], #4
 8000e56:	600e      	str	r6, [r1, #0]
 8000e58:	d514      	bpl.n	8000e84 <_printf_i+0x1ac>
 8000e5a:	07d9      	lsls	r1, r3, #31
 8000e5c:	bf44      	itt	mi
 8000e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8000e62:	6023      	strmi	r3, [r4, #0]
 8000e64:	b91d      	cbnz	r5, 8000e6e <_printf_i+0x196>
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	f023 0320 	bic.w	r3, r3, #32
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	2310      	movs	r3, #16
 8000e70:	e7b0      	b.n	8000dd4 <_printf_i+0xfc>
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	2378      	movs	r3, #120	; 0x78
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <_printf_i+0x248>)
 8000e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e82:	e7e3      	b.n	8000e4c <_printf_i+0x174>
 8000e84:	065e      	lsls	r6, r3, #25
 8000e86:	bf48      	it	mi
 8000e88:	b2ad      	uxthmi	r5, r5
 8000e8a:	e7e6      	b.n	8000e5a <_printf_i+0x182>
 8000e8c:	4616      	mov	r6, r2
 8000e8e:	e7bb      	b.n	8000e08 <_printf_i+0x130>
 8000e90:	680b      	ldr	r3, [r1, #0]
 8000e92:	6826      	ldr	r6, [r4, #0]
 8000e94:	6960      	ldr	r0, [r4, #20]
 8000e96:	1d1d      	adds	r5, r3, #4
 8000e98:	600d      	str	r5, [r1, #0]
 8000e9a:	0635      	lsls	r5, r6, #24
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	d501      	bpl.n	8000ea4 <_printf_i+0x1cc>
 8000ea0:	6018      	str	r0, [r3, #0]
 8000ea2:	e002      	b.n	8000eaa <_printf_i+0x1d2>
 8000ea4:	0671      	lsls	r1, r6, #25
 8000ea6:	d5fb      	bpl.n	8000ea0 <_printf_i+0x1c8>
 8000ea8:	8018      	strh	r0, [r3, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	6123      	str	r3, [r4, #16]
 8000eae:	4616      	mov	r6, r2
 8000eb0:	e7ba      	b.n	8000e28 <_printf_i+0x150>
 8000eb2:	680b      	ldr	r3, [r1, #0]
 8000eb4:	1d1a      	adds	r2, r3, #4
 8000eb6:	600a      	str	r2, [r1, #0]
 8000eb8:	681e      	ldr	r6, [r3, #0]
 8000eba:	6862      	ldr	r2, [r4, #4]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	f7ff f98e 	bl	80001e0 <memchr>
 8000ec4:	b108      	cbz	r0, 8000eca <_printf_i+0x1f2>
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	6060      	str	r0, [r4, #4]
 8000eca:	6863      	ldr	r3, [r4, #4]
 8000ecc:	6123      	str	r3, [r4, #16]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ed4:	e7a8      	b.n	8000e28 <_printf_i+0x150>
 8000ed6:	6923      	ldr	r3, [r4, #16]
 8000ed8:	4632      	mov	r2, r6
 8000eda:	4649      	mov	r1, r9
 8000edc:	4640      	mov	r0, r8
 8000ede:	47d0      	blx	sl
 8000ee0:	3001      	adds	r0, #1
 8000ee2:	d0ab      	beq.n	8000e3c <_printf_i+0x164>
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	079b      	lsls	r3, r3, #30
 8000ee8:	d413      	bmi.n	8000f12 <_printf_i+0x23a>
 8000eea:	68e0      	ldr	r0, [r4, #12]
 8000eec:	9b03      	ldr	r3, [sp, #12]
 8000eee:	4298      	cmp	r0, r3
 8000ef0:	bfb8      	it	lt
 8000ef2:	4618      	movlt	r0, r3
 8000ef4:	e7a4      	b.n	8000e40 <_printf_i+0x168>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4632      	mov	r2, r6
 8000efa:	4649      	mov	r1, r9
 8000efc:	4640      	mov	r0, r8
 8000efe:	47d0      	blx	sl
 8000f00:	3001      	adds	r0, #1
 8000f02:	d09b      	beq.n	8000e3c <_printf_i+0x164>
 8000f04:	3501      	adds	r5, #1
 8000f06:	68e3      	ldr	r3, [r4, #12]
 8000f08:	9903      	ldr	r1, [sp, #12]
 8000f0a:	1a5b      	subs	r3, r3, r1
 8000f0c:	42ab      	cmp	r3, r5
 8000f0e:	dcf2      	bgt.n	8000ef6 <_printf_i+0x21e>
 8000f10:	e7eb      	b.n	8000eea <_printf_i+0x212>
 8000f12:	2500      	movs	r5, #0
 8000f14:	f104 0619 	add.w	r6, r4, #25
 8000f18:	e7f5      	b.n	8000f06 <_printf_i+0x22e>
 8000f1a:	bf00      	nop
 8000f1c:	080015bd 	.word	0x080015bd
 8000f20:	080015ce 	.word	0x080015ce

08000f24 <_sbrk_r>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	4d06      	ldr	r5, [pc, #24]	; (8000f40 <_sbrk_r+0x1c>)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	602b      	str	r3, [r5, #0]
 8000f30:	f7ff fae8 	bl	8000504 <_sbrk>
 8000f34:	1c43      	adds	r3, r0, #1
 8000f36:	d102      	bne.n	8000f3e <_sbrk_r+0x1a>
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	b103      	cbz	r3, 8000f3e <_sbrk_r+0x1a>
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	bd38      	pop	{r3, r4, r5, pc}
 8000f40:	200000a0 	.word	0x200000a0

08000f44 <__sread>:
 8000f44:	b510      	push	{r4, lr}
 8000f46:	460c      	mov	r4, r1
 8000f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f4c:	f000 fab4 	bl	80014b8 <_read_r>
 8000f50:	2800      	cmp	r0, #0
 8000f52:	bfab      	itete	ge
 8000f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f56:	89a3      	ldrhlt	r3, [r4, #12]
 8000f58:	181b      	addge	r3, r3, r0
 8000f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f5e:	bfac      	ite	ge
 8000f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f62:	81a3      	strhlt	r3, [r4, #12]
 8000f64:	bd10      	pop	{r4, pc}

08000f66 <__swrite>:
 8000f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6a:	461f      	mov	r7, r3
 8000f6c:	898b      	ldrh	r3, [r1, #12]
 8000f6e:	05db      	lsls	r3, r3, #23
 8000f70:	4605      	mov	r5, r0
 8000f72:	460c      	mov	r4, r1
 8000f74:	4616      	mov	r6, r2
 8000f76:	d505      	bpl.n	8000f84 <__swrite+0x1e>
 8000f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f000 f9c8 	bl	8001314 <_lseek_r>
 8000f84:	89a3      	ldrh	r3, [r4, #12]
 8000f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f8e:	81a3      	strh	r3, [r4, #12]
 8000f90:	4632      	mov	r2, r6
 8000f92:	463b      	mov	r3, r7
 8000f94:	4628      	mov	r0, r5
 8000f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f9a:	f000 b869 	b.w	8001070 <_write_r>

08000f9e <__sseek>:
 8000f9e:	b510      	push	{r4, lr}
 8000fa0:	460c      	mov	r4, r1
 8000fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa6:	f000 f9b5 	bl	8001314 <_lseek_r>
 8000faa:	1c43      	adds	r3, r0, #1
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	bf15      	itete	ne
 8000fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fba:	81a3      	strheq	r3, [r4, #12]
 8000fbc:	bf18      	it	ne
 8000fbe:	81a3      	strhne	r3, [r4, #12]
 8000fc0:	bd10      	pop	{r4, pc}

08000fc2 <__sclose>:
 8000fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc6:	f000 b8d3 	b.w	8001170 <_close_r>
	...

08000fcc <__swbuf_r>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	460e      	mov	r6, r1
 8000fd0:	4614      	mov	r4, r2
 8000fd2:	4605      	mov	r5, r0
 8000fd4:	b118      	cbz	r0, 8000fde <__swbuf_r+0x12>
 8000fd6:	6983      	ldr	r3, [r0, #24]
 8000fd8:	b90b      	cbnz	r3, 8000fde <__swbuf_r+0x12>
 8000fda:	f7ff fbbb 	bl	8000754 <__sinit>
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <__swbuf_r+0x98>)
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	d12b      	bne.n	800103c <__swbuf_r+0x70>
 8000fe4:	686c      	ldr	r4, [r5, #4]
 8000fe6:	69a3      	ldr	r3, [r4, #24]
 8000fe8:	60a3      	str	r3, [r4, #8]
 8000fea:	89a3      	ldrh	r3, [r4, #12]
 8000fec:	071a      	lsls	r2, r3, #28
 8000fee:	d52f      	bpl.n	8001050 <__swbuf_r+0x84>
 8000ff0:	6923      	ldr	r3, [r4, #16]
 8000ff2:	b36b      	cbz	r3, 8001050 <__swbuf_r+0x84>
 8000ff4:	6923      	ldr	r3, [r4, #16]
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	1ac0      	subs	r0, r0, r3
 8000ffa:	6963      	ldr	r3, [r4, #20]
 8000ffc:	b2f6      	uxtb	r6, r6
 8000ffe:	4283      	cmp	r3, r0
 8001000:	4637      	mov	r7, r6
 8001002:	dc04      	bgt.n	800100e <__swbuf_r+0x42>
 8001004:	4621      	mov	r1, r4
 8001006:	4628      	mov	r0, r5
 8001008:	f000 f948 	bl	800129c <_fflush_r>
 800100c:	bb30      	cbnz	r0, 800105c <__swbuf_r+0x90>
 800100e:	68a3      	ldr	r3, [r4, #8]
 8001010:	3b01      	subs	r3, #1
 8001012:	60a3      	str	r3, [r4, #8]
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	6022      	str	r2, [r4, #0]
 800101a:	701e      	strb	r6, [r3, #0]
 800101c:	6963      	ldr	r3, [r4, #20]
 800101e:	3001      	adds	r0, #1
 8001020:	4283      	cmp	r3, r0
 8001022:	d004      	beq.n	800102e <__swbuf_r+0x62>
 8001024:	89a3      	ldrh	r3, [r4, #12]
 8001026:	07db      	lsls	r3, r3, #31
 8001028:	d506      	bpl.n	8001038 <__swbuf_r+0x6c>
 800102a:	2e0a      	cmp	r6, #10
 800102c:	d104      	bne.n	8001038 <__swbuf_r+0x6c>
 800102e:	4621      	mov	r1, r4
 8001030:	4628      	mov	r0, r5
 8001032:	f000 f933 	bl	800129c <_fflush_r>
 8001036:	b988      	cbnz	r0, 800105c <__swbuf_r+0x90>
 8001038:	4638      	mov	r0, r7
 800103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <__swbuf_r+0x9c>)
 800103e:	429c      	cmp	r4, r3
 8001040:	d101      	bne.n	8001046 <__swbuf_r+0x7a>
 8001042:	68ac      	ldr	r4, [r5, #8]
 8001044:	e7cf      	b.n	8000fe6 <__swbuf_r+0x1a>
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <__swbuf_r+0xa0>)
 8001048:	429c      	cmp	r4, r3
 800104a:	bf08      	it	eq
 800104c:	68ec      	ldreq	r4, [r5, #12]
 800104e:	e7ca      	b.n	8000fe6 <__swbuf_r+0x1a>
 8001050:	4621      	mov	r1, r4
 8001052:	4628      	mov	r0, r5
 8001054:	f000 f81e 	bl	8001094 <__swsetup_r>
 8001058:	2800      	cmp	r0, #0
 800105a:	d0cb      	beq.n	8000ff4 <__swbuf_r+0x28>
 800105c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001060:	e7ea      	b.n	8001038 <__swbuf_r+0x6c>
 8001062:	bf00      	nop
 8001064:	0800156c 	.word	0x0800156c
 8001068:	0800158c 	.word	0x0800158c
 800106c:	0800154c 	.word	0x0800154c

08001070 <_write_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4d07      	ldr	r5, [pc, #28]	; (8001090 <_write_r+0x20>)
 8001074:	4604      	mov	r4, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4611      	mov	r1, r2
 800107a:	2200      	movs	r2, #0
 800107c:	602a      	str	r2, [r5, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	f7ff f9ef 	bl	8000462 <_write>
 8001084:	1c43      	adds	r3, r0, #1
 8001086:	d102      	bne.n	800108e <_write_r+0x1e>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	b103      	cbz	r3, 800108e <_write_r+0x1e>
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	bd38      	pop	{r3, r4, r5, pc}
 8001090:	200000a0 	.word	0x200000a0

08001094 <__swsetup_r>:
 8001094:	4b32      	ldr	r3, [pc, #200]	; (8001160 <__swsetup_r+0xcc>)
 8001096:	b570      	push	{r4, r5, r6, lr}
 8001098:	681d      	ldr	r5, [r3, #0]
 800109a:	4606      	mov	r6, r0
 800109c:	460c      	mov	r4, r1
 800109e:	b125      	cbz	r5, 80010aa <__swsetup_r+0x16>
 80010a0:	69ab      	ldr	r3, [r5, #24]
 80010a2:	b913      	cbnz	r3, 80010aa <__swsetup_r+0x16>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f7ff fb55 	bl	8000754 <__sinit>
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <__swsetup_r+0xd0>)
 80010ac:	429c      	cmp	r4, r3
 80010ae:	d10f      	bne.n	80010d0 <__swsetup_r+0x3c>
 80010b0:	686c      	ldr	r4, [r5, #4]
 80010b2:	89a3      	ldrh	r3, [r4, #12]
 80010b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010b8:	0719      	lsls	r1, r3, #28
 80010ba:	d42c      	bmi.n	8001116 <__swsetup_r+0x82>
 80010bc:	06dd      	lsls	r5, r3, #27
 80010be:	d411      	bmi.n	80010e4 <__swsetup_r+0x50>
 80010c0:	2309      	movs	r3, #9
 80010c2:	6033      	str	r3, [r6, #0]
 80010c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010c8:	81a3      	strh	r3, [r4, #12]
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ce:	e03e      	b.n	800114e <__swsetup_r+0xba>
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <__swsetup_r+0xd4>)
 80010d2:	429c      	cmp	r4, r3
 80010d4:	d101      	bne.n	80010da <__swsetup_r+0x46>
 80010d6:	68ac      	ldr	r4, [r5, #8]
 80010d8:	e7eb      	b.n	80010b2 <__swsetup_r+0x1e>
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <__swsetup_r+0xd8>)
 80010dc:	429c      	cmp	r4, r3
 80010de:	bf08      	it	eq
 80010e0:	68ec      	ldreq	r4, [r5, #12]
 80010e2:	e7e6      	b.n	80010b2 <__swsetup_r+0x1e>
 80010e4:	0758      	lsls	r0, r3, #29
 80010e6:	d512      	bpl.n	800110e <__swsetup_r+0x7a>
 80010e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010ea:	b141      	cbz	r1, 80010fe <__swsetup_r+0x6a>
 80010ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010f0:	4299      	cmp	r1, r3
 80010f2:	d002      	beq.n	80010fa <__swsetup_r+0x66>
 80010f4:	4630      	mov	r0, r6
 80010f6:	f000 f98f 	bl	8001418 <_free_r>
 80010fa:	2300      	movs	r3, #0
 80010fc:	6363      	str	r3, [r4, #52]	; 0x34
 80010fe:	89a3      	ldrh	r3, [r4, #12]
 8001100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001104:	81a3      	strh	r3, [r4, #12]
 8001106:	2300      	movs	r3, #0
 8001108:	6063      	str	r3, [r4, #4]
 800110a:	6923      	ldr	r3, [r4, #16]
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	89a3      	ldrh	r3, [r4, #12]
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	81a3      	strh	r3, [r4, #12]
 8001116:	6923      	ldr	r3, [r4, #16]
 8001118:	b94b      	cbnz	r3, 800112e <__swsetup_r+0x9a>
 800111a:	89a3      	ldrh	r3, [r4, #12]
 800111c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001124:	d003      	beq.n	800112e <__swsetup_r+0x9a>
 8001126:	4621      	mov	r1, r4
 8001128:	4630      	mov	r0, r6
 800112a:	f000 f929 	bl	8001380 <__smakebuf_r>
 800112e:	89a0      	ldrh	r0, [r4, #12]
 8001130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001134:	f010 0301 	ands.w	r3, r0, #1
 8001138:	d00a      	beq.n	8001150 <__swsetup_r+0xbc>
 800113a:	2300      	movs	r3, #0
 800113c:	60a3      	str	r3, [r4, #8]
 800113e:	6963      	ldr	r3, [r4, #20]
 8001140:	425b      	negs	r3, r3
 8001142:	61a3      	str	r3, [r4, #24]
 8001144:	6923      	ldr	r3, [r4, #16]
 8001146:	b943      	cbnz	r3, 800115a <__swsetup_r+0xc6>
 8001148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800114c:	d1ba      	bne.n	80010c4 <__swsetup_r+0x30>
 800114e:	bd70      	pop	{r4, r5, r6, pc}
 8001150:	0781      	lsls	r1, r0, #30
 8001152:	bf58      	it	pl
 8001154:	6963      	ldrpl	r3, [r4, #20]
 8001156:	60a3      	str	r3, [r4, #8]
 8001158:	e7f4      	b.n	8001144 <__swsetup_r+0xb0>
 800115a:	2000      	movs	r0, #0
 800115c:	e7f7      	b.n	800114e <__swsetup_r+0xba>
 800115e:	bf00      	nop
 8001160:	20000004 	.word	0x20000004
 8001164:	0800156c 	.word	0x0800156c
 8001168:	0800158c 	.word	0x0800158c
 800116c:	0800154c 	.word	0x0800154c

08001170 <_close_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4d06      	ldr	r5, [pc, #24]	; (800118c <_close_r+0x1c>)
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	4608      	mov	r0, r1
 800117a:	602b      	str	r3, [r5, #0]
 800117c:	f7ff f98d 	bl	800049a <_close>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	d102      	bne.n	800118a <_close_r+0x1a>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	b103      	cbz	r3, 800118a <_close_r+0x1a>
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	200000a0 	.word	0x200000a0

08001190 <__sflush_r>:
 8001190:	898a      	ldrh	r2, [r1, #12]
 8001192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001196:	4605      	mov	r5, r0
 8001198:	0710      	lsls	r0, r2, #28
 800119a:	460c      	mov	r4, r1
 800119c:	d458      	bmi.n	8001250 <__sflush_r+0xc0>
 800119e:	684b      	ldr	r3, [r1, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dc05      	bgt.n	80011b0 <__sflush_r+0x20>
 80011a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dc02      	bgt.n	80011b0 <__sflush_r+0x20>
 80011aa:	2000      	movs	r0, #0
 80011ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011b2:	2e00      	cmp	r6, #0
 80011b4:	d0f9      	beq.n	80011aa <__sflush_r+0x1a>
 80011b6:	2300      	movs	r3, #0
 80011b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011bc:	682f      	ldr	r7, [r5, #0]
 80011be:	602b      	str	r3, [r5, #0]
 80011c0:	d032      	beq.n	8001228 <__sflush_r+0x98>
 80011c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	075a      	lsls	r2, r3, #29
 80011c8:	d505      	bpl.n	80011d6 <__sflush_r+0x46>
 80011ca:	6863      	ldr	r3, [r4, #4]
 80011cc:	1ac0      	subs	r0, r0, r3
 80011ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011d0:	b10b      	cbz	r3, 80011d6 <__sflush_r+0x46>
 80011d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011d4:	1ac0      	subs	r0, r0, r3
 80011d6:	2300      	movs	r3, #0
 80011d8:	4602      	mov	r2, r0
 80011da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011dc:	6a21      	ldr	r1, [r4, #32]
 80011de:	4628      	mov	r0, r5
 80011e0:	47b0      	blx	r6
 80011e2:	1c43      	adds	r3, r0, #1
 80011e4:	89a3      	ldrh	r3, [r4, #12]
 80011e6:	d106      	bne.n	80011f6 <__sflush_r+0x66>
 80011e8:	6829      	ldr	r1, [r5, #0]
 80011ea:	291d      	cmp	r1, #29
 80011ec:	d82c      	bhi.n	8001248 <__sflush_r+0xb8>
 80011ee:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <__sflush_r+0x108>)
 80011f0:	40ca      	lsrs	r2, r1
 80011f2:	07d6      	lsls	r6, r2, #31
 80011f4:	d528      	bpl.n	8001248 <__sflush_r+0xb8>
 80011f6:	2200      	movs	r2, #0
 80011f8:	6062      	str	r2, [r4, #4]
 80011fa:	04d9      	lsls	r1, r3, #19
 80011fc:	6922      	ldr	r2, [r4, #16]
 80011fe:	6022      	str	r2, [r4, #0]
 8001200:	d504      	bpl.n	800120c <__sflush_r+0x7c>
 8001202:	1c42      	adds	r2, r0, #1
 8001204:	d101      	bne.n	800120a <__sflush_r+0x7a>
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	b903      	cbnz	r3, 800120c <__sflush_r+0x7c>
 800120a:	6560      	str	r0, [r4, #84]	; 0x54
 800120c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800120e:	602f      	str	r7, [r5, #0]
 8001210:	2900      	cmp	r1, #0
 8001212:	d0ca      	beq.n	80011aa <__sflush_r+0x1a>
 8001214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001218:	4299      	cmp	r1, r3
 800121a:	d002      	beq.n	8001222 <__sflush_r+0x92>
 800121c:	4628      	mov	r0, r5
 800121e:	f000 f8fb 	bl	8001418 <_free_r>
 8001222:	2000      	movs	r0, #0
 8001224:	6360      	str	r0, [r4, #52]	; 0x34
 8001226:	e7c1      	b.n	80011ac <__sflush_r+0x1c>
 8001228:	6a21      	ldr	r1, [r4, #32]
 800122a:	2301      	movs	r3, #1
 800122c:	4628      	mov	r0, r5
 800122e:	47b0      	blx	r6
 8001230:	1c41      	adds	r1, r0, #1
 8001232:	d1c7      	bne.n	80011c4 <__sflush_r+0x34>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0c4      	beq.n	80011c4 <__sflush_r+0x34>
 800123a:	2b1d      	cmp	r3, #29
 800123c:	d001      	beq.n	8001242 <__sflush_r+0xb2>
 800123e:	2b16      	cmp	r3, #22
 8001240:	d101      	bne.n	8001246 <__sflush_r+0xb6>
 8001242:	602f      	str	r7, [r5, #0]
 8001244:	e7b1      	b.n	80011aa <__sflush_r+0x1a>
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	e7ad      	b.n	80011ac <__sflush_r+0x1c>
 8001250:	690f      	ldr	r7, [r1, #16]
 8001252:	2f00      	cmp	r7, #0
 8001254:	d0a9      	beq.n	80011aa <__sflush_r+0x1a>
 8001256:	0793      	lsls	r3, r2, #30
 8001258:	680e      	ldr	r6, [r1, #0]
 800125a:	bf08      	it	eq
 800125c:	694b      	ldreq	r3, [r1, #20]
 800125e:	600f      	str	r7, [r1, #0]
 8001260:	bf18      	it	ne
 8001262:	2300      	movne	r3, #0
 8001264:	eba6 0807 	sub.w	r8, r6, r7
 8001268:	608b      	str	r3, [r1, #8]
 800126a:	f1b8 0f00 	cmp.w	r8, #0
 800126e:	dd9c      	ble.n	80011aa <__sflush_r+0x1a>
 8001270:	6a21      	ldr	r1, [r4, #32]
 8001272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001274:	4643      	mov	r3, r8
 8001276:	463a      	mov	r2, r7
 8001278:	4628      	mov	r0, r5
 800127a:	47b0      	blx	r6
 800127c:	2800      	cmp	r0, #0
 800127e:	dc06      	bgt.n	800128e <__sflush_r+0xfe>
 8001280:	89a3      	ldrh	r3, [r4, #12]
 8001282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001286:	81a3      	strh	r3, [r4, #12]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800128c:	e78e      	b.n	80011ac <__sflush_r+0x1c>
 800128e:	4407      	add	r7, r0
 8001290:	eba8 0800 	sub.w	r8, r8, r0
 8001294:	e7e9      	b.n	800126a <__sflush_r+0xda>
 8001296:	bf00      	nop
 8001298:	20400001 	.word	0x20400001

0800129c <_fflush_r>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	690b      	ldr	r3, [r1, #16]
 80012a0:	4605      	mov	r5, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	b913      	cbnz	r3, 80012ac <_fflush_r+0x10>
 80012a6:	2500      	movs	r5, #0
 80012a8:	4628      	mov	r0, r5
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
 80012ac:	b118      	cbz	r0, 80012b6 <_fflush_r+0x1a>
 80012ae:	6983      	ldr	r3, [r0, #24]
 80012b0:	b90b      	cbnz	r3, 80012b6 <_fflush_r+0x1a>
 80012b2:	f7ff fa4f 	bl	8000754 <__sinit>
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <_fflush_r+0x6c>)
 80012b8:	429c      	cmp	r4, r3
 80012ba:	d11b      	bne.n	80012f4 <_fflush_r+0x58>
 80012bc:	686c      	ldr	r4, [r5, #4]
 80012be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0ef      	beq.n	80012a6 <_fflush_r+0xa>
 80012c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012c8:	07d0      	lsls	r0, r2, #31
 80012ca:	d404      	bmi.n	80012d6 <_fflush_r+0x3a>
 80012cc:	0599      	lsls	r1, r3, #22
 80012ce:	d402      	bmi.n	80012d6 <_fflush_r+0x3a>
 80012d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012d2:	f7ff fadd 	bl	8000890 <__retarget_lock_acquire_recursive>
 80012d6:	4628      	mov	r0, r5
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff ff59 	bl	8001190 <__sflush_r>
 80012de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012e0:	07da      	lsls	r2, r3, #31
 80012e2:	4605      	mov	r5, r0
 80012e4:	d4e0      	bmi.n	80012a8 <_fflush_r+0xc>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	059b      	lsls	r3, r3, #22
 80012ea:	d4dd      	bmi.n	80012a8 <_fflush_r+0xc>
 80012ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ee:	f7ff fad0 	bl	8000892 <__retarget_lock_release_recursive>
 80012f2:	e7d9      	b.n	80012a8 <_fflush_r+0xc>
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <_fflush_r+0x70>)
 80012f6:	429c      	cmp	r4, r3
 80012f8:	d101      	bne.n	80012fe <_fflush_r+0x62>
 80012fa:	68ac      	ldr	r4, [r5, #8]
 80012fc:	e7df      	b.n	80012be <_fflush_r+0x22>
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <_fflush_r+0x74>)
 8001300:	429c      	cmp	r4, r3
 8001302:	bf08      	it	eq
 8001304:	68ec      	ldreq	r4, [r5, #12]
 8001306:	e7da      	b.n	80012be <_fflush_r+0x22>
 8001308:	0800156c 	.word	0x0800156c
 800130c:	0800158c 	.word	0x0800158c
 8001310:	0800154c 	.word	0x0800154c

08001314 <_lseek_r>:
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4d07      	ldr	r5, [pc, #28]	; (8001334 <_lseek_r+0x20>)
 8001318:	4604      	mov	r4, r0
 800131a:	4608      	mov	r0, r1
 800131c:	4611      	mov	r1, r2
 800131e:	2200      	movs	r2, #0
 8001320:	602a      	str	r2, [r5, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	f7ff f8e0 	bl	80004e8 <_lseek>
 8001328:	1c43      	adds	r3, r0, #1
 800132a:	d102      	bne.n	8001332 <_lseek_r+0x1e>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b103      	cbz	r3, 8001332 <_lseek_r+0x1e>
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	200000a0 	.word	0x200000a0

08001338 <__swhatbuf_r>:
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	460e      	mov	r6, r1
 800133c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001340:	2900      	cmp	r1, #0
 8001342:	b096      	sub	sp, #88	; 0x58
 8001344:	4614      	mov	r4, r2
 8001346:	461d      	mov	r5, r3
 8001348:	da07      	bge.n	800135a <__swhatbuf_r+0x22>
 800134a:	2300      	movs	r3, #0
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	89b3      	ldrh	r3, [r6, #12]
 8001350:	061a      	lsls	r2, r3, #24
 8001352:	d410      	bmi.n	8001376 <__swhatbuf_r+0x3e>
 8001354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001358:	e00e      	b.n	8001378 <__swhatbuf_r+0x40>
 800135a:	466a      	mov	r2, sp
 800135c:	f000 f8be 	bl	80014dc <_fstat_r>
 8001360:	2800      	cmp	r0, #0
 8001362:	dbf2      	blt.n	800134a <__swhatbuf_r+0x12>
 8001364:	9a01      	ldr	r2, [sp, #4]
 8001366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800136a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800136e:	425a      	negs	r2, r3
 8001370:	415a      	adcs	r2, r3
 8001372:	602a      	str	r2, [r5, #0]
 8001374:	e7ee      	b.n	8001354 <__swhatbuf_r+0x1c>
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	2000      	movs	r0, #0
 800137a:	6023      	str	r3, [r4, #0]
 800137c:	b016      	add	sp, #88	; 0x58
 800137e:	bd70      	pop	{r4, r5, r6, pc}

08001380 <__smakebuf_r>:
 8001380:	898b      	ldrh	r3, [r1, #12]
 8001382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001384:	079d      	lsls	r5, r3, #30
 8001386:	4606      	mov	r6, r0
 8001388:	460c      	mov	r4, r1
 800138a:	d507      	bpl.n	800139c <__smakebuf_r+0x1c>
 800138c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	6123      	str	r3, [r4, #16]
 8001394:	2301      	movs	r3, #1
 8001396:	6163      	str	r3, [r4, #20]
 8001398:	b002      	add	sp, #8
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	ab01      	add	r3, sp, #4
 800139e:	466a      	mov	r2, sp
 80013a0:	f7ff ffca 	bl	8001338 <__swhatbuf_r>
 80013a4:	9900      	ldr	r1, [sp, #0]
 80013a6:	4605      	mov	r5, r0
 80013a8:	4630      	mov	r0, r6
 80013aa:	f7ff fa73 	bl	8000894 <_malloc_r>
 80013ae:	b948      	cbnz	r0, 80013c4 <__smakebuf_r+0x44>
 80013b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013b4:	059a      	lsls	r2, r3, #22
 80013b6:	d4ef      	bmi.n	8001398 <__smakebuf_r+0x18>
 80013b8:	f023 0303 	bic.w	r3, r3, #3
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	81a3      	strh	r3, [r4, #12]
 80013c2:	e7e3      	b.n	800138c <__smakebuf_r+0xc>
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <__smakebuf_r+0x7c>)
 80013c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	6020      	str	r0, [r4, #0]
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	81a3      	strh	r3, [r4, #12]
 80013d2:	9b00      	ldr	r3, [sp, #0]
 80013d4:	6163      	str	r3, [r4, #20]
 80013d6:	9b01      	ldr	r3, [sp, #4]
 80013d8:	6120      	str	r0, [r4, #16]
 80013da:	b15b      	cbz	r3, 80013f4 <__smakebuf_r+0x74>
 80013dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013e0:	4630      	mov	r0, r6
 80013e2:	f000 f88d 	bl	8001500 <_isatty_r>
 80013e6:	b128      	cbz	r0, 80013f4 <__smakebuf_r+0x74>
 80013e8:	89a3      	ldrh	r3, [r4, #12]
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	81a3      	strh	r3, [r4, #12]
 80013f4:	89a0      	ldrh	r0, [r4, #12]
 80013f6:	4305      	orrs	r5, r0
 80013f8:	81a5      	strh	r5, [r4, #12]
 80013fa:	e7cd      	b.n	8001398 <__smakebuf_r+0x18>
 80013fc:	080006ed 	.word	0x080006ed

08001400 <__malloc_lock>:
 8001400:	4801      	ldr	r0, [pc, #4]	; (8001408 <__malloc_lock+0x8>)
 8001402:	f7ff ba45 	b.w	8000890 <__retarget_lock_acquire_recursive>
 8001406:	bf00      	nop
 8001408:	20000098 	.word	0x20000098

0800140c <__malloc_unlock>:
 800140c:	4801      	ldr	r0, [pc, #4]	; (8001414 <__malloc_unlock+0x8>)
 800140e:	f7ff ba40 	b.w	8000892 <__retarget_lock_release_recursive>
 8001412:	bf00      	nop
 8001414:	20000098 	.word	0x20000098

08001418 <_free_r>:
 8001418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800141a:	2900      	cmp	r1, #0
 800141c:	d048      	beq.n	80014b0 <_free_r+0x98>
 800141e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001422:	9001      	str	r0, [sp, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f1a1 0404 	sub.w	r4, r1, #4
 800142a:	bfb8      	it	lt
 800142c:	18e4      	addlt	r4, r4, r3
 800142e:	f7ff ffe7 	bl	8001400 <__malloc_lock>
 8001432:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <_free_r+0x9c>)
 8001434:	9801      	ldr	r0, [sp, #4]
 8001436:	6813      	ldr	r3, [r2, #0]
 8001438:	4615      	mov	r5, r2
 800143a:	b933      	cbnz	r3, 800144a <_free_r+0x32>
 800143c:	6063      	str	r3, [r4, #4]
 800143e:	6014      	str	r4, [r2, #0]
 8001440:	b003      	add	sp, #12
 8001442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001446:	f7ff bfe1 	b.w	800140c <__malloc_unlock>
 800144a:	42a3      	cmp	r3, r4
 800144c:	d90b      	bls.n	8001466 <_free_r+0x4e>
 800144e:	6821      	ldr	r1, [r4, #0]
 8001450:	1862      	adds	r2, r4, r1
 8001452:	4293      	cmp	r3, r2
 8001454:	bf04      	itt	eq
 8001456:	681a      	ldreq	r2, [r3, #0]
 8001458:	685b      	ldreq	r3, [r3, #4]
 800145a:	6063      	str	r3, [r4, #4]
 800145c:	bf04      	itt	eq
 800145e:	1852      	addeq	r2, r2, r1
 8001460:	6022      	streq	r2, [r4, #0]
 8001462:	602c      	str	r4, [r5, #0]
 8001464:	e7ec      	b.n	8001440 <_free_r+0x28>
 8001466:	461a      	mov	r2, r3
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	b10b      	cbz	r3, 8001470 <_free_r+0x58>
 800146c:	42a3      	cmp	r3, r4
 800146e:	d9fa      	bls.n	8001466 <_free_r+0x4e>
 8001470:	6811      	ldr	r1, [r2, #0]
 8001472:	1855      	adds	r5, r2, r1
 8001474:	42a5      	cmp	r5, r4
 8001476:	d10b      	bne.n	8001490 <_free_r+0x78>
 8001478:	6824      	ldr	r4, [r4, #0]
 800147a:	4421      	add	r1, r4
 800147c:	1854      	adds	r4, r2, r1
 800147e:	42a3      	cmp	r3, r4
 8001480:	6011      	str	r1, [r2, #0]
 8001482:	d1dd      	bne.n	8001440 <_free_r+0x28>
 8001484:	681c      	ldr	r4, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	6053      	str	r3, [r2, #4]
 800148a:	4421      	add	r1, r4
 800148c:	6011      	str	r1, [r2, #0]
 800148e:	e7d7      	b.n	8001440 <_free_r+0x28>
 8001490:	d902      	bls.n	8001498 <_free_r+0x80>
 8001492:	230c      	movs	r3, #12
 8001494:	6003      	str	r3, [r0, #0]
 8001496:	e7d3      	b.n	8001440 <_free_r+0x28>
 8001498:	6825      	ldr	r5, [r4, #0]
 800149a:	1961      	adds	r1, r4, r5
 800149c:	428b      	cmp	r3, r1
 800149e:	bf04      	itt	eq
 80014a0:	6819      	ldreq	r1, [r3, #0]
 80014a2:	685b      	ldreq	r3, [r3, #4]
 80014a4:	6063      	str	r3, [r4, #4]
 80014a6:	bf04      	itt	eq
 80014a8:	1949      	addeq	r1, r1, r5
 80014aa:	6021      	streq	r1, [r4, #0]
 80014ac:	6054      	str	r4, [r2, #4]
 80014ae:	e7c7      	b.n	8001440 <_free_r+0x28>
 80014b0:	b003      	add	sp, #12
 80014b2:	bd30      	pop	{r4, r5, pc}
 80014b4:	20000088 	.word	0x20000088

080014b8 <_read_r>:
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	4d07      	ldr	r5, [pc, #28]	; (80014d8 <_read_r+0x20>)
 80014bc:	4604      	mov	r4, r0
 80014be:	4608      	mov	r0, r1
 80014c0:	4611      	mov	r1, r2
 80014c2:	2200      	movs	r2, #0
 80014c4:	602a      	str	r2, [r5, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	f7fe ffae 	bl	8000428 <_read>
 80014cc:	1c43      	adds	r3, r0, #1
 80014ce:	d102      	bne.n	80014d6 <_read_r+0x1e>
 80014d0:	682b      	ldr	r3, [r5, #0]
 80014d2:	b103      	cbz	r3, 80014d6 <_read_r+0x1e>
 80014d4:	6023      	str	r3, [r4, #0]
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
 80014d8:	200000a0 	.word	0x200000a0

080014dc <_fstat_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4d07      	ldr	r5, [pc, #28]	; (80014fc <_fstat_r+0x20>)
 80014e0:	2300      	movs	r3, #0
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	602b      	str	r3, [r5, #0]
 80014ea:	f7fe ffe2 	bl	80004b2 <_fstat>
 80014ee:	1c43      	adds	r3, r0, #1
 80014f0:	d102      	bne.n	80014f8 <_fstat_r+0x1c>
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	b103      	cbz	r3, 80014f8 <_fstat_r+0x1c>
 80014f6:	6023      	str	r3, [r4, #0]
 80014f8:	bd38      	pop	{r3, r4, r5, pc}
 80014fa:	bf00      	nop
 80014fc:	200000a0 	.word	0x200000a0

08001500 <_isatty_r>:
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4d06      	ldr	r5, [pc, #24]	; (800151c <_isatty_r+0x1c>)
 8001504:	2300      	movs	r3, #0
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	602b      	str	r3, [r5, #0]
 800150c:	f7fe ffe1 	bl	80004d2 <_isatty>
 8001510:	1c43      	adds	r3, r0, #1
 8001512:	d102      	bne.n	800151a <_isatty_r+0x1a>
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	b103      	cbz	r3, 800151a <_isatty_r+0x1a>
 8001518:	6023      	str	r3, [r4, #0]
 800151a:	bd38      	pop	{r3, r4, r5, pc}
 800151c:	200000a0 	.word	0x200000a0

08001520 <_init>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

0800152c <_fini>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr
