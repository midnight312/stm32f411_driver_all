
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000558  08000560  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000558  08000558  00010560  2**0
                  CONTENTS
  4 .ARM          00000000  08000558  08000558  00010560  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000558  08000560  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000558  08000558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000560  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000560  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004d6  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000018f  00000000  00000000  00010a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00010bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00010c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dbe9  00000000  00000000  00010ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006bf  00000000  00000000  0001e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f601  00000000  00000000  0001ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006e589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000016c  00000000  00000000  0006e5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000540 	.word	0x08000540

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000540 	.word	0x08000540

080001d8 <init_clock>:
#include "main.h"
// init clock systick 96mhz
void init_clock(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	uint32_t tempreg;
	/* dissable all interrupt */
	RCC->CIR = 0x00000000;
 80001de:	4b4b      	ldr	r3, [pc, #300]	; (800030c <init_clock+0x134>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	60da      	str	r2, [r3, #12]
	/* dissable Internal hight speed */
	RCC->CR &= ~0x00000001;
 80001e4:	4b49      	ldr	r3, [pc, #292]	; (800030c <init_clock+0x134>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a48      	ldr	r2, [pc, #288]	; (800030c <init_clock+0x134>)
 80001ea:	f023 0301 	bic.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
	/* Wait still HSI dissable */
	timeout = 0x0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 1)) != 0 && timeout > 0)
 80001f4:	e002      	b.n	80001fc <init_clock+0x24>
	{
		timeout--;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 1)) != 0 && timeout > 0)
 80001fc:	4b43      	ldr	r3, [pc, #268]	; (800030c <init_clock+0x134>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f003 0302 	and.w	r3, r3, #2
 8000204:	2b00      	cmp	r3, #0
 8000206:	d002      	beq.n	800020e <init_clock+0x36>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d1f3      	bne.n	80001f6 <init_clock+0x1e>
	}
	/* dissable PLL */
	RCC->CR &= ~(1 << 24);
 800020e:	4b3f      	ldr	r3, [pc, #252]	; (800030c <init_clock+0x134>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a3e      	ldr	r2, [pc, #248]	; (800030c <init_clock+0x134>)
 8000214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000218:	6013      	str	r3, [r2, #0]
	/* Wait PLL dissable */
	timeout = 0xFFFFFF;
 800021a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800021e:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 25)) != 0 && timeout > 0)
 8000220:	e002      	b.n	8000228 <init_clock+0x50>
	{
		timeout--;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3b01      	subs	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 25)) != 0 && timeout > 0)
 8000228:	4b38      	ldr	r3, [pc, #224]	; (800030c <init_clock+0x134>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <init_clock+0x62>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f3      	bne.n	8000222 <init_clock+0x4a>
	}
	  /* Configure the main PLL clock source, predivider and multiplication factor. */
	RCC->PLLCFGR &= ~(0x0F037FFF);
 800023a:	4b34      	ldr	r3, [pc, #208]	; (800030c <init_clock+0x134>)
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	4933      	ldr	r1, [pc, #204]	; (800030c <init_clock+0x134>)
 8000240:	4b33      	ldr	r3, [pc, #204]	; (8000310 <init_clock+0x138>)
 8000242:	4013      	ands	r3, r2
 8000244:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= 0x8U << 24 | 0xC8U << 6 | 0x8U << 0;
 8000246:	4b31      	ldr	r3, [pc, #196]	; (800030c <init_clock+0x134>)
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	4930      	ldr	r1, [pc, #192]	; (800030c <init_clock+0x134>)
 800024c:	4b31      	ldr	r3, [pc, #196]	; (8000314 <init_clock+0x13c>)
 800024e:	4313      	orrs	r3, r2
 8000250:	604b      	str	r3, [r1, #4]
	/* ENABLE PLL */
	RCC->CR |= 1 << 24;
 8000252:	4b2e      	ldr	r3, [pc, #184]	; (800030c <init_clock+0x134>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a2d      	ldr	r2, [pc, #180]	; (800030c <init_clock+0x134>)
 8000258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800025c:	6013      	str	r3, [r2, #0]
	/* Wait PLL ready */
	timeout = 0xFFFFFF;
 800025e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000262:	607b      	str	r3, [r7, #4]

	while((!(RCC->CR & (1 << 25))) && (timeout > 0))
 8000264:	e002      	b.n	800026c <init_clock+0x94>
	{
		timeout--;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	3b01      	subs	r3, #1
 800026a:	607b      	str	r3, [r7, #4]
	while((!(RCC->CR & (1 << 25))) && (timeout > 0))
 800026c:	4b27      	ldr	r3, [pc, #156]	; (800030c <init_clock+0x134>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <init_clock+0xa6>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f3      	bne.n	8000266 <init_clock+0x8e>
	}
	/* HSE enable */
	RCC->CR |= 1 << 16;
 800027e:	4b23      	ldr	r3, [pc, #140]	; (800030c <init_clock+0x134>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a22      	ldr	r2, [pc, #136]	; (800030c <init_clock+0x134>)
 8000284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000288:	6013      	str	r3, [r2, #0]
	/* WAIT HSE ENABLE */
	timeout = 0xFFFF;
 800028a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800028e:	607b      	str	r3, [r7, #4]
	while((!(RCC->CR & (0x1U << 17))) && (timeout > 0))
 8000290:	e002      	b.n	8000298 <init_clock+0xc0>
	{
		timeout--;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3b01      	subs	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
	while((!(RCC->CR & (0x1U << 17))) && (timeout > 0))
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <init_clock+0x134>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d102      	bne.n	80002aa <init_clock+0xd2>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1f3      	bne.n	8000292 <init_clock+0xba>
	}
	/* HSE USE SYSCLOCK */
	RCC->CFGR &= ~(0x3U << 0);
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <init_clock+0x134>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <init_clock+0x134>)
 80002b0:	f023 0303 	bic.w	r3, r3, #3
 80002b4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 1U << 0;
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <init_clock+0x134>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a14      	ldr	r2, [pc, #80]	; (800030c <init_clock+0x134>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6093      	str	r3, [r2, #8]
	/* WAIT SYSTEM CLOCK READY */
	timeout = 0x0FFFFFFF;
 80002c2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80002c6:	607b      	str	r3, [r7, #4]
	while(((RCC->CFGR & (0x3U << 2)) != (1 << 2)) && (timeout > 0))
 80002c8:	e002      	b.n	80002d0 <init_clock+0xf8>
	{
		timeout--;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
	while(((RCC->CFGR & (0x3U << 2)) != (1 << 2)) && (timeout > 0))
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <init_clock+0x134>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	f003 030c 	and.w	r3, r3, #12
 80002d8:	2b04      	cmp	r3, #4
 80002da:	d002      	beq.n	80002e2 <init_clock+0x10a>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d1f3      	bne.n	80002ca <init_clock+0xf2>
	}
	RCC->CFGR &= ~(0xFFF0);
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <init_clock+0x134>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	4a09      	ldr	r2, [pc, #36]	; (800030c <init_clock+0x134>)
 80002e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80002ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002f0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 1 << 12;
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <init_clock+0x134>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4a05      	ldr	r2, [pc, #20]	; (800030c <init_clock+0x134>)
 80002f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002fc:	6093      	str	r3, [r2, #8]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	f0fc8000 	.word	0xf0fc8000
 8000314:	08003208 	.word	0x08003208

08000318 <init_all>:

void init_all(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
	//clock
	unsigned int tempreg;
	tempreg = read(RCC_AHB1ENR, ~(1u << 3));
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <init_all+0x50>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f023 0308 	bic.w	r3, r3, #8
 8000326:	607b      	str	r3, [r7, #4]
	tempreg = tempreg | 1u << 3;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	607b      	str	r3, [r7, #4]
	write(RCC_AHB1ENR,tempreg);
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <init_all+0x50>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]
	//GPIO
	//unsigned int tempreg;
	tempreg = read(GPIO_MODE, ~(0x03u << 24));
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <init_all+0x54>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800033e:	607b      	str	r3, [r7, #4]
	tempreg = tempreg | GPIO_MODE_OUTPUT << 24;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000346:	607b      	str	r3, [r7, #4]
	write(GPIO_MODE,tempreg);
 8000348:	4a08      	ldr	r2, [pc, #32]	; (800036c <init_all+0x54>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6013      	str	r3, [r2, #0]
	//Systick
	SysTick->CTRL = 0x0000000u;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <init_all+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
	//SysTick->CTRL = 0x0000004u;
	SysTick->VAL  = 0x0000000u;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <init_all+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40023830 	.word	0x40023830
 800036c:	40020c00 	.word	0x40020c00
 8000370:	e000e010 	.word	0xe000e010

08000374 <led_on>:
void led_on(unsigned long int pinLed)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]

	unsigned int tempreg;
	tempreg = read(GPIO_BSRR, ~(1u << pinLed));
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <led_on+0x3c>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	2101      	movs	r1, #1
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	43db      	mvns	r3, r3
 800038a:	4013      	ands	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
	tempreg = tempreg | 1u << pinLed;
 800038e:	2201      	movs	r2, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	fa02 f303 	lsl.w	r3, r2, r3
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	4313      	orrs	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]
	write(GPIO_BSRR,tempreg);
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <led_on+0x3c>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6013      	str	r3, [r2, #0]

}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40020c18 	.word	0x40020c18

080003b4 <led_off>:
void led_off(unsigned long int pinLed)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	unsigned int tempreg;
	tempreg = read(GPIO_BSRR, 1u << pinLed + 16u);
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <led_off+0x3c>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3310      	adds	r3, #16
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	4013      	ands	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
	tempreg = tempreg | 1u << pinLed + 16u;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3310      	adds	r3, #16
 80003d2:	2201      	movs	r2, #1
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	4313      	orrs	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]
	write(GPIO_BSRR,tempreg);
 80003de:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <led_off+0x3c>)
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	6013      	str	r3, [r2, #0]

}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40020c18 	.word	0x40020c18

080003f4 <systick_start>:
void systick_start(unsigned int value)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = value;
 80003fc:	4a07      	ldr	r2, [pc, #28]	; (800041c <systick_start+0x28>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6053      	str	r3, [r2, #4]
	SysTick->VAL  = 0x0000000u;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <systick_start+0x28>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000001u;
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <systick_start+0x28>)
 800040a:	2201      	movs	r2, #1
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000e010 	.word	0xe000e010

08000420 <get_state_stick>:
unsigned int get_state_stick(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
	unsigned int tempreg;
	tempreg = read(SysTick->CTRL, 1u << 16);
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <get_state_stick+0x28>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000430:	607b      	str	r3, [r7, #4]
	tempreg = tempreg >> 16;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	0c1b      	lsrs	r3, r3, #16
 8000436:	607b      	str	r3, [r7, #4]
	return tempreg;
 8000438:	687b      	ldr	r3, [r7, #4]
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000e010 	.word	0xe000e010

0800044c <delay>:
void delay(unsigned int time)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	while(time--)
 8000454:	e009      	b.n	800046a <delay+0x1e>
	{
		systick_start(0x30D3);
 8000456:	f243 00d3 	movw	r0, #12499	; 0x30d3
 800045a:	f7ff ffcb 	bl	80003f4 <systick_start>
		while(  0 == get_state_stick()){};
 800045e:	bf00      	nop
 8000460:	f7ff ffde 	bl	8000420 <get_state_stick>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0fa      	beq.n	8000460 <delay+0x14>
	while(time--)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	607a      	str	r2, [r7, #4]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1f0      	bne.n	8000456 <delay+0xa>
	}
}
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <main>:
void main(void)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
	init_clock();
 8000482:	f7ff fea9 	bl	80001d8 <init_clock>
	init_all();
 8000486:	f7ff ff47 	bl	8000318 <init_all>
	while(1)
	{
		led_on(12);
 800048a:	200c      	movs	r0, #12
 800048c:	f7ff ff72 	bl	8000374 <led_on>
		delay(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000494:	f7ff ffda 	bl	800044c <delay>
		led_off(12);
 8000498:	200c      	movs	r0, #12
 800049a:	f7ff ff8b 	bl	80003b4 <led_off>
		delay(1000);
 800049e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a2:	f7ff ffd3 	bl	800044c <delay>
		led_on(12);
 80004a6:	e7f0      	b.n	800048a <main+0xc>

080004a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004a8:	f8df d030 	ldr.w	sp, [pc, #48]	; 80004dc <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ae:	490d      	ldr	r1, [pc, #52]	; (80004e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004c4:	4c0a      	ldr	r4, [pc, #40]	; (80004f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 80004d2:	f000 f811 	bl	80004f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004d6:	f7ff ffd2 	bl	800047e <main>
  bx  lr    
 80004da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004e8:	08000560 	.word	0x08000560
  ldr r2, =_sbss
 80004ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f0:	2000001c 	.word	0x2000001c

080004f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC_IRQHandler>
	...

080004f8 <__libc_init_array>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	4d0d      	ldr	r5, [pc, #52]	; (8000530 <__libc_init_array+0x38>)
 80004fc:	4c0d      	ldr	r4, [pc, #52]	; (8000534 <__libc_init_array+0x3c>)
 80004fe:	1b64      	subs	r4, r4, r5
 8000500:	10a4      	asrs	r4, r4, #2
 8000502:	2600      	movs	r6, #0
 8000504:	42a6      	cmp	r6, r4
 8000506:	d109      	bne.n	800051c <__libc_init_array+0x24>
 8000508:	4d0b      	ldr	r5, [pc, #44]	; (8000538 <__libc_init_array+0x40>)
 800050a:	4c0c      	ldr	r4, [pc, #48]	; (800053c <__libc_init_array+0x44>)
 800050c:	f000 f818 	bl	8000540 <_init>
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	10a4      	asrs	r4, r4, #2
 8000514:	2600      	movs	r6, #0
 8000516:	42a6      	cmp	r6, r4
 8000518:	d105      	bne.n	8000526 <__libc_init_array+0x2e>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000520:	4798      	blx	r3
 8000522:	3601      	adds	r6, #1
 8000524:	e7ee      	b.n	8000504 <__libc_init_array+0xc>
 8000526:	f855 3b04 	ldr.w	r3, [r5], #4
 800052a:	4798      	blx	r3
 800052c:	3601      	adds	r6, #1
 800052e:	e7f2      	b.n	8000516 <__libc_init_array+0x1e>
 8000530:	08000558 	.word	0x08000558
 8000534:	08000558 	.word	0x08000558
 8000538:	08000558 	.word	0x08000558
 800053c:	0800055c 	.word	0x0800055c

08000540 <_init>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr

0800054c <_fini>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr
