
no_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000088c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a24  08000a2c  00010a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a24  08000a24  00010a2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a24  08000a24  00010a2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a24  08000a2c  00010a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a24  08000a24  00010a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a28  08000a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000a2c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000a2c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005094  00000000  00000000  00010a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc0  00000000  00000000  00015af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  000167b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00016958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f539  00000000  00000000  00016aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cef  00000000  00000000  00025fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054095  00000000  00000000  00028cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007cd65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e0  00000000  00000000  0007cdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a0c 	.word	0x08000a0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a0c 	.word	0x08000a0c

080001d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0c      	blt.n	8000204 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	; (8000210 <__NVIC_ClearPendingIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	3360      	adds	r3, #96	; 0x60
 8000200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	e000e100 	.word	0xe000e100

08000214 <main>:
_Bool adcEoc          = 0;
__IO int16_t adcValue = 0;
_Bool ledState        = 0;

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b088      	sub	sp, #32
 8000218:	af00      	add	r7, sp, #0
	//Dissable WATCHDOG
	//WWDG->CR &= ~(WWDG_CR_WDGA);

	rcc_HSE_config();
 800021a:	f000 f973 	bl	8000504 <rcc_HSE_config>
	rcc_SysTick_config(96000);
 800021e:	4817      	ldr	r0, [pc, #92]	; (800027c <main+0x68>)
 8000220:	f000 fa54 	bl	80006cc <rcc_SysTick_config>
	gpio_LED_Config();
 8000224:	f000 f8be 	bl	80003a4 <gpio_LED_Config>
	//tim_TIM2_delayConfig();
	//tim_TIM2_priodicConfig(1000);
	//tim_TIM2_CH2N_config();
	//tim_TIM2_OC_config(1000);
	//pwr_enterStandby();
	uart_UART1_GPIO_config();
 8000228:	f000 fab6 	bl	8000798 <uart_UART1_GPIO_config>
	uart_UART1_config();
 800022c:	f000 fb1a 	bl	8000864 <uart_UART1_config>
	//spi_GPIO_config();
	//spi_config();
	char c = 'a';
 8000230:	2361      	movs	r3, #97	; 0x61
 8000232:	76fb      	strb	r3, [r7, #27]
	uint8_t tBuft[8];
	uint8_t rBuft[8];
	uint8_t* x[1];
	x[0] = c;
 8000234:	7efb      	ldrb	r3, [r7, #27]
 8000236:	607b      	str	r3, [r7, #4]
	for(int i = 0;i<8;i++)
 8000238:	2300      	movs	r3, #0
 800023a:	61fb      	str	r3, [r7, #28]
 800023c:	e00c      	b.n	8000258 <main+0x44>
	{
		rBuft[i] = i + 66;
 800023e:	69fb      	ldr	r3, [r7, #28]
 8000240:	b2db      	uxtb	r3, r3
 8000242:	3342      	adds	r3, #66	; 0x42
 8000244:	b2d9      	uxtb	r1, r3
 8000246:	f107 0208 	add.w	r2, r7, #8
 800024a:	69fb      	ldr	r3, [r7, #28]
 800024c:	4413      	add	r3, r2
 800024e:	460a      	mov	r2, r1
 8000250:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<8;i++)
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	3301      	adds	r3, #1
 8000256:	61fb      	str	r3, [r7, #28]
 8000258:	69fb      	ldr	r3, [r7, #28]
 800025a:	2b07      	cmp	r3, #7
 800025c:	ddef      	ble.n	800023e <main+0x2a>
	}
	//int a = strlen(rBuft);
	while(1)
	{
		uart_translate(*x,100);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2164      	movs	r1, #100	; 0x64
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fb72 	bl	800094c <uart_translate>
		ms_Delay(1000);
 8000268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026c:	f000 fa70 	bl	8000750 <ms_Delay>
		gpio_LED_Toggle(LED4,1000);
 8000270:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000274:	200c      	movs	r0, #12
 8000276:	f000 f8e3 	bl	8000440 <gpio_LED_Toggle>
	{
 800027a:	e7f0      	b.n	800025e <main+0x4a>
 800027c:	00017700 	.word	0x00017700

08000280 <EXTI0_IRQHandler>:

	}
}
void EXTI0_IRQHandler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8000284:	2006      	movs	r0, #6
 8000286:	f7ff ffa7 	bl	80001d8 <__NVIC_ClearPendingIRQ>
	EXTI->PR |= 1UL << 0;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <EXTI0_IRQHandler+0x20>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <EXTI0_IRQHandler+0x20>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6153      	str	r3, [r2, #20]
	//Application
	extiFlag = 1;
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <EXTI0_IRQHandler+0x24>)
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40013c00 	.word	0x40013c00
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(ADC_IRQn);
 80002ac:	2012      	movs	r0, #18
 80002ae:	f7ff ff93 	bl	80001d8 <__NVIC_ClearPendingIRQ>
	if(((ADC1->SR) & (ADC_SR_EOC)) != 1)
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <ADC_IRQHandler+0x2c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f003 0302 	and.w	r3, r3, #2
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d008      	beq.n	80002d0 <ADC_IRQHandler+0x28>
	{
		adcValue = adc_readValue();
 80002be:	f000 f861 	bl	8000384 <adc_readValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b21a      	sxth	r2, r3
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <ADC_IRQHandler+0x30>)
 80002c8:	801a      	strh	r2, [r3, #0]
		adcEoc = 1;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <ADC_IRQHandler+0x34>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	701a      	strb	r2, [r3, #0]

	}
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40012000 	.word	0x40012000
 80002d8:	2000001e 	.word	0x2000001e
 80002dc:	2000001d 	.word	0x2000001d

080002e0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 80002e4:	201c      	movs	r0, #28
 80002e6:	f7ff ff77 	bl	80001d8 <__NVIC_ClearPendingIRQ>
	if(TIM2->SR & TIM_SR_UIF)
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d007      	beq.n	8000308 <TIM2_IRQHandler+0x28>
	{
		TIM2->SR &= ~TIM_SR_UIF;
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000302:	f023 0301 	bic.w	r3, r3, #1
 8000306:	6113      	str	r3, [r2, #16]
	}
	ledState ^= 1;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <TIM2_IRQHandler+0x50>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	f083 0301 	eor.w	r3, r3, #1
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2b00      	cmp	r3, #0
 8000314:	bf14      	ite	ne
 8000316:	2301      	movne	r3, #1
 8000318:	2300      	moveq	r3, #0
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <TIM2_IRQHandler+0x50>)
 800031e:	701a      	strb	r2, [r3, #0]
	gpio_LED_Write(ledState,LED5);
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <TIM2_IRQHandler+0x50>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	210e      	movs	r1, #14
 8000326:	4618      	mov	r0, r3
 8000328:	f000 f860 	bl	80003ec <gpio_LED_Write>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000020 	.word	0x20000020

08000334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000334:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000368 <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	; (800037c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 800035e:	f000 fb31 	bl	80009c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000362:	f7ff ff57 	bl	8000214 <main>
  bx  lr    
 8000366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	08000a2c 	.word	0x08000a2c
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	20000028 	.word	0x20000028

08000380 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <BusFault_Handler>
	...

08000384 <adc_readValue>:

/**
 * @brief read ADC
 */
uint16_t adc_readValue(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	return (ADC1->DR) & 0xFFF;
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <adc_readValue+0x1c>)
 800038a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038c:	b29b      	uxth	r3, r3
 800038e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000392:	b29b      	uxth	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40012000 	.word	0x40012000

080003a4 <gpio_LED_Config>:

/*
 * @brief GPIO configuration PD12( LED4 ), PD13( LED3 ), PD14( LED5 ), PD15( LED6 )
 */
void gpio_LED_Config(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	//Enable GPIOD
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <gpio_LED_Config+0x40>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <gpio_LED_Config+0x40>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30
	//BB_ADDR_AHB1ENR = 1;
	//Mode Output
	GPIOD->MODER &= ~(0xFFUL << 24);
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <gpio_LED_Config+0x44>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <gpio_LED_Config+0x44>)
 80003ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003be:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55UL << 24;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <gpio_LED_Config+0x44>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <gpio_LED_Config+0x44>)
 80003c6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80003ca:	6013      	str	r3, [r2, #0]
	//Push-Pull
	GPIOD->OTYPER &= ~(0xFUL << 12);
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <gpio_LED_Config+0x44>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <gpio_LED_Config+0x44>)
 80003d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80003d6:	6053      	str	r3, [r2, #4]

}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020c00 	.word	0x40020c00

080003ec <gpio_LED_Write>:

/*
 * @brief Write/Toggle function
 */
void gpio_LED_Write(_Bool state,uint8_t LED_number)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
	if(state)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d00a      	beq.n	8000418 <gpio_LED_Write+0x2c>
	{
		GPIOD->BSRR |= 1 << LED_number;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <gpio_LED_Write+0x50>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	79ba      	ldrb	r2, [r7, #6]
 8000408:	2101      	movs	r1, #1
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	4611      	mov	r1, r2
 8000410:	4a0a      	ldr	r2, [pc, #40]	; (800043c <gpio_LED_Write+0x50>)
 8000412:	430b      	orrs	r3, r1
 8000414:	6193      	str	r3, [r2, #24]
	}
	else
	{
		GPIOD->BSRR |= 1 << (LED_number + 16);
	}
}
 8000416:	e00a      	b.n	800042e <gpio_LED_Write+0x42>
		GPIOD->BSRR |= 1 << (LED_number + 16);
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <gpio_LED_Write+0x50>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	79ba      	ldrb	r2, [r7, #6]
 800041e:	3210      	adds	r2, #16
 8000420:	2101      	movs	r1, #1
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <gpio_LED_Write+0x50>)
 800042a:	430b      	orrs	r3, r1
 800042c:	6193      	str	r3, [r2, #24]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40020c00 	.word	0x40020c00

08000440 <gpio_LED_Toggle>:
void gpio_LED_Toggle(uint8_t LED_number,uint32_t delay)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
	gpio_LED_Write(1, LED_number);
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4619      	mov	r1, r3
 8000450:	2001      	movs	r0, #1
 8000452:	f7ff ffcb 	bl	80003ec <gpio_LED_Write>
	ms_Delay(delay);
 8000456:	6838      	ldr	r0, [r7, #0]
 8000458:	f000 f97a 	bl	8000750 <ms_Delay>
	gpio_LED_Write(0, LED_number);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4619      	mov	r1, r3
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff ffc3 	bl	80003ec <gpio_LED_Write>
	ms_Delay(delay);
 8000466:	6838      	ldr	r0, [r7, #0]
 8000468:	f000 f972 	bl	8000750 <ms_Delay>
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <__NVIC_ClearPendingIRQ>:
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800047e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000482:	2b00      	cmp	r3, #0
 8000484:	db0c      	blt.n	80004a0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	f003 021f 	and.w	r2, r3, #31
 800048c:	4907      	ldr	r1, [pc, #28]	; (80004ac <__NVIC_ClearPendingIRQ+0x38>)
 800048e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000492:	095b      	lsrs	r3, r3, #5
 8000494:	2001      	movs	r0, #1
 8000496:	fa00 f202 	lsl.w	r2, r0, r2
 800049a:	3360      	adds	r3, #96	; 0x60
 800049c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000e100 	.word	0xe000e100

080004b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	6039      	str	r1, [r7, #0]
 80004ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	db0a      	blt.n	80004da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	490c      	ldr	r1, [pc, #48]	; (80004fc <__NVIC_SetPriority+0x4c>)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	0112      	lsls	r2, r2, #4
 80004d0:	b2d2      	uxtb	r2, r2
 80004d2:	440b      	add	r3, r1
 80004d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d8:	e00a      	b.n	80004f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4908      	ldr	r1, [pc, #32]	; (8000500 <__NVIC_SetPriority+0x50>)
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	f003 030f 	and.w	r3, r3, #15
 80004e6:	3b04      	subs	r3, #4
 80004e8:	0112      	lsls	r2, r2, #4
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	440b      	add	r3, r1
 80004ee:	761a      	strb	r2, [r3, #24]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	e000e100 	.word	0xe000e100
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <rcc_HSE_config>:

//ms stick
static __IO uint32_t msTicks = 0;

void rcc_HSE_config(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
	 * PLLI2S_N = 200
	 * PLLI2S_R = 2
	 *
	 */

	uint32_t timeout = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]

	//Dissable all interrupt
	RCC->CIR = 0x00000000UL;
 800050e:	4b6d      	ldr	r3, [pc, #436]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
	//Dissable internal high speed and wait HSI dissable
	RCC->CR &= ~(RCC_CR_HSION);
 8000514:	4b6b      	ldr	r3, [pc, #428]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a6a      	ldr	r2, [pc, #424]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800051a:	f023 0301 	bic.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]
	timeout = 0xFF;
 8000520:	23ff      	movs	r3, #255	; 0xff
 8000522:	607b      	str	r3, [r7, #4]
	//while((RCC->CR & RCC_CR_HSIRDY ) && (timeout > 0)){ timeout--;};
	//Dissable PLL and wait PLL dissable
	RCC->CR &= ~(RCC_CR_PLLON);
 8000524:	4b67      	ldr	r3, [pc, #412]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a66      	ldr	r2, [pc, #408]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800052a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800052e:	6013      	str	r3, [r2, #0]
	timeout = 0xFFFF;
 8000530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000534:	607b      	str	r3, [r7, #4]
	while((RCC->CR & RCC_CR_PLLRDY) && (timeout > 0)){ timeout--;};
 8000536:	e002      	b.n	800053e <rcc_HSE_config+0x3a>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3b01      	subs	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000546:	2b00      	cmp	r3, #0
 8000548:	d002      	beq.n	8000550 <rcc_HSE_config+0x4c>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1f3      	bne.n	8000538 <rcc_HSE_config+0x34>
	//PLL_M = 8
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 8000550:	4b5c      	ldr	r3, [pc, #368]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4a5b      	ldr	r2, [pc, #364]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000556:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800055a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 800055c:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	4a58      	ldr	r2, [pc, #352]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000562:	f043 0308 	orr.w	r3, r3, #8
 8000566:	6053      	str	r3, [r2, #4]
	//PLL_N = 192
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 8000568:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	4a55      	ldr	r2, [pc, #340]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800056e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000576:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0xC0 << RCC_PLLCFGR_PLLN_Pos;
 8000578:	4b52      	ldr	r3, [pc, #328]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4a51      	ldr	r2, [pc, #324]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800057e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000582:	6053      	str	r3, [r2, #4]
	//PLL_P = 2
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);
 8000584:	4b4f      	ldr	r3, [pc, #316]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a4e      	ldr	r2, [pc, #312]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800058a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800058e:	6053      	str	r3, [r2, #4]
	//PLL_Q = 4
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLQ);
 8000590:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	4a4b      	ldr	r2, [pc, #300]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000596:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800059a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLQ_2;
 800059c:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4a48      	ldr	r2, [pc, #288]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005a6:	6053      	str	r3, [r2, #4]

	/* HSE Osillator Enable */
	//Enable HSE Ociallator and wait ready
	RCC->CR &= ~(RCC_CR_HSEON);
 80005a8:	4b46      	ldr	r3, [pc, #280]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a45      	ldr	r2, [pc, #276]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b2:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 80005b4:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a42      	ldr	r2, [pc, #264]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005be:	6013      	str	r3, [r2, #0]
	timeout = 0xFF;
 80005c0:	23ff      	movs	r3, #255	; 0xff
 80005c2:	607b      	str	r3, [r7, #4]
	while(((RCC->CR & RCC_CR_HSERDY) == 0) & (timeout > 0)){ timeout--;};
 80005c4:	e002      	b.n	80005cc <rcc_HSE_config+0xc8>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf14      	ite	ne
 80005e4:	2301      	movne	r3, #1
 80005e6:	2300      	moveq	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4013      	ands	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1e9      	bne.n	80005c6 <rcc_HSE_config+0xc2>
	//Select HSE as PLL source
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 80005f2:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	4a33      	ldr	r2, [pc, #204]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80005f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005fc:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000608:	6053      	str	r3, [r2, #4]
	//Enable PLL and wait PLL ready
	RCC->CR |= RCC_CR_PLLON;
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a2d      	ldr	r2, [pc, #180]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000614:	6013      	str	r3, [r2, #0]
	timeout = 0xFFF;
 8000616:	f640 73ff 	movw	r3, #4095	; 0xfff
 800061a:	607b      	str	r3, [r7, #4]
	while(((RCC->CR & RCC_CR_PLLRDY) == 0) && (timeout > 0)){ timeout--;};
 800061c:	e002      	b.n	8000624 <rcc_HSE_config+0x120>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3b01      	subs	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <rcc_HSE_config+0x132>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f3      	bne.n	800061e <rcc_HSE_config+0x11a>

	/* Flash prefetch and wait state */
	FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <rcc_HSE_config+0x1c4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a23      	ldr	r2, [pc, #140]	; (80006c8 <rcc_HSE_config+0x1c4>)
 800063c:	f023 0307 	bic.w	r3, r3, #7
 8000640:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <rcc_HSE_config+0x1c4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <rcc_HSE_config+0x1c4>)
 8000648:	f043 0303 	orr.w	r3, r3, #3
 800064c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTEN;    //ENABLE prefetch buffer
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <rcc_HSE_config+0x1c4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1d      	ldr	r2, [pc, #116]	; (80006c8 <rcc_HSE_config+0x1c4>)
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6013      	str	r3, [r2, #0]
	//Select PLL as main system clock and wait ready
	RCC->CFGR &= ~(RCC_CFGR_SW);
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000660:	f023 0303 	bic.w	r3, r3, #3
 8000664:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_1;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <rcc_HSE_config+0x1c0>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6093      	str	r3, [r2, #8]
	timeout= 0xFF;
 8000672:	23ff      	movs	r3, #255	; 0xff
 8000674:	607b      	str	r3, [r7, #4]
	while(((RCC->CFGR & RCC_CFGR_SWS) >> 2 != 0x2UL ) && (timeout > 0)){ timeout--;};
 8000676:	e002      	b.n	800067e <rcc_HSE_config+0x17a>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	f003 0303 	and.w	r3, r3, #3
 8000688:	2b02      	cmp	r3, #2
 800068a:	d002      	beq.n	8000692 <rcc_HSE_config+0x18e>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f2      	bne.n	8000678 <rcc_HSE_config+0x174>


	//Prephiral clock setup
	//APB1 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <rcc_HSE_config+0x1c0>)
 8000698:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800069c:	6093      	str	r3, [r2, #8]
	//APB2 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80006a4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80006a8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_1;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <rcc_HSE_config+0x1c0>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6093      	str	r3, [r2, #8]

}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40023c00 	.word	0x40023c00

080006cc <rcc_SysTick_config>:

/*
 *@grief configure SysTick
 */
void rcc_SysTick_config(uint32_t arr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	//Reset control register
	SysTick->CTRL = 0;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <rcc_SysTick_config+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	//Set reload value
	SysTick->LOAD = arr - 1;
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <rcc_SysTick_config+0x4c>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	6053      	str	r3, [r2, #4]
	//Priority systick interrupt (NVIC)
	NVIC_SetPriority(SysTick_IRQn, 0);
 80006e2:	2100      	movs	r1, #0
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e8:	f7ff fee2 	bl	80004b0 <__NVIC_SetPriority>
	//Reset systick value to 0
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <rcc_SysTick_config+0x4c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <rcc_SysTick_config+0x4c>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <rcc_SysTick_config+0x4c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <rcc_SysTick_config+0x4c>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <rcc_SysTick_config+0x4c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <rcc_SysTick_config+0x4c>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	e000e010 	.word	0xe000e010

0800071c <rcc_msIncSysTick>:

/*
 * @brief Increment msTick
 */
void rcc_msIncSysTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	msTicks++;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <rcc_msIncSysTick+0x18>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <rcc_msIncSysTick+0x18>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	20000024 	.word	0x20000024

08000738 <rcc_msGetSysTick>:

/*
 * @brief Increment msTick
 */
uint32_t rcc_msGetSysTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	return msTicks;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <rcc_msGetSysTick+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000024 	.word	0x20000024

08000750 <ms_Delay>:

/*
 * @brief Increment msTick
 */
void ms_Delay(uint32_t ms)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	uint32_t startTick = rcc_msGetSysTick();
 8000758:	f7ff ffee 	bl	8000738 <rcc_msGetSysTick>
 800075c:	60f8      	str	r0, [r7, #12]
	while((rcc_msGetSysTick() - startTick) < ms);
 800075e:	bf00      	nop
 8000760:	f7ff ffea 	bl	8000738 <rcc_msGetSysTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <ms_Delay+0x10>
	msTicks = 0;
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <ms_Delay+0x30>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000024 	.word	0x20000024

08000784 <SysTick_Handler>:

/*
 * @brief SysTick Interrupt Callback
 */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 8000788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078c:	f7ff fe72 	bl	8000474 <__NVIC_ClearPendingIRQ>
	rcc_msIncSysTick();
 8000790:	f7ff ffc4 	bl	800071c <rcc_msIncSysTick>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <uart_UART1_GPIO_config>:

/**
 * @brief UART1 GPIO Configuration
 */
void uart_UART1_GPIO_config(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	//PA9-TX PA10-RX
	//Enable clock GPIOA
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN);
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <uart_UART1_GPIO_config+0xc4>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	4a2e      	ldr	r2, [pc, #184]	; (800085c <uart_UART1_GPIO_config+0xc4>)
 80007a2:	f023 0301 	bic.w	r3, r3, #1
 80007a6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <uart_UART1_GPIO_config+0xc4>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a2b      	ldr	r2, [pc, #172]	; (800085c <uart_UART1_GPIO_config+0xc4>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
	//Mode Alternate
	GPIOA->MODER &= ~(GPIO_MODER_MODE15);
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a29      	ldr	r2, [pc, #164]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80007be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER15_1;
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a26      	ldr	r2, [pc, #152]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE10);
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80007d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER10_1;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a20      	ldr	r2, [pc, #128]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e2:	6013      	str	r3, [r2, #0]
	//Speed max
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR15);
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80007ee:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1 | GPIO_OSPEEDER_OSPEEDR15_0;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80007fa:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR10);
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 8000802:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000806:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1 | GPIO_OSPEEDER_OSPEEDR10_0;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 800080e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000812:	6093      	str	r3, [r2, #8]
	//Map PA0, PA10 to UART1
	GPIOA->AFR[1] &= ~(GPIO_AFRH_AFRH1);
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 8000816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000818:	4a11      	ldr	r2, [pc, #68]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 800081a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800081e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(GPIO_AFRH_AFRH2);
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 8000822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 8000826:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800082a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFRH7_0 | GPIO_AFRH_AFRH7_1 | GPIO_AFRH_AFRH7_2;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 8000832:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8000836:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFRH2_0 | GPIO_AFRH_AFRH2_1 | GPIO_AFRH_AFRH2_2;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 800083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083c:	4a08      	ldr	r2, [pc, #32]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 800083e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000842:	6253      	str	r3, [r2, #36]	; 0x24
	//
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD15);
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <uart_UART1_GPIO_config+0xc8>)
 800084a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000

08000864 <uart_UART1_config>:

/**
 * @brief UART1 Configuration
 */
void uart_UART1_config(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	//Dissable all flag and uart
	USART1->SR = 0;
 8000868:	4b36      	ldr	r3, [pc, #216]	; (8000944 <uart_UART1_config+0xe0>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
	//Enable UART1 clock
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <uart_UART1_config+0xe4>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a35      	ldr	r2, [pc, #212]	; (8000948 <uart_UART1_config+0xe4>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
	//Disnable UART1
	USART1->CR1 &= ~(USART_CR1_UE);
 800087a:	4b32      	ldr	r3, [pc, #200]	; (8000944 <uart_UART1_config+0xe0>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	4a31      	ldr	r2, [pc, #196]	; (8000944 <uart_UART1_config+0xe0>)
 8000880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000884:	60d3      	str	r3, [r2, #12]
	//Parity even
	USART1->CR1 &= ~(USART_CR1_PS);
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <uart_UART1_config+0xe0>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	4a2e      	ldr	r2, [pc, #184]	; (8000944 <uart_UART1_config+0xe0>)
 800088c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000890:	60d3      	str	r3, [r2, #12]
	//Parity control enable
	USART1->CR1 &= ~(USART_CR1_PCE);
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <uart_UART1_config+0xe0>)
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <uart_UART1_config+0xe0>)
 8000898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800089c:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 |= USART_CR1_PCE;
	//Word length 8 bit
	USART1->CR1 &= ~(USART_CR1_M);
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <uart_UART1_config+0xe0>)
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	4a28      	ldr	r2, [pc, #160]	; (8000944 <uart_UART1_config+0xe0>)
 80008a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008a8:	60d3      	str	r3, [r2, #12]
	//Stop bit to 1
	USART1->CR2 &= ~(USART_CR2_STOP);
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <uart_UART1_config+0xe0>)
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	4a25      	ldr	r2, [pc, #148]	; (8000944 <uart_UART1_config+0xe0>)
 80008b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b4:	6113      	str	r3, [r2, #16]
	//USART1->CR2 |= (USART_CR2_STOP_1);
	//Dissable HW Flow Control
	USART1->CR3 &= ~(USART_CR3_RTSE);
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <uart_UART1_config+0xe0>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <uart_UART1_config+0xe0>)
 80008bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008c0:	6153      	str	r3, [r2, #20]
	USART1->CR3 &= ~(USART_CR3_CTSE);
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <uart_UART1_config+0xe0>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <uart_UART1_config+0xe0>)
 80008c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008cc:	6153      	str	r3, [r2, #20]
	//Dissable Smart care
	USART1->CR3 &= ~(USART_CR3_SCEN);
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <uart_UART1_config+0xe0>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <uart_UART1_config+0xe0>)
 80008d4:	f023 0320 	bic.w	r3, r3, #32
 80008d8:	6153      	str	r3, [r2, #20]
	//Set baurate 115200
	USART1->BRR = 0;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <uart_UART1_config+0xe0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	//USART1->BRR |= 52 << 4 | 1 << 0;
	USART1->BRR |= 625 << 4;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <uart_UART1_config+0xe0>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	4a17      	ldr	r2, [pc, #92]	; (8000944 <uart_UART1_config+0xe0>)
 80008e6:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6093      	str	r3, [r2, #8]
	//CLEAR something as clk and LIN
	USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN );
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <uart_UART1_config+0xe0>)
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <uart_UART1_config+0xe0>)
 80008f6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80008fa:	6113      	str	r3, [r2, #16]
	USART1->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN);
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <uart_UART1_config+0xe0>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <uart_UART1_config+0xe0>)
 8000902:	f023 030a 	bic.w	r3, r3, #10
 8000906:	6153      	str	r3, [r2, #20]
	USART1->CR1 |= USART_CR1_UE;
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <uart_UART1_config+0xe0>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <uart_UART1_config+0xe0>)
 800090e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000912:	60d3      	str	r3, [r2, #12]
	//Enable transmit
	USART1->CR1 |= USART_CR1_TE;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <uart_UART1_config+0xe0>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <uart_UART1_config+0xe0>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	60d3      	str	r3, [r2, #12]
	//Enable receive
	USART1->CR1 |= USART_CR1_RE;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <uart_UART1_config+0xe0>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <uart_UART1_config+0xe0>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	60d3      	str	r3, [r2, #12]
	USART1->SR &= ~(USART_SR_TC);
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <uart_UART1_config+0xe0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <uart_UART1_config+0xe0>)
 8000932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40011000 	.word	0x40011000
 8000948:	40023800 	.word	0x40023800

0800094c <uart_translate>:
	USART1->SR &= ~(USART_SR_TC);
	ms_Delay(1000);
	return 1;
}
_Bool uart_translate(uint8_t data,uint8_t timeout)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	71bb      	strb	r3, [r7, #6]
	uint32_t startTick = rcc_msGetSysTick();
 800095c:	f7ff feec 	bl	8000738 <rcc_msGetSysTick>
 8000960:	60f8      	str	r0, [r7, #12]
	if(USART1->SR & USART_SR_TXE) //TX buffer empty
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <uart_translate+0x74>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <uart_translate+0x2a>
	{
		USART1->DR = data;
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <uart_translate+0x74>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	6053      	str	r3, [r2, #4]
 8000974:	e013      	b.n	800099e <uart_translate+0x52>
		//ms_Delay(100);
	}
	else
	{
		if((rcc_msGetSysTick() - startTick) >= timeout)
 8000976:	f7ff fedf 	bl	8000738 <rcc_msGetSysTick>
 800097a:	4602      	mov	r2, r0
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1ad2      	subs	r2, r2, r3
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	429a      	cmp	r2, r3
 8000984:	d30b      	bcc.n	800099e <uart_translate+0x52>
		{
			return 0;
 8000986:	2300      	movs	r3, #0
 8000988:	e016      	b.n	80009b8 <uart_translate+0x6c>
		}
	}
	//wait for busy flag
	while(USART1->SR & USART_SR_TC != 1)
	{
		if((rcc_msGetSysTick() - startTick) >= timeout)
 800098a:	f7ff fed5 	bl	8000738 <rcc_msGetSysTick>
 800098e:	4602      	mov	r2, r0
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	1ad2      	subs	r2, r2, r3
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	429a      	cmp	r2, r3
 8000998:	d301      	bcc.n	800099e <uart_translate+0x52>
		{
			return 0;
 800099a:	2300      	movs	r3, #0
 800099c:	e00c      	b.n	80009b8 <uart_translate+0x6c>
	while(USART1->SR & USART_SR_TC != 1)
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <uart_translate+0x74>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1ef      	bne.n	800098a <uart_translate+0x3e>
		}
	}
	USART1->SR &= ~(USART_SR_TC);
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <uart_translate+0x74>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <uart_translate+0x74>)
 80009b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009b4:	6013      	str	r3, [r2, #0]
	return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40011000 	.word	0x40011000

080009c4 <__libc_init_array>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	4d0d      	ldr	r5, [pc, #52]	; (80009fc <__libc_init_array+0x38>)
 80009c8:	4c0d      	ldr	r4, [pc, #52]	; (8000a00 <__libc_init_array+0x3c>)
 80009ca:	1b64      	subs	r4, r4, r5
 80009cc:	10a4      	asrs	r4, r4, #2
 80009ce:	2600      	movs	r6, #0
 80009d0:	42a6      	cmp	r6, r4
 80009d2:	d109      	bne.n	80009e8 <__libc_init_array+0x24>
 80009d4:	4d0b      	ldr	r5, [pc, #44]	; (8000a04 <__libc_init_array+0x40>)
 80009d6:	4c0c      	ldr	r4, [pc, #48]	; (8000a08 <__libc_init_array+0x44>)
 80009d8:	f000 f818 	bl	8000a0c <_init>
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	10a4      	asrs	r4, r4, #2
 80009e0:	2600      	movs	r6, #0
 80009e2:	42a6      	cmp	r6, r4
 80009e4:	d105      	bne.n	80009f2 <__libc_init_array+0x2e>
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ec:	4798      	blx	r3
 80009ee:	3601      	adds	r6, #1
 80009f0:	e7ee      	b.n	80009d0 <__libc_init_array+0xc>
 80009f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f6:	4798      	blx	r3
 80009f8:	3601      	adds	r6, #1
 80009fa:	e7f2      	b.n	80009e2 <__libc_init_array+0x1e>
 80009fc:	08000a24 	.word	0x08000a24
 8000a00:	08000a24 	.word	0x08000a24
 8000a04:	08000a24 	.word	0x08000a24
 8000a08:	08000a28 	.word	0x08000a28

08000a0c <_init>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	bf00      	nop
 8000a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a12:	bc08      	pop	{r3}
 8000a14:	469e      	mov	lr, r3
 8000a16:	4770      	bx	lr

08000a18 <_fini>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr
