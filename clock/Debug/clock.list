
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000210  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  4 .ARM          00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000395  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000146  00000000  00000000  00010775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000108c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  00010918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db9b  00000000  00000000  00010958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005c5  00000000  00000000  0001e4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f3fc  00000000  00000000  0001eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006deb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  0006df08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000390 	.word	0x08000390

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000390 	.word	0x08000390

080001d8 <init_all>:

	}
}

void init_all(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	volatile uint32_t timeout;
	//uint32_t tempreg;
	/* dissable all interrupt */
	RCC->CIR = 0x00000000;
 80001de:	4b40      	ldr	r3, [pc, #256]	; (80002e0 <init_all+0x108>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	60da      	str	r2, [r3, #12]
	/* dissable Internal hight speed */
	RCC->CR &= ~0x00000001;
 80001e4:	4b3e      	ldr	r3, [pc, #248]	; (80002e0 <init_all+0x108>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a3d      	ldr	r2, [pc, #244]	; (80002e0 <init_all+0x108>)
 80001ea:	f023 0301 	bic.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
	/* Wait still HSI dissable */
	timeout = 0xFFF;
 80001f0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001f4:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 1)) != 0 && timeout > 0)
 80001f6:	e002      	b.n	80001fe <init_all+0x26>
	{
		timeout--;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3b01      	subs	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 1)) != 0 && timeout > 0)
 80001fe:	4b38      	ldr	r3, [pc, #224]	; (80002e0 <init_all+0x108>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f003 0302 	and.w	r3, r3, #2
 8000206:	2b00      	cmp	r3, #0
 8000208:	d002      	beq.n	8000210 <init_all+0x38>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d1f3      	bne.n	80001f8 <init_all+0x20>
	}

	/* dissable PLL */
	RCC->CR &= ~(1 << 24);
 8000210:	4b33      	ldr	r3, [pc, #204]	; (80002e0 <init_all+0x108>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a32      	ldr	r2, [pc, #200]	; (80002e0 <init_all+0x108>)
 8000216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800021a:	6013      	str	r3, [r2, #0]
	/* Wait PLL dissable */
	timeout = 0xFFFFFF;
 800021c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000220:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 25)) != 0 && timeout > 0)
 8000222:	e002      	b.n	800022a <init_all+0x52>
	{
		timeout--;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1 << 25)) != 0 && timeout > 0)
 800022a:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <init_all+0x108>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <init_all+0x64>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d1f3      	bne.n	8000224 <init_all+0x4c>
	}
	  /* Configure the main PLL clock source, predivider and multiplication factor. */
	RCC->PLLCFGR &= ~(0x0F037FFF);
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <init_all+0x108>)
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	4927      	ldr	r1, [pc, #156]	; (80002e0 <init_all+0x108>)
 8000242:	4b28      	ldr	r3, [pc, #160]	; (80002e4 <init_all+0x10c>)
 8000244:	4013      	ands	r3, r2
 8000246:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= 0x8U << 24 | 1U << 16 | 0x150U << 6 | 0x7U << 0;
 8000248:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <init_all+0x108>)
 800024a:	685a      	ldr	r2, [r3, #4]
 800024c:	4924      	ldr	r1, [pc, #144]	; (80002e0 <init_all+0x108>)
 800024e:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <init_all+0x110>)
 8000250:	4313      	orrs	r3, r2
 8000252:	604b      	str	r3, [r1, #4]
	/* ENABLE PLL */
	RCC->CR |= 1 << 24;
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <init_all+0x108>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <init_all+0x108>)
 800025a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800025e:	6013      	str	r3, [r2, #0]
	/* Wait PLL ready */
	timeout = 0xFFFFFF;
 8000260:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000264:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1U << 25)) && (timeout > 0))
 8000266:	e002      	b.n	800026e <init_all+0x96>
	{
		timeout--;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3b01      	subs	r3, #1
 800026c:	607b      	str	r3, [r7, #4]
	while((RCC->CR & (1U << 25)) && (timeout > 0))
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <init_all+0x108>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000276:	2b00      	cmp	r3, #0
 8000278:	d002      	beq.n	8000280 <init_all+0xa8>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f3      	bne.n	8000268 <init_all+0x90>
	}
	/* HSE USE SYSCLOCK */
	RCC->CFGR &= ~(0x3U << 0);
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <init_all+0x108>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <init_all+0x108>)
 8000286:	f023 0303 	bic.w	r3, r3, #3
 800028a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 1U << 0;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <init_all+0x108>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <init_all+0x108>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6093      	str	r3, [r2, #8]
	/* WAIT SYSTEM CLOCK READY */
	timeout = 0x0FFFFFFF;
 8000298:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800029c:	607b      	str	r3, [r7, #4]
	while(((RCC->CFGR & (0x3U << 2)) != (2 << 2)) && (timeout > 0))
 800029e:	e002      	b.n	80002a6 <init_all+0xce>
	{
		timeout--;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
	while(((RCC->CFGR & (0x3U << 2)) != (2 << 2)) && (timeout > 0))
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <init_all+0x108>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	f003 030c 	and.w	r3, r3, #12
 80002ae:	2b08      	cmp	r3, #8
 80002b0:	d002      	beq.n	80002b8 <init_all+0xe0>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1f3      	bne.n	80002a0 <init_all+0xc8>
	}
	RCC->CFGR &= ~(0xFFF0);
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <init_all+0x108>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <init_all+0x108>)
 80002be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80002c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002c6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 1 << 12;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <init_all+0x108>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <init_all+0x108>)
 80002ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002d2:	6093      	str	r3, [r2, #8]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40023800 	.word	0x40023800
 80002e4:	f0fc8000 	.word	0xf0fc8000
 80002e8:	08015407 	.word	0x08015407

080002ec <main>:

void main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	init_all();
 80002f0:	f7ff ff72 	bl	80001d8 <init_all>

	while(1)
 80002f4:	e7fe      	b.n	80002f4 <main+0x8>
	...

080002f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002f8:	f8df d030 	ldr.w	sp, [pc, #48]	; 800032c <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 f811 	bl	8000348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000326:	f7ff ffe1 	bl	80002ec <main>
  bx  lr    
 800032a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800032c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000338:	080003b0 	.word	0x080003b0
  ldr r2, =_sbss
 800033c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000340:	2000001c 	.word	0x2000001c

08000344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC_IRQHandler>
	...

08000348 <__libc_init_array>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	4d0d      	ldr	r5, [pc, #52]	; (8000380 <__libc_init_array+0x38>)
 800034c:	4c0d      	ldr	r4, [pc, #52]	; (8000384 <__libc_init_array+0x3c>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	2600      	movs	r6, #0
 8000354:	42a6      	cmp	r6, r4
 8000356:	d109      	bne.n	800036c <__libc_init_array+0x24>
 8000358:	4d0b      	ldr	r5, [pc, #44]	; (8000388 <__libc_init_array+0x40>)
 800035a:	4c0c      	ldr	r4, [pc, #48]	; (800038c <__libc_init_array+0x44>)
 800035c:	f000 f818 	bl	8000390 <_init>
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	2600      	movs	r6, #0
 8000366:	42a6      	cmp	r6, r4
 8000368:	d105      	bne.n	8000376 <__libc_init_array+0x2e>
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000370:	4798      	blx	r3
 8000372:	3601      	adds	r6, #1
 8000374:	e7ee      	b.n	8000354 <__libc_init_array+0xc>
 8000376:	f855 3b04 	ldr.w	r3, [r5], #4
 800037a:	4798      	blx	r3
 800037c:	3601      	adds	r6, #1
 800037e:	e7f2      	b.n	8000366 <__libc_init_array+0x1e>
 8000380:	080003a8 	.word	0x080003a8
 8000384:	080003a8 	.word	0x080003a8
 8000388:	080003a8 	.word	0x080003a8
 800038c:	080003ac 	.word	0x080003ac

08000390 <_init>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr

0800039c <_fini>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	bf00      	nop
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr
