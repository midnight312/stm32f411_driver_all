/*
 * rtc.c
 *
 *  Created on: Aug 29, 2021
 *      Author: thanh
 */

#include "rtc.h"

/*
 * @brief RTC LSE configuration
 */
void rtc_LSE_config(void)
{
	//Enable PWR clock
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
	//Enable write access to backup domain
	PWR->CR |= PWR_CR_DBP;
	//Check if LSE is allready to clock source -->return
	uint32_t RCC_bdcr = RCC->BDCR;
	if((RCC_bdcr & RCC_BDCR_RTCSEL_1) && (RCC_bdcr & ~RCC_BDCR_RTCSEL_0))
	{
		printf("LSI allready sellect! \n");
		return;
	}
	RCC->CSR |= RCC_CSR_LSION;
	while(RCC->CR & RCC_CSR_LSIRDY == 0);
	//Reset backup domain (change clock source)
	__IO uint32_t tempRead = 0;
	tempRead = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
	RCC->BDCR = RCC_BDCR_BDRST;
	RCC->BDCR = 0;
	//Restore value
	RCC->BDCR = tempRead;
	//Enable LSE and wait for ready
	//RCC->BDCR |= RCC_BDCR_LSEON;
	//while(!(RCC->BDCR & RCC_BDCR_LSIRDY));
	//Sellect LSE as source
	RCC->BDCR |= RCC_BDCR_RTCSEL_1;
	//Enable RTC
	RCC->BDCR |= RCC_BDCR_RTCEN;
}

/*
 * @brief RTC prephiral configuration
 */
void rtc_config(void)
{
	//Access shadow register
	RTC->CR &= ~(RTC_CR_BYPSHAD);
	//Set clock 1HZ
	RTC->PRER &= ~(RTC_PRER_PREDIV_A | RTC_PRER_PREDIV_S);
	RTC->PRER |= 0x3FUL << 16 | 0x7FUL << 7;
	//Enable access
	RTC->WPR = 0xCA;
	RTC->WPR = 0x53;
	//Enable alarm A
	//RTC->CR |= RTC_CR_ALRAE;
	//RTC->CR |= RTC_CR_ALRAIE;
	//
	//Check for ongoing operation

	//Enter configuration
	//Set prescaler
	//Exit initialisation
}

/*
 * @brief RTC set Unix Counter
 */
void rtc_setUnixTime(uint32_t Unix)
{
	RTC->SSR = Unix;
}

/*
 * @brief RTC get Unix Counter
 */
uint32_t rtc_getUnixTime(void)
{
	return (uint32_t)(RTC->SSR);
}
