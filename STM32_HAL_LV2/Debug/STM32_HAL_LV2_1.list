
STM32_HAL_LV2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08004e68  08004e68  00014e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800526c  0800526c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005274  08005274  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800527c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001dc  08005458  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005458  00020338  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117b9  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260b  00000000  00000000  000319c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00033fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00034cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036e6  00000000  00000000  000358f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee89  00000000  00000000  00038fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f089  00000000  00000000  00047e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  000d6f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e4c 	.word	0x08004e4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004e4c 	.word	0x08004e4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96c 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 8082 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4617      	mov	r7, r2
 8000bfe:	d946      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x32>
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa05 f302 	lsl.w	r3, r5, r2
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	4097      	lsls	r7, r2
 8000c14:	ea41 0e03 	orr.w	lr, r1, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbbe fcf8 	udiv	ip, lr, r8
 8000c24:	b2b9      	uxth	r1, r7
 8000c26:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000c2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c2e:	fb0c f001 	mul.w	r0, ip, r1
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8000c3c:	f080 8116 	bcs.w	8000e6c <__udivmoddi4+0x284>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f240 8113 	bls.w	8000e6c <__udivmoddi4+0x284>
 8000c46:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c4a:	443b      	add	r3, r7
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f101 	mul.w	r1, r0, r1
 8000c60:	42a1      	cmp	r1, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8101 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c6e:	42a1      	cmp	r1, r4
 8000c70:	f240 80fe 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	1a64      	subs	r4, r4, r1
 8000c7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40d4      	lsrs	r4, r2
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d14f      	bne.n	8000d3a <__udivmoddi4+0x152>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c25      	lsrs	r5, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	42ab      	cmp	r3, r5
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	197d      	adds	r5, r7, r5
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	f200 80e7 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1aed      	subs	r5, r5, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cd4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d7 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7c0      	b.n	8000c80 <__udivmoddi4+0x98>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80af 	beq.w	8000e66 <__udivmoddi4+0x27e>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d14b      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0x13e>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80b7 	bhi.w	8000e94 <__udivmoddi4+0x2ac>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0303 	sbc.w	r3, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	469e      	mov	lr, r3
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0aa      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000d34:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d38:	e7a7      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000d3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	4097      	lsls	r7, r2
 8000d44:	fa20 f00c 	lsr.w	r0, r0, ip
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000d50:	4318      	orrs	r0, r3
 8000d52:	fbbc f1fe 	udiv	r1, ip, lr
 8000d56:	0c05      	lsrs	r5, r0, #16
 8000d58:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d64:	fb01 f308 	mul.w	r3, r1, r8
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	197d      	adds	r5, r7, r5
 8000d72:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000d76:	f080 808b 	bcs.w	8000e90 <__udivmoddi4+0x2a8>
 8000d7a:	42ab      	cmp	r3, r5
 8000d7c:	f240 8088 	bls.w	8000e90 <__udivmoddi4+0x2a8>
 8000d80:	3902      	subs	r1, #2
 8000d82:	443d      	add	r5, r7
 8000d84:	1aeb      	subs	r3, r5, r3
 8000d86:	b285      	uxth	r5, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	197d      	adds	r5, r7, r5
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d271      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	d96f      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443d      	add	r5, r7
 8000dac:	1aeb      	subs	r3, r5, r3
 8000dae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c1 0c20 	rsb	ip, r1, #32
 8000db8:	408b      	lsls	r3, r1
 8000dba:	fa22 f70c 	lsr.w	r7, r2, ip
 8000dbe:	431f      	orrs	r7, r3
 8000dc0:	fa20 f40c 	lsr.w	r4, r0, ip
 8000dc4:	fa05 f301 	lsl.w	r3, r5, r1
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	fa25 f50c 	lsr.w	r5, r5, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	0c23      	lsrs	r3, r4, #16
 8000dd4:	fbb5 f9fe 	udiv	r9, r5, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 5519 	mls	r5, lr, r9, r5
 8000de0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000de4:	fb09 fa08 	mul.w	sl, r9, r8
 8000de8:	45aa      	cmp	sl, r5
 8000dea:	fa02 f201 	lsl.w	r2, r2, r1
 8000dee:	fa00 f301 	lsl.w	r3, r0, r1
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x21e>
 8000df4:	197d      	adds	r5, r7, r5
 8000df6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfa:	d247      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000dfc:	45aa      	cmp	sl, r5
 8000dfe:	d945      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000e00:	f1a9 0902 	sub.w	r9, r9, #2
 8000e04:	443d      	add	r5, r7
 8000e06:	eba5 050a 	sub.w	r5, r5, sl
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e10:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e18:	fb00 f808 	mul.w	r8, r0, r8
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x248>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e26:	d22d      	bcs.n	8000e84 <__udivmoddi4+0x29c>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	d92b      	bls.n	8000e84 <__udivmoddi4+0x29c>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3c:	454c      	cmp	r4, r9
 8000e3e:	46c6      	mov	lr, r8
 8000e40:	464d      	mov	r5, r9
 8000e42:	d319      	bcc.n	8000e78 <__udivmoddi4+0x290>
 8000e44:	d016      	beq.n	8000e74 <__udivmoddi4+0x28c>
 8000e46:	b15e      	cbz	r6, 8000e60 <__udivmoddi4+0x278>
 8000e48:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4c:	eb64 0405 	sbc.w	r4, r4, r5
 8000e50:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e54:	40ca      	lsrs	r2, r1
 8000e56:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5a:	40cc      	lsrs	r4, r1
 8000e5c:	e9c6 2400 	strd	r2, r4, [r6]
 8000e60:	2100      	movs	r1, #0
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e70e      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e6c:	46ac      	mov	ip, r5
 8000e6e:	e6ed      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e701      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e74:	4543      	cmp	r3, r8
 8000e76:	d2e6      	bcs.n	8000e46 <__udivmoddi4+0x25e>
 8000e78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7c:	eb69 0507 	sbc.w	r5, r9, r7
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e0      	b.n	8000e46 <__udivmoddi4+0x25e>
 8000e84:	4628      	mov	r0, r5
 8000e86:	e7d3      	b.n	8000e30 <__udivmoddi4+0x248>
 8000e88:	4660      	mov	r0, ip
 8000e8a:	e78f      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7ba      	b.n	8000e06 <__udivmoddi4+0x21e>
 8000e90:	4661      	mov	r1, ip
 8000e92:	e777      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e74b      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443d      	add	r5, r7
 8000e9e:	e715      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	e726      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
  * @retval int
  */
_Bool buttonInterrupt = false;

int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  HAL_Init();
 8000eb0:	f000 f9aa 	bl	8001208 <HAL_Init>
  //rcc_systemClockConfig();
  //UART
  uart_UART1_GPIO_config();
 8000eb4:	f001 f9da 	bl	800226c <uart_UART1_GPIO_config>
  uart_UAR1_config();
 8000eb8:	f001 fa38 	bl	800232c <uart_UAR1_config>
  //GPIO
  gpio_LED_config();
 8000ebc:	f001 f99c 	bl	80021f8 <gpio_LED_config>
  exti_buttonConfig();
 8000ec0:	f001 f962 	bl	8002188 <exti_buttonConfig>
  printf("Encoder is starting ...\n");
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1l);
  int encoderCount;
  uint8_t encoderDir;
  */
  printf("Programing is starting ...\n");
 8000ec4:	4801      	ldr	r0, [pc, #4]	; (8000ecc <main+0x20>)
 8000ec6:	f001 ff57 	bl	8002d78 <puts>
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x1e>
 8000ecc:	08004e68 	.word	0x08004e68

08000ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d10b      	bne.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x28>
	{
		buttonInterrupt ^= 1;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bf14      	ite	ne
 8000eee:	2301      	movne	r3, #1
 8000ef0:	2300      	moveq	r3, #0
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ef6:	701a      	strb	r2, [r3, #0]
		//EXTI->IMR &= ~(EXTI_IMR_IM0);
	}
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001f8 	.word	0x200001f8

08000f08 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d105      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		gpio_LED_toggle();
 8000f1a:	f001 f99b 	bl	8002254 <gpio_LED_toggle>
		HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f22:	f000 f9df 	bl	80012e4 <HAL_Delay>
	}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40000400 	.word	0x40000400

08000f34 <Error_Handler>:
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0x8>
	...

08000f40 <__io_putchar>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
int __io_putchar(int ch)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &c[0], 1, 100);
 8000f4e:	f107 010c 	add.w	r1, r7, #12
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	2201      	movs	r2, #1
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <__io_putchar+0x28>)
 8000f58:	f000 fe70 	bl	8001c3c <HAL_UART_Transmit>
	return ch;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200002e4 	.word	0x200002e4

08000f6c <_write>:
int _write(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	int dataIndx;
	for(dataIndx = 0; dataIndx < len; dataIndx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e009      	b.n	8000f92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffda 	bl	8000f40 <__io_putchar>
	for(dataIndx = 0; dataIndx < len; dataIndx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf1      	blt.n	8000f7e <_write+0x12>

	}
	return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x48>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x48>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x48>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_MspInit+0x48>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_MspInit+0x48>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_MspInit+0x48>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40023800 	.word	0x40023800

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 f939 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 fc1c 	bl	8001880 <HAL_GPIO_EXTI_IRQHandler>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <TIM3_IRQHandler>:
/*
 * @brief TIM3 interrupt handl
 */
void TIM3_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM3_IRQHandler+0x10>)
 8001052:	f000 fc5f 	bl	8001914 <HAL_TIM_IRQHandler>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000029c 	.word	0x2000029c

08001060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <_kill>:

int _kill(int pid, int sig)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001078:	f001 f982 	bl	8002380 <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	2216      	movs	r2, #22
 8001080:	601a      	str	r2, [r3, #0]
	return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_exit>:

void _exit (int status)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001096:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffe7 	bl	800106e <_kill>
	while (1) {}		/* Make sure we hang here */
 80010a0:	e7fe      	b.n	80010a0 <_exit+0x12>

080010a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e00a      	b.n	80010ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b4:	f3af 8000 	nop.w
 80010b8:	4601      	mov	r1, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	b2ca      	uxtb	r2, r1
 80010c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbf0      	blt.n	80010b4 <_read+0x12>
	}

return len;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_close>:
	}
	return len;
}

int _close(int file)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	return -1;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001102:	605a      	str	r2, [r3, #4]
	return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <_isatty>:

int _isatty(int file)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
	return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f001 f908 	bl	8002380 <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20020000 	.word	0x20020000
 800119c:	00000400 	.word	0x00000400
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	20000338 	.word	0x20000338

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ba:	490e      	ldr	r1, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d0:	4c0b      	ldr	r4, [pc, #44]	; (8001200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011de:	f7ff ffe3 	bl	80011a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f001 f8d3 	bl	800238c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff fe61 	bl	8000eac <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80011f8:	0800527c 	.word	0x0800527c
  ldr r2, =_sbss
 80011fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001200:	20000338 	.word	0x20000338

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f947 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f808 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff feb2 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f95f 	bl	800152e <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001288:	f000 f927 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x1c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x20>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a03      	ldr	r2, [pc, #12]	; (80012cc <HAL_IncTick+0x20>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000208 	.word	0x20000208

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <HAL_GetTick+0x10>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000208 	.word	0x20000208

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff fff0 	bl	80012d0 <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffe0 	bl	80012d0 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4906      	ldr	r1, [pc, #24]	; (80013c4 <__NVIC_EnableIRQ+0x34>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f7ff ff90 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff2d 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff42 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff90 	bl	800141c <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5f 	bl	80013c8 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff35 	bl	8001390 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e159      	b.n	8001818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8148 	bne.w	8001812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a2 	beq.w	8001812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b56      	ldr	r3, [pc, #344]	; (800182c <HAL_GPIO_Init+0x2e4>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a55      	ldr	r2, [pc, #340]	; (800182c <HAL_GPIO_Init+0x2e4>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_GPIO_Init+0x2e4>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a51      	ldr	r2, [pc, #324]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a48      	ldr	r2, [pc, #288]	; (8001834 <HAL_GPIO_Init+0x2ec>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x202>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a47      	ldr	r2, [pc, #284]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x1fe>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a46      	ldr	r2, [pc, #280]	; (800183c <HAL_GPIO_Init+0x2f4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a45      	ldr	r2, [pc, #276]	; (8001840 <HAL_GPIO_Init+0x2f8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x1f6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a44      	ldr	r2, [pc, #272]	; (8001844 <HAL_GPIO_Init+0x2fc>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x1f2>
 8001736:	2304      	movs	r3, #4
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173a:	2307      	movs	r3, #7
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x204>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4934      	ldr	r1, [pc, #208]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176a:	4b37      	ldr	r3, [pc, #220]	; (8001848 <HAL_GPIO_Init+0x300>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178e:	4a2e      	ldr	r2, [pc, #184]	; (8001848 <HAL_GPIO_Init+0x300>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <HAL_GPIO_Init+0x300>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b8:	4a23      	ldr	r2, [pc, #140]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_GPIO_Init+0x300>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_GPIO_Init+0x300>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f aea2 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43d9      	mvns	r1, r3
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	400b      	ands	r3, r1
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
	...

08001880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fb16 	bl	8000ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40013c00 	.word	0x40013c00

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff2 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0a9b      	lsrs	r3, r3, #10
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08004e84 	.word	0x08004e84

080018ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0b5b      	lsrs	r3, r3, #13
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	08004e84 	.word	0x08004e84

08001914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d122      	bne.n	8001970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b02      	cmp	r3, #2
 8001936:	d11b      	bne.n	8001970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0202 	mvn.w	r2, #2
 8001940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8ed 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 800195c:	e005      	b.n	800196a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8e0 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f8ef 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b04      	cmp	r3, #4
 800197c:	d122      	bne.n	80019c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b04      	cmp	r3, #4
 800198a:	d11b      	bne.n	80019c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0204 	mvn.w	r2, #4
 8001994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f8c3 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 80019b0:	e005      	b.n	80019be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f8b6 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f8c5 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d122      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d11b      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0208 	mvn.w	r2, #8
 80019e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f899 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 8001a04:	e005      	b.n	8001a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f88c 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f89b 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d11b      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0210 	mvn.w	r2, #16
 8001a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2208      	movs	r2, #8
 8001a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f86f 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f862 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f871 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10e      	bne.n	8001a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0201 	mvn.w	r2, #1
 8001a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fa38 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa2:	2b80      	cmp	r3, #128	; 0x80
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b80      	cmp	r3, #128	; 0x80
 8001ab2:	d107      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f85d 	bl	8001b7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d10e      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001adc:	2b40      	cmp	r3, #64	; 0x40
 8001ade:	d107      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f835 	bl	8001b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d107      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0220 	mvn.w	r2, #32
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f828 	bl	8001b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e03f      	b.n	8001c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f837 	bl	8001c2a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	; 0x24
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f90d 	bl	8001df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d17c      	bne.n	8001d56 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_UART_Transmit+0x2c>
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e075      	b.n	8001d58 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_UART_Transmit+0x3e>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e06e      	b.n	8001d58 <HAL_UART_Transmit+0x11c>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2221      	movs	r2, #33	; 0x21
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c90:	f7ff fb1e 	bl	80012d0 <HAL_GetTick>
 8001c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	88fa      	ldrh	r2, [r7, #6]
 8001ca0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001caa:	d108      	bne.n	8001cbe <HAL_UART_Transmit+0x82>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d104      	bne.n	8001cbe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	e003      	b.n	8001cc6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001cce:	e02a      	b.n	8001d26 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f840 	bl	8001d60 <UART_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e036      	b.n	8001d58 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10b      	bne.n	8001d08 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cfe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	3302      	adds	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	e007      	b.n	8001d18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1cf      	bne.n	8001cd0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2200      	movs	r2, #0
 8001d38:	2140      	movs	r1, #64	; 0x40
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f810 	bl	8001d60 <UART_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e006      	b.n	8001d58 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d70:	e02c      	b.n	8001dcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d78:	d028      	beq.n	8001dcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d80:	f7ff faa6 	bl	80012d0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d21d      	bcs.n	8001dcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e00f      	b.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d0c3      	beq.n	8001d72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df8:	b09f      	sub	sp, #124	; 0x7c
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0a:	68d9      	ldr	r1, [r3, #12]
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	ea40 0301 	orr.w	r3, r0, r1
 8001e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e38:	f021 010c 	bic.w	r1, r1, #12
 8001e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e42:	430b      	orrs	r3, r1
 8001e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e52:	6999      	ldr	r1, [r3, #24]
 8001e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	ea40 0301 	orr.w	r3, r0, r1
 8001e5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <UART_SetConfig+0x204>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d004      	beq.n	8001e72 <UART_SetConfig+0x7e>
 8001e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <UART_SetConfig+0x208>)
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d103      	bne.n	8001e7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e72:	f7ff fd3b 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 8001e76:	6778      	str	r0, [r7, #116]	; 0x74
 8001e78:	e002      	b.n	8001e80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e7a:	f7ff fd23 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e88:	f040 80bc 	bne.w	8002004 <UART_SetConfig+0x210>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8e:	461c      	mov	r4, r3
 8001e90:	f04f 0500 	mov.w	r5, #0
 8001e94:	4622      	mov	r2, r4
 8001e96:	462b      	mov	r3, r5
 8001e98:	1891      	adds	r1, r2, r2
 8001e9a:	6439      	str	r1, [r7, #64]	; 0x40
 8001e9c:	415b      	adcs	r3, r3
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ea4:	1912      	adds	r2, r2, r4
 8001ea6:	eb45 0303 	adc.w	r3, r5, r3
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	00d9      	lsls	r1, r3, #3
 8001eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eb8:	00d0      	lsls	r0, r2, #3
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	1911      	adds	r1, r2, r4
 8001ec0:	6639      	str	r1, [r7, #96]	; 0x60
 8001ec2:	416b      	adcs	r3, r5
 8001ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	1891      	adds	r1, r2, r2
 8001ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ed4:	415b      	adcs	r3, r3
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ee0:	f7fe fe6a 	bl	8000bb8 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <UART_SetConfig+0x20c>)
 8001eea:	fba3 2302 	umull	r2, r3, r3, r2
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	011e      	lsls	r6, r3, #4
 8001ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef4:	461c      	mov	r4, r3
 8001ef6:	f04f 0500 	mov.w	r5, #0
 8001efa:	4622      	mov	r2, r4
 8001efc:	462b      	mov	r3, r5
 8001efe:	1891      	adds	r1, r2, r2
 8001f00:	6339      	str	r1, [r7, #48]	; 0x30
 8001f02:	415b      	adcs	r3, r3
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
 8001f06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0a:	1912      	adds	r2, r2, r4
 8001f0c:	eb45 0303 	adc.w	r3, r5, r3
 8001f10:	f04f 0000 	mov.w	r0, #0
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	00d9      	lsls	r1, r3, #3
 8001f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f1e:	00d0      	lsls	r0, r2, #3
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	1911      	adds	r1, r2, r4
 8001f26:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f28:	416b      	adcs	r3, r5
 8001f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	461a      	mov	r2, r3
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	1891      	adds	r1, r2, r2
 8001f38:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f3a:	415b      	adcs	r3, r3
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f46:	f7fe fe37 	bl	8000bb8 <__aeabi_uldivmod>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <UART_SetConfig+0x20c>)
 8001f50:	fba3 1302 	umull	r1, r3, r3, r2
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	2164      	movs	r1, #100	; 0x64
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	3332      	adds	r3, #50	; 0x32
 8001f62:	4a27      	ldr	r2, [pc, #156]	; (8002000 <UART_SetConfig+0x20c>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f70:	441e      	add	r6, r3
 8001f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f74:	4618      	mov	r0, r3
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	1894      	adds	r4, r2, r2
 8001f80:	623c      	str	r4, [r7, #32]
 8001f82:	415b      	adcs	r3, r3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f8a:	1812      	adds	r2, r2, r0
 8001f8c:	eb41 0303 	adc.w	r3, r1, r3
 8001f90:	f04f 0400 	mov.w	r4, #0
 8001f94:	f04f 0500 	mov.w	r5, #0
 8001f98:	00dd      	lsls	r5, r3, #3
 8001f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f9e:	00d4      	lsls	r4, r2, #3
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	1814      	adds	r4, r2, r0
 8001fa6:	653c      	str	r4, [r7, #80]	; 0x50
 8001fa8:	414b      	adcs	r3, r1
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
 8001fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	1891      	adds	r1, r2, r2
 8001fb8:	61b9      	str	r1, [r7, #24]
 8001fba:	415b      	adcs	r3, r3
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001fc6:	f7fe fdf7 	bl	8000bb8 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <UART_SetConfig+0x20c>)
 8001fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	2164      	movs	r1, #100	; 0x64
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	3332      	adds	r3, #50	; 0x32
 8001fe2:	4a07      	ldr	r2, [pc, #28]	; (8002000 <UART_SetConfig+0x20c>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	f003 0207 	and.w	r2, r3, #7
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4432      	add	r2, r6
 8001ff4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ff6:	e0bf      	b.n	8002178 <UART_SetConfig+0x384>
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40011400 	.word	0x40011400
 8002000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002006:	461c      	mov	r4, r3
 8002008:	f04f 0500 	mov.w	r5, #0
 800200c:	4622      	mov	r2, r4
 800200e:	462b      	mov	r3, r5
 8002010:	1891      	adds	r1, r2, r2
 8002012:	6139      	str	r1, [r7, #16]
 8002014:	415b      	adcs	r3, r3
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800201c:	1912      	adds	r2, r2, r4
 800201e:	eb45 0303 	adc.w	r3, r5, r3
 8002022:	f04f 0000 	mov.w	r0, #0
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	00d9      	lsls	r1, r3, #3
 800202c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002030:	00d0      	lsls	r0, r2, #3
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	eb12 0804 	adds.w	r8, r2, r4
 800203a:	eb43 0905 	adc.w	r9, r3, r5
 800203e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	f04f 0100 	mov.w	r1, #0
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	008b      	lsls	r3, r1, #2
 8002052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002056:	0082      	lsls	r2, r0, #2
 8002058:	4640      	mov	r0, r8
 800205a:	4649      	mov	r1, r9
 800205c:	f7fe fdac 	bl	8000bb8 <__aeabi_uldivmod>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4b47      	ldr	r3, [pc, #284]	; (8002184 <UART_SetConfig+0x390>)
 8002066:	fba3 2302 	umull	r2, r3, r3, r2
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	011e      	lsls	r6, r3, #4
 800206e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002070:	4618      	mov	r0, r3
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	1894      	adds	r4, r2, r2
 800207c:	60bc      	str	r4, [r7, #8]
 800207e:	415b      	adcs	r3, r3
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002086:	1812      	adds	r2, r2, r0
 8002088:	eb41 0303 	adc.w	r3, r1, r3
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	f04f 0500 	mov.w	r5, #0
 8002094:	00dd      	lsls	r5, r3, #3
 8002096:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800209a:	00d4      	lsls	r4, r2, #3
 800209c:	4622      	mov	r2, r4
 800209e:	462b      	mov	r3, r5
 80020a0:	1814      	adds	r4, r2, r0
 80020a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80020a4:	414b      	adcs	r3, r1
 80020a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	008b      	lsls	r3, r1, #2
 80020bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020c0:	0082      	lsls	r2, r0, #2
 80020c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020c6:	f7fe fd77 	bl	8000bb8 <__aeabi_uldivmod>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <UART_SetConfig+0x390>)
 80020d0:	fba3 1302 	umull	r1, r3, r3, r2
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	2164      	movs	r1, #100	; 0x64
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	3332      	adds	r3, #50	; 0x32
 80020e2:	4a28      	ldr	r2, [pc, #160]	; (8002184 <UART_SetConfig+0x390>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ee:	441e      	add	r6, r3
 80020f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f2:	4618      	mov	r0, r3
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	1894      	adds	r4, r2, r2
 80020fe:	603c      	str	r4, [r7, #0]
 8002100:	415b      	adcs	r3, r3
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002108:	1812      	adds	r2, r2, r0
 800210a:	eb41 0303 	adc.w	r3, r1, r3
 800210e:	f04f 0400 	mov.w	r4, #0
 8002112:	f04f 0500 	mov.w	r5, #0
 8002116:	00dd      	lsls	r5, r3, #3
 8002118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800211c:	00d4      	lsls	r4, r2, #3
 800211e:	4622      	mov	r2, r4
 8002120:	462b      	mov	r3, r5
 8002122:	eb12 0a00 	adds.w	sl, r2, r0
 8002126:	eb43 0b01 	adc.w	fp, r3, r1
 800212a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	008b      	lsls	r3, r1, #2
 800213e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002142:	0082      	lsls	r2, r0, #2
 8002144:	4650      	mov	r0, sl
 8002146:	4659      	mov	r1, fp
 8002148:	f7fe fd36 	bl	8000bb8 <__aeabi_uldivmod>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <UART_SetConfig+0x390>)
 8002152:	fba3 1302 	umull	r1, r3, r3, r2
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2164      	movs	r1, #100	; 0x64
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	3332      	adds	r3, #50	; 0x32
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <UART_SetConfig+0x390>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4432      	add	r2, r6
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	377c      	adds	r7, #124	; 0x7c
 800217c:	46bd      	mov	sp, r7
 800217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002182:	bf00      	nop
 8002184:	51eb851f 	.word	0x51eb851f

08002188 <exti_buttonConfig>:

/*
 * @brief Push button Exti configuration
 */
void exti_buttonConfig(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitStruct = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <exti_buttonConfig+0x64>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <exti_buttonConfig+0x64>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <exti_buttonConfig+0x64>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
	gpioInitStruct.Pin = GPIO_PIN_0;
 80021b8:	2301      	movs	r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
	gpioInitStruct.Mode = GPIO_MODE_IT_RISING;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <exti_buttonConfig+0x68>)
 80021be:	60bb      	str	r3, [r7, #8]
	gpioInitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
	gpioInitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gpioInitStruct);
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <exti_buttonConfig+0x6c>)
 80021ce:	f7ff f9bb 	bl	8001548 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	2006      	movs	r0, #6
 80021d8:	f7ff f97f 	bl	80014da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021dc:	2006      	movs	r0, #6
 80021de:	f7ff f998 	bl	8001512 <HAL_NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	10110000 	.word	0x10110000
 80021f4:	40020000 	.word	0x40020000

080021f8 <gpio_LED_config>:

/*
 * @brief GPIO configuration
 */
void gpio_LED_config(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
	//LED GREEEN - PD12
	GPIO_InitTypeDef gpioInitStruct = {0};
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <gpio_LED_config+0x54>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <gpio_LED_config+0x54>)
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	6313      	str	r3, [r2, #48]	; 0x30
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <gpio_LED_config+0x54>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
	gpioInitStruct.Pin = GPIO_PIN_12;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	607b      	str	r3, [r7, #4]
	gpioInitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
	gpioInitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
	gpioInitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002236:	2302      	movs	r3, #2
 8002238:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &gpioInitStruct);
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4804      	ldr	r0, [pc, #16]	; (8002250 <gpio_LED_config+0x58>)
 8002240:	f7ff f982 	bl	8001548 <HAL_GPIO_Init>
}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40020c00 	.word	0x40020c00

08002254 <gpio_LED_toggle>:
void gpio_LED_write(_Bool state)
{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, state);
}
void gpio_LED_toggle(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <gpio_LED_toggle+0x14>)
 800225e:	f7ff faf5 	bl	800184c <HAL_GPIO_TogglePin>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020c00 	.word	0x40020c00

0800226c <uart_UART1_GPIO_config>:

/*
 * @brief UART1 GPIO Config
 */
void uart_UART1_GPIO_config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
	//PA9-TX
	//PA10-RX

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]

	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b23      	ldr	r3, [pc, #140]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <uart_UART1_GPIO_config+0xb4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
	    /**USART1 GPIO Configuration
	    PA15     ------> USART1_TX
	    PB7     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022da:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e8:	2307      	movs	r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	4619      	mov	r1, r3
 80022f2:	480c      	ldr	r0, [pc, #48]	; (8002324 <uart_UART1_GPIO_config+0xb8>)
 80022f4:	f7ff f928 	bl	8001548 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002308:	2307      	movs	r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	4619      	mov	r1, r3
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <uart_UART1_GPIO_config+0xbc>)
 8002314:	f7ff f918 	bl	8001548 <HAL_GPIO_Init>

	  /* USER CODE BEGIN USART1_MspInit 1 */

	  /* USER CODE END USART1_MspInit 1 */

}
 8002318:	bf00      	nop
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400

0800232c <uart_UAR1_config>:

/*
 * @brief UART1 Config
 */
_Bool uart_UAR1_config()
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	  /* USER CODE END USART1_Init 0 */

	  /* USER CODE BEGIN USART1_Init 1 */

	  /* USER CODE END USART1_Init 1 */
	  huart1.Instance = USART1;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <uart_UAR1_config+0x4c>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <uart_UAR1_config+0x50>)
 8002334:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 9600;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <uart_UAR1_config+0x4c>)
 8002338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800233c:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <uart_UAR1_config+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <uart_UAR1_config+0x4c>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <uart_UAR1_config+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <uart_UAR1_config+0x4c>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <uart_UAR1_config+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <uart_UAR1_config+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <uart_UAR1_config+0x4c>)
 8002364:	f7ff fc14 	bl	8001b90 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <uart_UAR1_config+0x46>
	  {
	    Error_Handler();
 800236e:	f7fe fde1 	bl	8000f34 <Error_Handler>
	  }
	  /* USER CODE BEGIN USART1_Init 2 */
	  return true;
 8002372:	2301      	movs	r3, #1
	  /* USER CODE END USART1_Init 2 */

}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002e4 	.word	0x200002e4
 800237c:	40011000 	.word	0x40011000

08002380 <__errno>:
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <__errno+0x8>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000000c 	.word	0x2000000c

0800238c <__libc_init_array>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	4d0d      	ldr	r5, [pc, #52]	; (80023c4 <__libc_init_array+0x38>)
 8002390:	4c0d      	ldr	r4, [pc, #52]	; (80023c8 <__libc_init_array+0x3c>)
 8002392:	1b64      	subs	r4, r4, r5
 8002394:	10a4      	asrs	r4, r4, #2
 8002396:	2600      	movs	r6, #0
 8002398:	42a6      	cmp	r6, r4
 800239a:	d109      	bne.n	80023b0 <__libc_init_array+0x24>
 800239c:	4d0b      	ldr	r5, [pc, #44]	; (80023cc <__libc_init_array+0x40>)
 800239e:	4c0c      	ldr	r4, [pc, #48]	; (80023d0 <__libc_init_array+0x44>)
 80023a0:	f002 fd54 	bl	8004e4c <_init>
 80023a4:	1b64      	subs	r4, r4, r5
 80023a6:	10a4      	asrs	r4, r4, #2
 80023a8:	2600      	movs	r6, #0
 80023aa:	42a6      	cmp	r6, r4
 80023ac:	d105      	bne.n	80023ba <__libc_init_array+0x2e>
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b4:	4798      	blx	r3
 80023b6:	3601      	adds	r6, #1
 80023b8:	e7ee      	b.n	8002398 <__libc_init_array+0xc>
 80023ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80023be:	4798      	blx	r3
 80023c0:	3601      	adds	r6, #1
 80023c2:	e7f2      	b.n	80023aa <__libc_init_array+0x1e>
 80023c4:	08005274 	.word	0x08005274
 80023c8:	08005274 	.word	0x08005274
 80023cc:	08005274 	.word	0x08005274
 80023d0:	08005278 	.word	0x08005278

080023d4 <memset>:
 80023d4:	4402      	add	r2, r0
 80023d6:	4603      	mov	r3, r0
 80023d8:	4293      	cmp	r3, r2
 80023da:	d100      	bne.n	80023de <memset+0xa>
 80023dc:	4770      	bx	lr
 80023de:	f803 1b01 	strb.w	r1, [r3], #1
 80023e2:	e7f9      	b.n	80023d8 <memset+0x4>

080023e4 <__cvt>:
 80023e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	461f      	mov	r7, r3
 80023ee:	4614      	mov	r4, r2
 80023f0:	bfb8      	it	lt
 80023f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80023f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80023f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80023fa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80023fe:	bfb6      	itet	lt
 8002400:	461f      	movlt	r7, r3
 8002402:	2300      	movge	r3, #0
 8002404:	232d      	movlt	r3, #45	; 0x2d
 8002406:	7013      	strb	r3, [r2, #0]
 8002408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800240a:	f023 0820 	bic.w	r8, r3, #32
 800240e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002412:	d005      	beq.n	8002420 <__cvt+0x3c>
 8002414:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002418:	d100      	bne.n	800241c <__cvt+0x38>
 800241a:	3501      	adds	r5, #1
 800241c:	2302      	movs	r3, #2
 800241e:	e000      	b.n	8002422 <__cvt+0x3e>
 8002420:	2303      	movs	r3, #3
 8002422:	aa07      	add	r2, sp, #28
 8002424:	9204      	str	r2, [sp, #16]
 8002426:	aa06      	add	r2, sp, #24
 8002428:	e9cd a202 	strd	sl, r2, [sp, #8]
 800242c:	e9cd 3500 	strd	r3, r5, [sp]
 8002430:	4622      	mov	r2, r4
 8002432:	463b      	mov	r3, r7
 8002434:	f000 fdf4 	bl	8003020 <_dtoa_r>
 8002438:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800243c:	4606      	mov	r6, r0
 800243e:	d102      	bne.n	8002446 <__cvt+0x62>
 8002440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002442:	07db      	lsls	r3, r3, #31
 8002444:	d522      	bpl.n	800248c <__cvt+0xa8>
 8002446:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800244a:	eb06 0905 	add.w	r9, r6, r5
 800244e:	d110      	bne.n	8002472 <__cvt+0x8e>
 8002450:	7833      	ldrb	r3, [r6, #0]
 8002452:	2b30      	cmp	r3, #48	; 0x30
 8002454:	d10a      	bne.n	800246c <__cvt+0x88>
 8002456:	2200      	movs	r2, #0
 8002458:	2300      	movs	r3, #0
 800245a:	4620      	mov	r0, r4
 800245c:	4639      	mov	r1, r7
 800245e:	f7fe fb3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002462:	b918      	cbnz	r0, 800246c <__cvt+0x88>
 8002464:	f1c5 0501 	rsb	r5, r5, #1
 8002468:	f8ca 5000 	str.w	r5, [sl]
 800246c:	f8da 3000 	ldr.w	r3, [sl]
 8002470:	4499      	add	r9, r3
 8002472:	2200      	movs	r2, #0
 8002474:	2300      	movs	r3, #0
 8002476:	4620      	mov	r0, r4
 8002478:	4639      	mov	r1, r7
 800247a:	f7fe fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800247e:	b108      	cbz	r0, 8002484 <__cvt+0xa0>
 8002480:	f8cd 901c 	str.w	r9, [sp, #28]
 8002484:	2230      	movs	r2, #48	; 0x30
 8002486:	9b07      	ldr	r3, [sp, #28]
 8002488:	454b      	cmp	r3, r9
 800248a:	d307      	bcc.n	800249c <__cvt+0xb8>
 800248c:	9b07      	ldr	r3, [sp, #28]
 800248e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002490:	1b9b      	subs	r3, r3, r6
 8002492:	4630      	mov	r0, r6
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	b008      	add	sp, #32
 8002498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800249c:	1c59      	adds	r1, r3, #1
 800249e:	9107      	str	r1, [sp, #28]
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e7f0      	b.n	8002486 <__cvt+0xa2>

080024a4 <__exponent>:
 80024a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024a6:	4603      	mov	r3, r0
 80024a8:	2900      	cmp	r1, #0
 80024aa:	bfb8      	it	lt
 80024ac:	4249      	neglt	r1, r1
 80024ae:	f803 2b02 	strb.w	r2, [r3], #2
 80024b2:	bfb4      	ite	lt
 80024b4:	222d      	movlt	r2, #45	; 0x2d
 80024b6:	222b      	movge	r2, #43	; 0x2b
 80024b8:	2909      	cmp	r1, #9
 80024ba:	7042      	strb	r2, [r0, #1]
 80024bc:	dd2a      	ble.n	8002514 <__exponent+0x70>
 80024be:	f10d 0407 	add.w	r4, sp, #7
 80024c2:	46a4      	mov	ip, r4
 80024c4:	270a      	movs	r7, #10
 80024c6:	46a6      	mov	lr, r4
 80024c8:	460a      	mov	r2, r1
 80024ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80024ce:	fb07 1516 	mls	r5, r7, r6, r1
 80024d2:	3530      	adds	r5, #48	; 0x30
 80024d4:	2a63      	cmp	r2, #99	; 0x63
 80024d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80024da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80024de:	4631      	mov	r1, r6
 80024e0:	dcf1      	bgt.n	80024c6 <__exponent+0x22>
 80024e2:	3130      	adds	r1, #48	; 0x30
 80024e4:	f1ae 0502 	sub.w	r5, lr, #2
 80024e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80024ec:	1c44      	adds	r4, r0, #1
 80024ee:	4629      	mov	r1, r5
 80024f0:	4561      	cmp	r1, ip
 80024f2:	d30a      	bcc.n	800250a <__exponent+0x66>
 80024f4:	f10d 0209 	add.w	r2, sp, #9
 80024f8:	eba2 020e 	sub.w	r2, r2, lr
 80024fc:	4565      	cmp	r5, ip
 80024fe:	bf88      	it	hi
 8002500:	2200      	movhi	r2, #0
 8002502:	4413      	add	r3, r2
 8002504:	1a18      	subs	r0, r3, r0
 8002506:	b003      	add	sp, #12
 8002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800250e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002512:	e7ed      	b.n	80024f0 <__exponent+0x4c>
 8002514:	2330      	movs	r3, #48	; 0x30
 8002516:	3130      	adds	r1, #48	; 0x30
 8002518:	7083      	strb	r3, [r0, #2]
 800251a:	70c1      	strb	r1, [r0, #3]
 800251c:	1d03      	adds	r3, r0, #4
 800251e:	e7f1      	b.n	8002504 <__exponent+0x60>

08002520 <_printf_float>:
 8002520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002524:	b091      	sub	sp, #68	; 0x44
 8002526:	460c      	mov	r4, r1
 8002528:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800252c:	4616      	mov	r6, r2
 800252e:	461f      	mov	r7, r3
 8002530:	4605      	mov	r5, r0
 8002532:	f001 fd1b 	bl	8003f6c <_localeconv_r>
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	9309      	str	r3, [sp, #36]	; 0x24
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fe50 	bl	80001e0 <strlen>
 8002540:	2300      	movs	r3, #0
 8002542:	930e      	str	r3, [sp, #56]	; 0x38
 8002544:	f8d8 3000 	ldr.w	r3, [r8]
 8002548:	900a      	str	r0, [sp, #40]	; 0x28
 800254a:	3307      	adds	r3, #7
 800254c:	f023 0307 	bic.w	r3, r3, #7
 8002550:	f103 0208 	add.w	r2, r3, #8
 8002554:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002558:	f8d4 b000 	ldr.w	fp, [r4]
 800255c:	f8c8 2000 	str.w	r2, [r8]
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002568:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800256c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002570:	930b      	str	r3, [sp, #44]	; 0x2c
 8002572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002574:	4b9c      	ldr	r3, [pc, #624]	; (80027e8 <_printf_float+0x2c8>)
 8002576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800257a:	4640      	mov	r0, r8
 800257c:	f7fe fade 	bl	8000b3c <__aeabi_dcmpun>
 8002580:	bb70      	cbnz	r0, 80025e0 <_printf_float+0xc0>
 8002582:	4b99      	ldr	r3, [pc, #612]	; (80027e8 <_printf_float+0x2c8>)
 8002584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258a:	4640      	mov	r0, r8
 800258c:	f7fe fab8 	bl	8000b00 <__aeabi_dcmple>
 8002590:	bb30      	cbnz	r0, 80025e0 <_printf_float+0xc0>
 8002592:	2200      	movs	r2, #0
 8002594:	2300      	movs	r3, #0
 8002596:	4640      	mov	r0, r8
 8002598:	4651      	mov	r1, sl
 800259a:	f7fe faa7 	bl	8000aec <__aeabi_dcmplt>
 800259e:	b110      	cbz	r0, 80025a6 <_printf_float+0x86>
 80025a0:	232d      	movs	r3, #45	; 0x2d
 80025a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025a6:	4b91      	ldr	r3, [pc, #580]	; (80027ec <_printf_float+0x2cc>)
 80025a8:	4891      	ldr	r0, [pc, #580]	; (80027f0 <_printf_float+0x2d0>)
 80025aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80025ae:	bf94      	ite	ls
 80025b0:	4698      	movls	r8, r3
 80025b2:	4680      	movhi	r8, r0
 80025b4:	2303      	movs	r3, #3
 80025b6:	6123      	str	r3, [r4, #16]
 80025b8:	f02b 0304 	bic.w	r3, fp, #4
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	f04f 0a00 	mov.w	sl, #0
 80025c2:	9700      	str	r7, [sp, #0]
 80025c4:	4633      	mov	r3, r6
 80025c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80025c8:	4621      	mov	r1, r4
 80025ca:	4628      	mov	r0, r5
 80025cc:	f000 f9d2 	bl	8002974 <_printf_common>
 80025d0:	3001      	adds	r0, #1
 80025d2:	f040 808f 	bne.w	80026f4 <_printf_float+0x1d4>
 80025d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025da:	b011      	add	sp, #68	; 0x44
 80025dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e0:	4642      	mov	r2, r8
 80025e2:	4653      	mov	r3, sl
 80025e4:	4640      	mov	r0, r8
 80025e6:	4651      	mov	r1, sl
 80025e8:	f7fe faa8 	bl	8000b3c <__aeabi_dcmpun>
 80025ec:	b140      	cbz	r0, 8002600 <_printf_float+0xe0>
 80025ee:	f1ba 0f00 	cmp.w	sl, #0
 80025f2:	bfbc      	itt	lt
 80025f4:	232d      	movlt	r3, #45	; 0x2d
 80025f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80025fa:	487e      	ldr	r0, [pc, #504]	; (80027f4 <_printf_float+0x2d4>)
 80025fc:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <_printf_float+0x2d8>)
 80025fe:	e7d4      	b.n	80025aa <_printf_float+0x8a>
 8002600:	6863      	ldr	r3, [r4, #4]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002608:	d142      	bne.n	8002690 <_printf_float+0x170>
 800260a:	2306      	movs	r3, #6
 800260c:	6063      	str	r3, [r4, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	9206      	str	r2, [sp, #24]
 8002612:	aa0e      	add	r2, sp, #56	; 0x38
 8002614:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002618:	aa0d      	add	r2, sp, #52	; 0x34
 800261a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800261e:	9203      	str	r2, [sp, #12]
 8002620:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002624:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4642      	mov	r2, r8
 8002630:	4653      	mov	r3, sl
 8002632:	4628      	mov	r0, r5
 8002634:	910b      	str	r1, [sp, #44]	; 0x2c
 8002636:	f7ff fed5 	bl	80023e4 <__cvt>
 800263a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800263c:	2947      	cmp	r1, #71	; 0x47
 800263e:	4680      	mov	r8, r0
 8002640:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002642:	d108      	bne.n	8002656 <_printf_float+0x136>
 8002644:	1cc8      	adds	r0, r1, #3
 8002646:	db02      	blt.n	800264e <_printf_float+0x12e>
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	4299      	cmp	r1, r3
 800264c:	dd40      	ble.n	80026d0 <_printf_float+0x1b0>
 800264e:	f1a9 0902 	sub.w	r9, r9, #2
 8002652:	fa5f f989 	uxtb.w	r9, r9
 8002656:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800265a:	d81f      	bhi.n	800269c <_printf_float+0x17c>
 800265c:	3901      	subs	r1, #1
 800265e:	464a      	mov	r2, r9
 8002660:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002664:	910d      	str	r1, [sp, #52]	; 0x34
 8002666:	f7ff ff1d 	bl	80024a4 <__exponent>
 800266a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800266c:	1813      	adds	r3, r2, r0
 800266e:	2a01      	cmp	r2, #1
 8002670:	4682      	mov	sl, r0
 8002672:	6123      	str	r3, [r4, #16]
 8002674:	dc02      	bgt.n	800267c <_printf_float+0x15c>
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	07d2      	lsls	r2, r2, #31
 800267a:	d501      	bpl.n	8002680 <_printf_float+0x160>
 800267c:	3301      	adds	r3, #1
 800267e:	6123      	str	r3, [r4, #16]
 8002680:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002684:	2b00      	cmp	r3, #0
 8002686:	d09c      	beq.n	80025c2 <_printf_float+0xa2>
 8002688:	232d      	movs	r3, #45	; 0x2d
 800268a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800268e:	e798      	b.n	80025c2 <_printf_float+0xa2>
 8002690:	2947      	cmp	r1, #71	; 0x47
 8002692:	d1bc      	bne.n	800260e <_printf_float+0xee>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ba      	bne.n	800260e <_printf_float+0xee>
 8002698:	2301      	movs	r3, #1
 800269a:	e7b7      	b.n	800260c <_printf_float+0xec>
 800269c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80026a0:	d118      	bne.n	80026d4 <_printf_float+0x1b4>
 80026a2:	2900      	cmp	r1, #0
 80026a4:	6863      	ldr	r3, [r4, #4]
 80026a6:	dd0b      	ble.n	80026c0 <_printf_float+0x1a0>
 80026a8:	6121      	str	r1, [r4, #16]
 80026aa:	b913      	cbnz	r3, 80026b2 <_printf_float+0x192>
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	07d0      	lsls	r0, r2, #31
 80026b0:	d502      	bpl.n	80026b8 <_printf_float+0x198>
 80026b2:	3301      	adds	r3, #1
 80026b4:	440b      	add	r3, r1
 80026b6:	6123      	str	r3, [r4, #16]
 80026b8:	65a1      	str	r1, [r4, #88]	; 0x58
 80026ba:	f04f 0a00 	mov.w	sl, #0
 80026be:	e7df      	b.n	8002680 <_printf_float+0x160>
 80026c0:	b913      	cbnz	r3, 80026c8 <_printf_float+0x1a8>
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	07d2      	lsls	r2, r2, #31
 80026c6:	d501      	bpl.n	80026cc <_printf_float+0x1ac>
 80026c8:	3302      	adds	r3, #2
 80026ca:	e7f4      	b.n	80026b6 <_printf_float+0x196>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e7f2      	b.n	80026b6 <_printf_float+0x196>
 80026d0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80026d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026d6:	4299      	cmp	r1, r3
 80026d8:	db05      	blt.n	80026e6 <_printf_float+0x1c6>
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	6121      	str	r1, [r4, #16]
 80026de:	07d8      	lsls	r0, r3, #31
 80026e0:	d5ea      	bpl.n	80026b8 <_printf_float+0x198>
 80026e2:	1c4b      	adds	r3, r1, #1
 80026e4:	e7e7      	b.n	80026b6 <_printf_float+0x196>
 80026e6:	2900      	cmp	r1, #0
 80026e8:	bfd4      	ite	le
 80026ea:	f1c1 0202 	rsble	r2, r1, #2
 80026ee:	2201      	movgt	r2, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	e7e0      	b.n	80026b6 <_printf_float+0x196>
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	055a      	lsls	r2, r3, #21
 80026f8:	d407      	bmi.n	800270a <_printf_float+0x1ea>
 80026fa:	6923      	ldr	r3, [r4, #16]
 80026fc:	4642      	mov	r2, r8
 80026fe:	4631      	mov	r1, r6
 8002700:	4628      	mov	r0, r5
 8002702:	47b8      	blx	r7
 8002704:	3001      	adds	r0, #1
 8002706:	d12b      	bne.n	8002760 <_printf_float+0x240>
 8002708:	e765      	b.n	80025d6 <_printf_float+0xb6>
 800270a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800270e:	f240 80dc 	bls.w	80028ca <_printf_float+0x3aa>
 8002712:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002716:	2200      	movs	r2, #0
 8002718:	2300      	movs	r3, #0
 800271a:	f7fe f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800271e:	2800      	cmp	r0, #0
 8002720:	d033      	beq.n	800278a <_printf_float+0x26a>
 8002722:	4a36      	ldr	r2, [pc, #216]	; (80027fc <_printf_float+0x2dc>)
 8002724:	2301      	movs	r3, #1
 8002726:	4631      	mov	r1, r6
 8002728:	4628      	mov	r0, r5
 800272a:	47b8      	blx	r7
 800272c:	3001      	adds	r0, #1
 800272e:	f43f af52 	beq.w	80025d6 <_printf_float+0xb6>
 8002732:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002736:	429a      	cmp	r2, r3
 8002738:	db02      	blt.n	8002740 <_printf_float+0x220>
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	07d8      	lsls	r0, r3, #31
 800273e:	d50f      	bpl.n	8002760 <_printf_float+0x240>
 8002740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002744:	4631      	mov	r1, r6
 8002746:	4628      	mov	r0, r5
 8002748:	47b8      	blx	r7
 800274a:	3001      	adds	r0, #1
 800274c:	f43f af43 	beq.w	80025d6 <_printf_float+0xb6>
 8002750:	f04f 0800 	mov.w	r8, #0
 8002754:	f104 091a 	add.w	r9, r4, #26
 8002758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800275a:	3b01      	subs	r3, #1
 800275c:	4543      	cmp	r3, r8
 800275e:	dc09      	bgt.n	8002774 <_printf_float+0x254>
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	079b      	lsls	r3, r3, #30
 8002764:	f100 8101 	bmi.w	800296a <_printf_float+0x44a>
 8002768:	68e0      	ldr	r0, [r4, #12]
 800276a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800276c:	4298      	cmp	r0, r3
 800276e:	bfb8      	it	lt
 8002770:	4618      	movlt	r0, r3
 8002772:	e732      	b.n	80025da <_printf_float+0xba>
 8002774:	2301      	movs	r3, #1
 8002776:	464a      	mov	r2, r9
 8002778:	4631      	mov	r1, r6
 800277a:	4628      	mov	r0, r5
 800277c:	47b8      	blx	r7
 800277e:	3001      	adds	r0, #1
 8002780:	f43f af29 	beq.w	80025d6 <_printf_float+0xb6>
 8002784:	f108 0801 	add.w	r8, r8, #1
 8002788:	e7e6      	b.n	8002758 <_printf_float+0x238>
 800278a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800278c:	2b00      	cmp	r3, #0
 800278e:	dc37      	bgt.n	8002800 <_printf_float+0x2e0>
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <_printf_float+0x2dc>)
 8002792:	2301      	movs	r3, #1
 8002794:	4631      	mov	r1, r6
 8002796:	4628      	mov	r0, r5
 8002798:	47b8      	blx	r7
 800279a:	3001      	adds	r0, #1
 800279c:	f43f af1b 	beq.w	80025d6 <_printf_float+0xb6>
 80027a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80027a4:	4313      	orrs	r3, r2
 80027a6:	d102      	bne.n	80027ae <_printf_float+0x28e>
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	07d9      	lsls	r1, r3, #31
 80027ac:	d5d8      	bpl.n	8002760 <_printf_float+0x240>
 80027ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027b2:	4631      	mov	r1, r6
 80027b4:	4628      	mov	r0, r5
 80027b6:	47b8      	blx	r7
 80027b8:	3001      	adds	r0, #1
 80027ba:	f43f af0c 	beq.w	80025d6 <_printf_float+0xb6>
 80027be:	f04f 0900 	mov.w	r9, #0
 80027c2:	f104 0a1a 	add.w	sl, r4, #26
 80027c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027c8:	425b      	negs	r3, r3
 80027ca:	454b      	cmp	r3, r9
 80027cc:	dc01      	bgt.n	80027d2 <_printf_float+0x2b2>
 80027ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027d0:	e794      	b.n	80026fc <_printf_float+0x1dc>
 80027d2:	2301      	movs	r3, #1
 80027d4:	4652      	mov	r2, sl
 80027d6:	4631      	mov	r1, r6
 80027d8:	4628      	mov	r0, r5
 80027da:	47b8      	blx	r7
 80027dc:	3001      	adds	r0, #1
 80027de:	f43f aefa 	beq.w	80025d6 <_printf_float+0xb6>
 80027e2:	f109 0901 	add.w	r9, r9, #1
 80027e6:	e7ee      	b.n	80027c6 <_printf_float+0x2a6>
 80027e8:	7fefffff 	.word	0x7fefffff
 80027ec:	08004e90 	.word	0x08004e90
 80027f0:	08004e94 	.word	0x08004e94
 80027f4:	08004e9c 	.word	0x08004e9c
 80027f8:	08004e98 	.word	0x08004e98
 80027fc:	08004ea0 	.word	0x08004ea0
 8002800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002804:	429a      	cmp	r2, r3
 8002806:	bfa8      	it	ge
 8002808:	461a      	movge	r2, r3
 800280a:	2a00      	cmp	r2, #0
 800280c:	4691      	mov	r9, r2
 800280e:	dc37      	bgt.n	8002880 <_printf_float+0x360>
 8002810:	f04f 0b00 	mov.w	fp, #0
 8002814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002818:	f104 021a 	add.w	r2, r4, #26
 800281c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002820:	ebaa 0309 	sub.w	r3, sl, r9
 8002824:	455b      	cmp	r3, fp
 8002826:	dc33      	bgt.n	8002890 <_printf_float+0x370>
 8002828:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800282c:	429a      	cmp	r2, r3
 800282e:	db3b      	blt.n	80028a8 <_printf_float+0x388>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	07da      	lsls	r2, r3, #31
 8002834:	d438      	bmi.n	80028a8 <_printf_float+0x388>
 8002836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002838:	990d      	ldr	r1, [sp, #52]	; 0x34
 800283a:	eba2 030a 	sub.w	r3, r2, sl
 800283e:	eba2 0901 	sub.w	r9, r2, r1
 8002842:	4599      	cmp	r9, r3
 8002844:	bfa8      	it	ge
 8002846:	4699      	movge	r9, r3
 8002848:	f1b9 0f00 	cmp.w	r9, #0
 800284c:	dc34      	bgt.n	80028b8 <_printf_float+0x398>
 800284e:	f04f 0800 	mov.w	r8, #0
 8002852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002856:	f104 0a1a 	add.w	sl, r4, #26
 800285a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	eba3 0309 	sub.w	r3, r3, r9
 8002864:	4543      	cmp	r3, r8
 8002866:	f77f af7b 	ble.w	8002760 <_printf_float+0x240>
 800286a:	2301      	movs	r3, #1
 800286c:	4652      	mov	r2, sl
 800286e:	4631      	mov	r1, r6
 8002870:	4628      	mov	r0, r5
 8002872:	47b8      	blx	r7
 8002874:	3001      	adds	r0, #1
 8002876:	f43f aeae 	beq.w	80025d6 <_printf_float+0xb6>
 800287a:	f108 0801 	add.w	r8, r8, #1
 800287e:	e7ec      	b.n	800285a <_printf_float+0x33a>
 8002880:	4613      	mov	r3, r2
 8002882:	4631      	mov	r1, r6
 8002884:	4642      	mov	r2, r8
 8002886:	4628      	mov	r0, r5
 8002888:	47b8      	blx	r7
 800288a:	3001      	adds	r0, #1
 800288c:	d1c0      	bne.n	8002810 <_printf_float+0x2f0>
 800288e:	e6a2      	b.n	80025d6 <_printf_float+0xb6>
 8002890:	2301      	movs	r3, #1
 8002892:	4631      	mov	r1, r6
 8002894:	4628      	mov	r0, r5
 8002896:	920b      	str	r2, [sp, #44]	; 0x2c
 8002898:	47b8      	blx	r7
 800289a:	3001      	adds	r0, #1
 800289c:	f43f ae9b 	beq.w	80025d6 <_printf_float+0xb6>
 80028a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028a2:	f10b 0b01 	add.w	fp, fp, #1
 80028a6:	e7b9      	b.n	800281c <_printf_float+0x2fc>
 80028a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028ac:	4631      	mov	r1, r6
 80028ae:	4628      	mov	r0, r5
 80028b0:	47b8      	blx	r7
 80028b2:	3001      	adds	r0, #1
 80028b4:	d1bf      	bne.n	8002836 <_printf_float+0x316>
 80028b6:	e68e      	b.n	80025d6 <_printf_float+0xb6>
 80028b8:	464b      	mov	r3, r9
 80028ba:	eb08 020a 	add.w	r2, r8, sl
 80028be:	4631      	mov	r1, r6
 80028c0:	4628      	mov	r0, r5
 80028c2:	47b8      	blx	r7
 80028c4:	3001      	adds	r0, #1
 80028c6:	d1c2      	bne.n	800284e <_printf_float+0x32e>
 80028c8:	e685      	b.n	80025d6 <_printf_float+0xb6>
 80028ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028cc:	2a01      	cmp	r2, #1
 80028ce:	dc01      	bgt.n	80028d4 <_printf_float+0x3b4>
 80028d0:	07db      	lsls	r3, r3, #31
 80028d2:	d537      	bpl.n	8002944 <_printf_float+0x424>
 80028d4:	2301      	movs	r3, #1
 80028d6:	4642      	mov	r2, r8
 80028d8:	4631      	mov	r1, r6
 80028da:	4628      	mov	r0, r5
 80028dc:	47b8      	blx	r7
 80028de:	3001      	adds	r0, #1
 80028e0:	f43f ae79 	beq.w	80025d6 <_printf_float+0xb6>
 80028e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028e8:	4631      	mov	r1, r6
 80028ea:	4628      	mov	r0, r5
 80028ec:	47b8      	blx	r7
 80028ee:	3001      	adds	r0, #1
 80028f0:	f43f ae71 	beq.w	80025d6 <_printf_float+0xb6>
 80028f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028f8:	2200      	movs	r2, #0
 80028fa:	2300      	movs	r3, #0
 80028fc:	f7fe f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8002900:	b9d8      	cbnz	r0, 800293a <_printf_float+0x41a>
 8002902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002904:	f108 0201 	add.w	r2, r8, #1
 8002908:	3b01      	subs	r3, #1
 800290a:	4631      	mov	r1, r6
 800290c:	4628      	mov	r0, r5
 800290e:	47b8      	blx	r7
 8002910:	3001      	adds	r0, #1
 8002912:	d10e      	bne.n	8002932 <_printf_float+0x412>
 8002914:	e65f      	b.n	80025d6 <_printf_float+0xb6>
 8002916:	2301      	movs	r3, #1
 8002918:	464a      	mov	r2, r9
 800291a:	4631      	mov	r1, r6
 800291c:	4628      	mov	r0, r5
 800291e:	47b8      	blx	r7
 8002920:	3001      	adds	r0, #1
 8002922:	f43f ae58 	beq.w	80025d6 <_printf_float+0xb6>
 8002926:	f108 0801 	add.w	r8, r8, #1
 800292a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800292c:	3b01      	subs	r3, #1
 800292e:	4543      	cmp	r3, r8
 8002930:	dcf1      	bgt.n	8002916 <_printf_float+0x3f6>
 8002932:	4653      	mov	r3, sl
 8002934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002938:	e6e1      	b.n	80026fe <_printf_float+0x1de>
 800293a:	f04f 0800 	mov.w	r8, #0
 800293e:	f104 091a 	add.w	r9, r4, #26
 8002942:	e7f2      	b.n	800292a <_printf_float+0x40a>
 8002944:	2301      	movs	r3, #1
 8002946:	4642      	mov	r2, r8
 8002948:	e7df      	b.n	800290a <_printf_float+0x3ea>
 800294a:	2301      	movs	r3, #1
 800294c:	464a      	mov	r2, r9
 800294e:	4631      	mov	r1, r6
 8002950:	4628      	mov	r0, r5
 8002952:	47b8      	blx	r7
 8002954:	3001      	adds	r0, #1
 8002956:	f43f ae3e 	beq.w	80025d6 <_printf_float+0xb6>
 800295a:	f108 0801 	add.w	r8, r8, #1
 800295e:	68e3      	ldr	r3, [r4, #12]
 8002960:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002962:	1a5b      	subs	r3, r3, r1
 8002964:	4543      	cmp	r3, r8
 8002966:	dcf0      	bgt.n	800294a <_printf_float+0x42a>
 8002968:	e6fe      	b.n	8002768 <_printf_float+0x248>
 800296a:	f04f 0800 	mov.w	r8, #0
 800296e:	f104 0919 	add.w	r9, r4, #25
 8002972:	e7f4      	b.n	800295e <_printf_float+0x43e>

08002974 <_printf_common>:
 8002974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002978:	4616      	mov	r6, r2
 800297a:	4699      	mov	r9, r3
 800297c:	688a      	ldr	r2, [r1, #8]
 800297e:	690b      	ldr	r3, [r1, #16]
 8002980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002984:	4293      	cmp	r3, r2
 8002986:	bfb8      	it	lt
 8002988:	4613      	movlt	r3, r2
 800298a:	6033      	str	r3, [r6, #0]
 800298c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002990:	4607      	mov	r7, r0
 8002992:	460c      	mov	r4, r1
 8002994:	b10a      	cbz	r2, 800299a <_printf_common+0x26>
 8002996:	3301      	adds	r3, #1
 8002998:	6033      	str	r3, [r6, #0]
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	0699      	lsls	r1, r3, #26
 800299e:	bf42      	ittt	mi
 80029a0:	6833      	ldrmi	r3, [r6, #0]
 80029a2:	3302      	addmi	r3, #2
 80029a4:	6033      	strmi	r3, [r6, #0]
 80029a6:	6825      	ldr	r5, [r4, #0]
 80029a8:	f015 0506 	ands.w	r5, r5, #6
 80029ac:	d106      	bne.n	80029bc <_printf_common+0x48>
 80029ae:	f104 0a19 	add.w	sl, r4, #25
 80029b2:	68e3      	ldr	r3, [r4, #12]
 80029b4:	6832      	ldr	r2, [r6, #0]
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	42ab      	cmp	r3, r5
 80029ba:	dc26      	bgt.n	8002a0a <_printf_common+0x96>
 80029bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029c0:	1e13      	subs	r3, r2, #0
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	bf18      	it	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	0692      	lsls	r2, r2, #26
 80029ca:	d42b      	bmi.n	8002a24 <_printf_common+0xb0>
 80029cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029d0:	4649      	mov	r1, r9
 80029d2:	4638      	mov	r0, r7
 80029d4:	47c0      	blx	r8
 80029d6:	3001      	adds	r0, #1
 80029d8:	d01e      	beq.n	8002a18 <_printf_common+0xa4>
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	68e5      	ldr	r5, [r4, #12]
 80029de:	6832      	ldr	r2, [r6, #0]
 80029e0:	f003 0306 	and.w	r3, r3, #6
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	bf08      	it	eq
 80029e8:	1aad      	subeq	r5, r5, r2
 80029ea:	68a3      	ldr	r3, [r4, #8]
 80029ec:	6922      	ldr	r2, [r4, #16]
 80029ee:	bf0c      	ite	eq
 80029f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029f4:	2500      	movne	r5, #0
 80029f6:	4293      	cmp	r3, r2
 80029f8:	bfc4      	itt	gt
 80029fa:	1a9b      	subgt	r3, r3, r2
 80029fc:	18ed      	addgt	r5, r5, r3
 80029fe:	2600      	movs	r6, #0
 8002a00:	341a      	adds	r4, #26
 8002a02:	42b5      	cmp	r5, r6
 8002a04:	d11a      	bne.n	8002a3c <_printf_common+0xc8>
 8002a06:	2000      	movs	r0, #0
 8002a08:	e008      	b.n	8002a1c <_printf_common+0xa8>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	4652      	mov	r2, sl
 8002a0e:	4649      	mov	r1, r9
 8002a10:	4638      	mov	r0, r7
 8002a12:	47c0      	blx	r8
 8002a14:	3001      	adds	r0, #1
 8002a16:	d103      	bne.n	8002a20 <_printf_common+0xac>
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a20:	3501      	adds	r5, #1
 8002a22:	e7c6      	b.n	80029b2 <_printf_common+0x3e>
 8002a24:	18e1      	adds	r1, r4, r3
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	2030      	movs	r0, #48	; 0x30
 8002a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a2e:	4422      	add	r2, r4
 8002a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a38:	3302      	adds	r3, #2
 8002a3a:	e7c7      	b.n	80029cc <_printf_common+0x58>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	4622      	mov	r2, r4
 8002a40:	4649      	mov	r1, r9
 8002a42:	4638      	mov	r0, r7
 8002a44:	47c0      	blx	r8
 8002a46:	3001      	adds	r0, #1
 8002a48:	d0e6      	beq.n	8002a18 <_printf_common+0xa4>
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7d9      	b.n	8002a02 <_printf_common+0x8e>
	...

08002a50 <_printf_i>:
 8002a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a54:	460c      	mov	r4, r1
 8002a56:	4691      	mov	r9, r2
 8002a58:	7e27      	ldrb	r7, [r4, #24]
 8002a5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a5c:	2f78      	cmp	r7, #120	; 0x78
 8002a5e:	4680      	mov	r8, r0
 8002a60:	469a      	mov	sl, r3
 8002a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a66:	d807      	bhi.n	8002a78 <_printf_i+0x28>
 8002a68:	2f62      	cmp	r7, #98	; 0x62
 8002a6a:	d80a      	bhi.n	8002a82 <_printf_i+0x32>
 8002a6c:	2f00      	cmp	r7, #0
 8002a6e:	f000 80d8 	beq.w	8002c22 <_printf_i+0x1d2>
 8002a72:	2f58      	cmp	r7, #88	; 0x58
 8002a74:	f000 80a3 	beq.w	8002bbe <_printf_i+0x16e>
 8002a78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a80:	e03a      	b.n	8002af8 <_printf_i+0xa8>
 8002a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a86:	2b15      	cmp	r3, #21
 8002a88:	d8f6      	bhi.n	8002a78 <_printf_i+0x28>
 8002a8a:	a001      	add	r0, pc, #4	; (adr r0, 8002a90 <_printf_i+0x40>)
 8002a8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a90:	08002ae9 	.word	0x08002ae9
 8002a94:	08002afd 	.word	0x08002afd
 8002a98:	08002a79 	.word	0x08002a79
 8002a9c:	08002a79 	.word	0x08002a79
 8002aa0:	08002a79 	.word	0x08002a79
 8002aa4:	08002a79 	.word	0x08002a79
 8002aa8:	08002afd 	.word	0x08002afd
 8002aac:	08002a79 	.word	0x08002a79
 8002ab0:	08002a79 	.word	0x08002a79
 8002ab4:	08002a79 	.word	0x08002a79
 8002ab8:	08002a79 	.word	0x08002a79
 8002abc:	08002c09 	.word	0x08002c09
 8002ac0:	08002b2d 	.word	0x08002b2d
 8002ac4:	08002beb 	.word	0x08002beb
 8002ac8:	08002a79 	.word	0x08002a79
 8002acc:	08002a79 	.word	0x08002a79
 8002ad0:	08002c2b 	.word	0x08002c2b
 8002ad4:	08002a79 	.word	0x08002a79
 8002ad8:	08002b2d 	.word	0x08002b2d
 8002adc:	08002a79 	.word	0x08002a79
 8002ae0:	08002a79 	.word	0x08002a79
 8002ae4:	08002bf3 	.word	0x08002bf3
 8002ae8:	680b      	ldr	r3, [r1, #0]
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	600a      	str	r2, [r1, #0]
 8002af0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0a3      	b.n	8002c44 <_printf_i+0x1f4>
 8002afc:	6825      	ldr	r5, [r4, #0]
 8002afe:	6808      	ldr	r0, [r1, #0]
 8002b00:	062e      	lsls	r6, r5, #24
 8002b02:	f100 0304 	add.w	r3, r0, #4
 8002b06:	d50a      	bpl.n	8002b1e <_printf_i+0xce>
 8002b08:	6805      	ldr	r5, [r0, #0]
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	da03      	bge.n	8002b18 <_printf_i+0xc8>
 8002b10:	232d      	movs	r3, #45	; 0x2d
 8002b12:	426d      	negs	r5, r5
 8002b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b18:	485e      	ldr	r0, [pc, #376]	; (8002c94 <_printf_i+0x244>)
 8002b1a:	230a      	movs	r3, #10
 8002b1c:	e019      	b.n	8002b52 <_printf_i+0x102>
 8002b1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b22:	6805      	ldr	r5, [r0, #0]
 8002b24:	600b      	str	r3, [r1, #0]
 8002b26:	bf18      	it	ne
 8002b28:	b22d      	sxthne	r5, r5
 8002b2a:	e7ef      	b.n	8002b0c <_printf_i+0xbc>
 8002b2c:	680b      	ldr	r3, [r1, #0]
 8002b2e:	6825      	ldr	r5, [r4, #0]
 8002b30:	1d18      	adds	r0, r3, #4
 8002b32:	6008      	str	r0, [r1, #0]
 8002b34:	0628      	lsls	r0, r5, #24
 8002b36:	d501      	bpl.n	8002b3c <_printf_i+0xec>
 8002b38:	681d      	ldr	r5, [r3, #0]
 8002b3a:	e002      	b.n	8002b42 <_printf_i+0xf2>
 8002b3c:	0669      	lsls	r1, r5, #25
 8002b3e:	d5fb      	bpl.n	8002b38 <_printf_i+0xe8>
 8002b40:	881d      	ldrh	r5, [r3, #0]
 8002b42:	4854      	ldr	r0, [pc, #336]	; (8002c94 <_printf_i+0x244>)
 8002b44:	2f6f      	cmp	r7, #111	; 0x6f
 8002b46:	bf0c      	ite	eq
 8002b48:	2308      	moveq	r3, #8
 8002b4a:	230a      	movne	r3, #10
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b52:	6866      	ldr	r6, [r4, #4]
 8002b54:	60a6      	str	r6, [r4, #8]
 8002b56:	2e00      	cmp	r6, #0
 8002b58:	bfa2      	ittt	ge
 8002b5a:	6821      	ldrge	r1, [r4, #0]
 8002b5c:	f021 0104 	bicge.w	r1, r1, #4
 8002b60:	6021      	strge	r1, [r4, #0]
 8002b62:	b90d      	cbnz	r5, 8002b68 <_printf_i+0x118>
 8002b64:	2e00      	cmp	r6, #0
 8002b66:	d04d      	beq.n	8002c04 <_printf_i+0x1b4>
 8002b68:	4616      	mov	r6, r2
 8002b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8002b72:	5dc7      	ldrb	r7, [r0, r7]
 8002b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b78:	462f      	mov	r7, r5
 8002b7a:	42bb      	cmp	r3, r7
 8002b7c:	460d      	mov	r5, r1
 8002b7e:	d9f4      	bls.n	8002b6a <_printf_i+0x11a>
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d10b      	bne.n	8002b9c <_printf_i+0x14c>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	07df      	lsls	r7, r3, #31
 8002b88:	d508      	bpl.n	8002b9c <_printf_i+0x14c>
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	6861      	ldr	r1, [r4, #4]
 8002b8e:	4299      	cmp	r1, r3
 8002b90:	bfde      	ittt	le
 8002b92:	2330      	movle	r3, #48	; 0x30
 8002b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b98:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002b9c:	1b92      	subs	r2, r2, r6
 8002b9e:	6122      	str	r2, [r4, #16]
 8002ba0:	f8cd a000 	str.w	sl, [sp]
 8002ba4:	464b      	mov	r3, r9
 8002ba6:	aa03      	add	r2, sp, #12
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4640      	mov	r0, r8
 8002bac:	f7ff fee2 	bl	8002974 <_printf_common>
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	d14c      	bne.n	8002c4e <_printf_i+0x1fe>
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb8:	b004      	add	sp, #16
 8002bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bbe:	4835      	ldr	r0, [pc, #212]	; (8002c94 <_printf_i+0x244>)
 8002bc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	680e      	ldr	r6, [r1, #0]
 8002bc8:	061f      	lsls	r7, r3, #24
 8002bca:	f856 5b04 	ldr.w	r5, [r6], #4
 8002bce:	600e      	str	r6, [r1, #0]
 8002bd0:	d514      	bpl.n	8002bfc <_printf_i+0x1ac>
 8002bd2:	07d9      	lsls	r1, r3, #31
 8002bd4:	bf44      	itt	mi
 8002bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8002bda:	6023      	strmi	r3, [r4, #0]
 8002bdc:	b91d      	cbnz	r5, 8002be6 <_printf_i+0x196>
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f023 0320 	bic.w	r3, r3, #32
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	2310      	movs	r3, #16
 8002be8:	e7b0      	b.n	8002b4c <_printf_i+0xfc>
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	f043 0320 	orr.w	r3, r3, #32
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	2378      	movs	r3, #120	; 0x78
 8002bf4:	4828      	ldr	r0, [pc, #160]	; (8002c98 <_printf_i+0x248>)
 8002bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bfa:	e7e3      	b.n	8002bc4 <_printf_i+0x174>
 8002bfc:	065e      	lsls	r6, r3, #25
 8002bfe:	bf48      	it	mi
 8002c00:	b2ad      	uxthmi	r5, r5
 8002c02:	e7e6      	b.n	8002bd2 <_printf_i+0x182>
 8002c04:	4616      	mov	r6, r2
 8002c06:	e7bb      	b.n	8002b80 <_printf_i+0x130>
 8002c08:	680b      	ldr	r3, [r1, #0]
 8002c0a:	6826      	ldr	r6, [r4, #0]
 8002c0c:	6960      	ldr	r0, [r4, #20]
 8002c0e:	1d1d      	adds	r5, r3, #4
 8002c10:	600d      	str	r5, [r1, #0]
 8002c12:	0635      	lsls	r5, r6, #24
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	d501      	bpl.n	8002c1c <_printf_i+0x1cc>
 8002c18:	6018      	str	r0, [r3, #0]
 8002c1a:	e002      	b.n	8002c22 <_printf_i+0x1d2>
 8002c1c:	0671      	lsls	r1, r6, #25
 8002c1e:	d5fb      	bpl.n	8002c18 <_printf_i+0x1c8>
 8002c20:	8018      	strh	r0, [r3, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	6123      	str	r3, [r4, #16]
 8002c26:	4616      	mov	r6, r2
 8002c28:	e7ba      	b.n	8002ba0 <_printf_i+0x150>
 8002c2a:	680b      	ldr	r3, [r1, #0]
 8002c2c:	1d1a      	adds	r2, r3, #4
 8002c2e:	600a      	str	r2, [r1, #0]
 8002c30:	681e      	ldr	r6, [r3, #0]
 8002c32:	6862      	ldr	r2, [r4, #4]
 8002c34:	2100      	movs	r1, #0
 8002c36:	4630      	mov	r0, r6
 8002c38:	f7fd fada 	bl	80001f0 <memchr>
 8002c3c:	b108      	cbz	r0, 8002c42 <_printf_i+0x1f2>
 8002c3e:	1b80      	subs	r0, r0, r6
 8002c40:	6060      	str	r0, [r4, #4]
 8002c42:	6863      	ldr	r3, [r4, #4]
 8002c44:	6123      	str	r3, [r4, #16]
 8002c46:	2300      	movs	r3, #0
 8002c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c4c:	e7a8      	b.n	8002ba0 <_printf_i+0x150>
 8002c4e:	6923      	ldr	r3, [r4, #16]
 8002c50:	4632      	mov	r2, r6
 8002c52:	4649      	mov	r1, r9
 8002c54:	4640      	mov	r0, r8
 8002c56:	47d0      	blx	sl
 8002c58:	3001      	adds	r0, #1
 8002c5a:	d0ab      	beq.n	8002bb4 <_printf_i+0x164>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	079b      	lsls	r3, r3, #30
 8002c60:	d413      	bmi.n	8002c8a <_printf_i+0x23a>
 8002c62:	68e0      	ldr	r0, [r4, #12]
 8002c64:	9b03      	ldr	r3, [sp, #12]
 8002c66:	4298      	cmp	r0, r3
 8002c68:	bfb8      	it	lt
 8002c6a:	4618      	movlt	r0, r3
 8002c6c:	e7a4      	b.n	8002bb8 <_printf_i+0x168>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	4632      	mov	r2, r6
 8002c72:	4649      	mov	r1, r9
 8002c74:	4640      	mov	r0, r8
 8002c76:	47d0      	blx	sl
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d09b      	beq.n	8002bb4 <_printf_i+0x164>
 8002c7c:	3501      	adds	r5, #1
 8002c7e:	68e3      	ldr	r3, [r4, #12]
 8002c80:	9903      	ldr	r1, [sp, #12]
 8002c82:	1a5b      	subs	r3, r3, r1
 8002c84:	42ab      	cmp	r3, r5
 8002c86:	dcf2      	bgt.n	8002c6e <_printf_i+0x21e>
 8002c88:	e7eb      	b.n	8002c62 <_printf_i+0x212>
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	f104 0619 	add.w	r6, r4, #25
 8002c90:	e7f5      	b.n	8002c7e <_printf_i+0x22e>
 8002c92:	bf00      	nop
 8002c94:	08004ea2 	.word	0x08004ea2
 8002c98:	08004eb3 	.word	0x08004eb3

08002c9c <_puts_r>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	460e      	mov	r6, r1
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	b118      	cbz	r0, 8002cac <_puts_r+0x10>
 8002ca4:	6983      	ldr	r3, [r0, #24]
 8002ca6:	b90b      	cbnz	r3, 8002cac <_puts_r+0x10>
 8002ca8:	f001 f8c2 	bl	8003e30 <__sinit>
 8002cac:	69ab      	ldr	r3, [r5, #24]
 8002cae:	68ac      	ldr	r4, [r5, #8]
 8002cb0:	b913      	cbnz	r3, 8002cb8 <_puts_r+0x1c>
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f001 f8bc 	bl	8003e30 <__sinit>
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <_puts_r+0xd0>)
 8002cba:	429c      	cmp	r4, r3
 8002cbc:	d120      	bne.n	8002d00 <_puts_r+0x64>
 8002cbe:	686c      	ldr	r4, [r5, #4]
 8002cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cc2:	07db      	lsls	r3, r3, #31
 8002cc4:	d405      	bmi.n	8002cd2 <_puts_r+0x36>
 8002cc6:	89a3      	ldrh	r3, [r4, #12]
 8002cc8:	0598      	lsls	r0, r3, #22
 8002cca:	d402      	bmi.n	8002cd2 <_puts_r+0x36>
 8002ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cce:	f001 f952 	bl	8003f76 <__retarget_lock_acquire_recursive>
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	0719      	lsls	r1, r3, #28
 8002cd6:	d51d      	bpl.n	8002d14 <_puts_r+0x78>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	b1db      	cbz	r3, 8002d14 <_puts_r+0x78>
 8002cdc:	3e01      	subs	r6, #1
 8002cde:	68a3      	ldr	r3, [r4, #8]
 8002ce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60a3      	str	r3, [r4, #8]
 8002ce8:	bb39      	cbnz	r1, 8002d3a <_puts_r+0x9e>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da38      	bge.n	8002d60 <_puts_r+0xc4>
 8002cee:	4622      	mov	r2, r4
 8002cf0:	210a      	movs	r1, #10
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f000 f848 	bl	8002d88 <__swbuf_r>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d011      	beq.n	8002d20 <_puts_r+0x84>
 8002cfc:	250a      	movs	r5, #10
 8002cfe:	e011      	b.n	8002d24 <_puts_r+0x88>
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <_puts_r+0xd4>)
 8002d02:	429c      	cmp	r4, r3
 8002d04:	d101      	bne.n	8002d0a <_puts_r+0x6e>
 8002d06:	68ac      	ldr	r4, [r5, #8]
 8002d08:	e7da      	b.n	8002cc0 <_puts_r+0x24>
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <_puts_r+0xd8>)
 8002d0c:	429c      	cmp	r4, r3
 8002d0e:	bf08      	it	eq
 8002d10:	68ec      	ldreq	r4, [r5, #12]
 8002d12:	e7d5      	b.n	8002cc0 <_puts_r+0x24>
 8002d14:	4621      	mov	r1, r4
 8002d16:	4628      	mov	r0, r5
 8002d18:	f000 f888 	bl	8002e2c <__swsetup_r>
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d0dd      	beq.n	8002cdc <_puts_r+0x40>
 8002d20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d26:	07da      	lsls	r2, r3, #31
 8002d28:	d405      	bmi.n	8002d36 <_puts_r+0x9a>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	059b      	lsls	r3, r3, #22
 8002d2e:	d402      	bmi.n	8002d36 <_puts_r+0x9a>
 8002d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d32:	f001 f921 	bl	8003f78 <__retarget_lock_release_recursive>
 8002d36:	4628      	mov	r0, r5
 8002d38:	bd70      	pop	{r4, r5, r6, pc}
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da04      	bge.n	8002d48 <_puts_r+0xac>
 8002d3e:	69a2      	ldr	r2, [r4, #24]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	dc06      	bgt.n	8002d52 <_puts_r+0xb6>
 8002d44:	290a      	cmp	r1, #10
 8002d46:	d004      	beq.n	8002d52 <_puts_r+0xb6>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	6022      	str	r2, [r4, #0]
 8002d4e:	7019      	strb	r1, [r3, #0]
 8002d50:	e7c5      	b.n	8002cde <_puts_r+0x42>
 8002d52:	4622      	mov	r2, r4
 8002d54:	4628      	mov	r0, r5
 8002d56:	f000 f817 	bl	8002d88 <__swbuf_r>
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	d1bf      	bne.n	8002cde <_puts_r+0x42>
 8002d5e:	e7df      	b.n	8002d20 <_puts_r+0x84>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	250a      	movs	r5, #10
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	6022      	str	r2, [r4, #0]
 8002d68:	701d      	strb	r5, [r3, #0]
 8002d6a:	e7db      	b.n	8002d24 <_puts_r+0x88>
 8002d6c:	08004f78 	.word	0x08004f78
 8002d70:	08004f98 	.word	0x08004f98
 8002d74:	08004f58 	.word	0x08004f58

08002d78 <puts>:
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <puts+0xc>)
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	f7ff bf8d 	b.w	8002c9c <_puts_r>
 8002d82:	bf00      	nop
 8002d84:	2000000c 	.word	0x2000000c

08002d88 <__swbuf_r>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	460e      	mov	r6, r1
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	4605      	mov	r5, r0
 8002d90:	b118      	cbz	r0, 8002d9a <__swbuf_r+0x12>
 8002d92:	6983      	ldr	r3, [r0, #24]
 8002d94:	b90b      	cbnz	r3, 8002d9a <__swbuf_r+0x12>
 8002d96:	f001 f84b 	bl	8003e30 <__sinit>
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <__swbuf_r+0x98>)
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	d12b      	bne.n	8002df8 <__swbuf_r+0x70>
 8002da0:	686c      	ldr	r4, [r5, #4]
 8002da2:	69a3      	ldr	r3, [r4, #24]
 8002da4:	60a3      	str	r3, [r4, #8]
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	071a      	lsls	r2, r3, #28
 8002daa:	d52f      	bpl.n	8002e0c <__swbuf_r+0x84>
 8002dac:	6923      	ldr	r3, [r4, #16]
 8002dae:	b36b      	cbz	r3, 8002e0c <__swbuf_r+0x84>
 8002db0:	6923      	ldr	r3, [r4, #16]
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	1ac0      	subs	r0, r0, r3
 8002db6:	6963      	ldr	r3, [r4, #20]
 8002db8:	b2f6      	uxtb	r6, r6
 8002dba:	4283      	cmp	r3, r0
 8002dbc:	4637      	mov	r7, r6
 8002dbe:	dc04      	bgt.n	8002dca <__swbuf_r+0x42>
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f000 ffa0 	bl	8003d08 <_fflush_r>
 8002dc8:	bb30      	cbnz	r0, 8002e18 <__swbuf_r+0x90>
 8002dca:	68a3      	ldr	r3, [r4, #8]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	60a3      	str	r3, [r4, #8]
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	6022      	str	r2, [r4, #0]
 8002dd6:	701e      	strb	r6, [r3, #0]
 8002dd8:	6963      	ldr	r3, [r4, #20]
 8002dda:	3001      	adds	r0, #1
 8002ddc:	4283      	cmp	r3, r0
 8002dde:	d004      	beq.n	8002dea <__swbuf_r+0x62>
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	07db      	lsls	r3, r3, #31
 8002de4:	d506      	bpl.n	8002df4 <__swbuf_r+0x6c>
 8002de6:	2e0a      	cmp	r6, #10
 8002de8:	d104      	bne.n	8002df4 <__swbuf_r+0x6c>
 8002dea:	4621      	mov	r1, r4
 8002dec:	4628      	mov	r0, r5
 8002dee:	f000 ff8b 	bl	8003d08 <_fflush_r>
 8002df2:	b988      	cbnz	r0, 8002e18 <__swbuf_r+0x90>
 8002df4:	4638      	mov	r0, r7
 8002df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <__swbuf_r+0x9c>)
 8002dfa:	429c      	cmp	r4, r3
 8002dfc:	d101      	bne.n	8002e02 <__swbuf_r+0x7a>
 8002dfe:	68ac      	ldr	r4, [r5, #8]
 8002e00:	e7cf      	b.n	8002da2 <__swbuf_r+0x1a>
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <__swbuf_r+0xa0>)
 8002e04:	429c      	cmp	r4, r3
 8002e06:	bf08      	it	eq
 8002e08:	68ec      	ldreq	r4, [r5, #12]
 8002e0a:	e7ca      	b.n	8002da2 <__swbuf_r+0x1a>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f000 f80c 	bl	8002e2c <__swsetup_r>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d0cb      	beq.n	8002db0 <__swbuf_r+0x28>
 8002e18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e1c:	e7ea      	b.n	8002df4 <__swbuf_r+0x6c>
 8002e1e:	bf00      	nop
 8002e20:	08004f78 	.word	0x08004f78
 8002e24:	08004f98 	.word	0x08004f98
 8002e28:	08004f58 	.word	0x08004f58

08002e2c <__swsetup_r>:
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <__swsetup_r+0xcc>)
 8002e2e:	b570      	push	{r4, r5, r6, lr}
 8002e30:	681d      	ldr	r5, [r3, #0]
 8002e32:	4606      	mov	r6, r0
 8002e34:	460c      	mov	r4, r1
 8002e36:	b125      	cbz	r5, 8002e42 <__swsetup_r+0x16>
 8002e38:	69ab      	ldr	r3, [r5, #24]
 8002e3a:	b913      	cbnz	r3, 8002e42 <__swsetup_r+0x16>
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f000 fff7 	bl	8003e30 <__sinit>
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <__swsetup_r+0xd0>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d10f      	bne.n	8002e68 <__swsetup_r+0x3c>
 8002e48:	686c      	ldr	r4, [r5, #4]
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e50:	0719      	lsls	r1, r3, #28
 8002e52:	d42c      	bmi.n	8002eae <__swsetup_r+0x82>
 8002e54:	06dd      	lsls	r5, r3, #27
 8002e56:	d411      	bmi.n	8002e7c <__swsetup_r+0x50>
 8002e58:	2309      	movs	r3, #9
 8002e5a:	6033      	str	r3, [r6, #0]
 8002e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e66:	e03e      	b.n	8002ee6 <__swsetup_r+0xba>
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <__swsetup_r+0xd4>)
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	d101      	bne.n	8002e72 <__swsetup_r+0x46>
 8002e6e:	68ac      	ldr	r4, [r5, #8]
 8002e70:	e7eb      	b.n	8002e4a <__swsetup_r+0x1e>
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <__swsetup_r+0xd8>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	bf08      	it	eq
 8002e78:	68ec      	ldreq	r4, [r5, #12]
 8002e7a:	e7e6      	b.n	8002e4a <__swsetup_r+0x1e>
 8002e7c:	0758      	lsls	r0, r3, #29
 8002e7e:	d512      	bpl.n	8002ea6 <__swsetup_r+0x7a>
 8002e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e82:	b141      	cbz	r1, 8002e96 <__swsetup_r+0x6a>
 8002e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e88:	4299      	cmp	r1, r3
 8002e8a:	d002      	beq.n	8002e92 <__swsetup_r+0x66>
 8002e8c:	4630      	mov	r0, r6
 8002e8e:	f001 fc7b 	bl	8004788 <_free_r>
 8002e92:	2300      	movs	r3, #0
 8002e94:	6363      	str	r3, [r4, #52]	; 0x34
 8002e96:	89a3      	ldrh	r3, [r4, #12]
 8002e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e9c:	81a3      	strh	r3, [r4, #12]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6063      	str	r3, [r4, #4]
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	6023      	str	r3, [r4, #0]
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	81a3      	strh	r3, [r4, #12]
 8002eae:	6923      	ldr	r3, [r4, #16]
 8002eb0:	b94b      	cbnz	r3, 8002ec6 <__swsetup_r+0x9a>
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d003      	beq.n	8002ec6 <__swsetup_r+0x9a>
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f001 f87f 	bl	8003fc4 <__smakebuf_r>
 8002ec6:	89a0      	ldrh	r0, [r4, #12]
 8002ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ecc:	f010 0301 	ands.w	r3, r0, #1
 8002ed0:	d00a      	beq.n	8002ee8 <__swsetup_r+0xbc>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60a3      	str	r3, [r4, #8]
 8002ed6:	6963      	ldr	r3, [r4, #20]
 8002ed8:	425b      	negs	r3, r3
 8002eda:	61a3      	str	r3, [r4, #24]
 8002edc:	6923      	ldr	r3, [r4, #16]
 8002ede:	b943      	cbnz	r3, 8002ef2 <__swsetup_r+0xc6>
 8002ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ee4:	d1ba      	bne.n	8002e5c <__swsetup_r+0x30>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	0781      	lsls	r1, r0, #30
 8002eea:	bf58      	it	pl
 8002eec:	6963      	ldrpl	r3, [r4, #20]
 8002eee:	60a3      	str	r3, [r4, #8]
 8002ef0:	e7f4      	b.n	8002edc <__swsetup_r+0xb0>
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	e7f7      	b.n	8002ee6 <__swsetup_r+0xba>
 8002ef6:	bf00      	nop
 8002ef8:	2000000c 	.word	0x2000000c
 8002efc:	08004f78 	.word	0x08004f78
 8002f00:	08004f98 	.word	0x08004f98
 8002f04:	08004f58 	.word	0x08004f58

08002f08 <quorem>:
 8002f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0c:	6903      	ldr	r3, [r0, #16]
 8002f0e:	690c      	ldr	r4, [r1, #16]
 8002f10:	42a3      	cmp	r3, r4
 8002f12:	4607      	mov	r7, r0
 8002f14:	f2c0 8081 	blt.w	800301a <quorem+0x112>
 8002f18:	3c01      	subs	r4, #1
 8002f1a:	f101 0814 	add.w	r8, r1, #20
 8002f1e:	f100 0514 	add.w	r5, r0, #20
 8002f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f30:	3301      	adds	r3, #1
 8002f32:	429a      	cmp	r2, r3
 8002f34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002f38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002f3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f40:	d331      	bcc.n	8002fa6 <quorem+0x9e>
 8002f42:	f04f 0e00 	mov.w	lr, #0
 8002f46:	4640      	mov	r0, r8
 8002f48:	46ac      	mov	ip, r5
 8002f4a:	46f2      	mov	sl, lr
 8002f4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002f50:	b293      	uxth	r3, r2
 8002f52:	fb06 e303 	mla	r3, r6, r3, lr
 8002f56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	ebaa 0303 	sub.w	r3, sl, r3
 8002f60:	0c12      	lsrs	r2, r2, #16
 8002f62:	f8dc a000 	ldr.w	sl, [ip]
 8002f66:	fb06 e202 	mla	r2, r6, r2, lr
 8002f6a:	fa13 f38a 	uxtah	r3, r3, sl
 8002f6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002f72:	fa1f fa82 	uxth.w	sl, r2
 8002f76:	f8dc 2000 	ldr.w	r2, [ip]
 8002f7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f88:	4581      	cmp	r9, r0
 8002f8a:	f84c 3b04 	str.w	r3, [ip], #4
 8002f8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002f92:	d2db      	bcs.n	8002f4c <quorem+0x44>
 8002f94:	f855 300b 	ldr.w	r3, [r5, fp]
 8002f98:	b92b      	cbnz	r3, 8002fa6 <quorem+0x9e>
 8002f9a:	9b01      	ldr	r3, [sp, #4]
 8002f9c:	3b04      	subs	r3, #4
 8002f9e:	429d      	cmp	r5, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	d32e      	bcc.n	8003002 <quorem+0xfa>
 8002fa4:	613c      	str	r4, [r7, #16]
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	f001 fade 	bl	8004568 <__mcmp>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	db24      	blt.n	8002ffa <quorem+0xf2>
 8002fb0:	3601      	adds	r6, #1
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f04f 0c00 	mov.w	ip, #0
 8002fb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8002fbc:	f8d0 e000 	ldr.w	lr, [r0]
 8002fc0:	b293      	uxth	r3, r2
 8002fc2:	ebac 0303 	sub.w	r3, ip, r3
 8002fc6:	0c12      	lsrs	r2, r2, #16
 8002fc8:	fa13 f38e 	uxtah	r3, r3, lr
 8002fcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002fd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fda:	45c1      	cmp	r9, r8
 8002fdc:	f840 3b04 	str.w	r3, [r0], #4
 8002fe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002fe4:	d2e8      	bcs.n	8002fb8 <quorem+0xb0>
 8002fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002fee:	b922      	cbnz	r2, 8002ffa <quorem+0xf2>
 8002ff0:	3b04      	subs	r3, #4
 8002ff2:	429d      	cmp	r5, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	d30a      	bcc.n	800300e <quorem+0x106>
 8002ff8:	613c      	str	r4, [r7, #16]
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	b003      	add	sp, #12
 8002ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	3b04      	subs	r3, #4
 8003006:	2a00      	cmp	r2, #0
 8003008:	d1cc      	bne.n	8002fa4 <quorem+0x9c>
 800300a:	3c01      	subs	r4, #1
 800300c:	e7c7      	b.n	8002f9e <quorem+0x96>
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	3b04      	subs	r3, #4
 8003012:	2a00      	cmp	r2, #0
 8003014:	d1f0      	bne.n	8002ff8 <quorem+0xf0>
 8003016:	3c01      	subs	r4, #1
 8003018:	e7eb      	b.n	8002ff2 <quorem+0xea>
 800301a:	2000      	movs	r0, #0
 800301c:	e7ee      	b.n	8002ffc <quorem+0xf4>
	...

08003020 <_dtoa_r>:
 8003020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003024:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003026:	b099      	sub	sp, #100	; 0x64
 8003028:	4616      	mov	r6, r2
 800302a:	461f      	mov	r7, r3
 800302c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003030:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003034:	4605      	mov	r5, r0
 8003036:	b974      	cbnz	r4, 8003056 <_dtoa_r+0x36>
 8003038:	2010      	movs	r0, #16
 800303a:	f001 f803 	bl	8004044 <malloc>
 800303e:	4602      	mov	r2, r0
 8003040:	6268      	str	r0, [r5, #36]	; 0x24
 8003042:	b920      	cbnz	r0, 800304e <_dtoa_r+0x2e>
 8003044:	4ba8      	ldr	r3, [pc, #672]	; (80032e8 <_dtoa_r+0x2c8>)
 8003046:	21ea      	movs	r1, #234	; 0xea
 8003048:	48a8      	ldr	r0, [pc, #672]	; (80032ec <_dtoa_r+0x2cc>)
 800304a:	f001 fcab 	bl	80049a4 <__assert_func>
 800304e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003052:	6004      	str	r4, [r0, #0]
 8003054:	60c4      	str	r4, [r0, #12]
 8003056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	b151      	cbz	r1, 8003072 <_dtoa_r+0x52>
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	604a      	str	r2, [r1, #4]
 8003060:	2301      	movs	r3, #1
 8003062:	4093      	lsls	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
 8003066:	4628      	mov	r0, r5
 8003068:	f001 f842 	bl	80040f0 <_Bfree>
 800306c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	1e3b      	subs	r3, r7, #0
 8003074:	bfb9      	ittee	lt
 8003076:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800307a:	9305      	strlt	r3, [sp, #20]
 800307c:	2300      	movge	r3, #0
 800307e:	f8c8 3000 	strge.w	r3, [r8]
 8003082:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003086:	4b9a      	ldr	r3, [pc, #616]	; (80032f0 <_dtoa_r+0x2d0>)
 8003088:	bfbc      	itt	lt
 800308a:	2201      	movlt	r2, #1
 800308c:	f8c8 2000 	strlt.w	r2, [r8]
 8003090:	ea33 0309 	bics.w	r3, r3, r9
 8003094:	d119      	bne.n	80030ca <_dtoa_r+0xaa>
 8003096:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003098:	f242 730f 	movw	r3, #9999	; 0x270f
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80030a2:	4333      	orrs	r3, r6
 80030a4:	f000 8581 	beq.w	8003baa <_dtoa_r+0xb8a>
 80030a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80030aa:	b953      	cbnz	r3, 80030c2 <_dtoa_r+0xa2>
 80030ac:	4b91      	ldr	r3, [pc, #580]	; (80032f4 <_dtoa_r+0x2d4>)
 80030ae:	e022      	b.n	80030f6 <_dtoa_r+0xd6>
 80030b0:	4b91      	ldr	r3, [pc, #580]	; (80032f8 <_dtoa_r+0x2d8>)
 80030b2:	9308      	str	r3, [sp, #32]
 80030b4:	3308      	adds	r3, #8
 80030b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	9808      	ldr	r0, [sp, #32]
 80030bc:	b019      	add	sp, #100	; 0x64
 80030be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c2:	4b8c      	ldr	r3, [pc, #560]	; (80032f4 <_dtoa_r+0x2d4>)
 80030c4:	9308      	str	r3, [sp, #32]
 80030c6:	3303      	adds	r3, #3
 80030c8:	e7f5      	b.n	80030b6 <_dtoa_r+0x96>
 80030ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80030ce:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80030d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80030d6:	2200      	movs	r2, #0
 80030d8:	2300      	movs	r3, #0
 80030da:	f7fd fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80030de:	4680      	mov	r8, r0
 80030e0:	b158      	cbz	r0, 80030fa <_dtoa_r+0xda>
 80030e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80030e4:	2301      	movs	r3, #1
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 855a 	beq.w	8003ba4 <_dtoa_r+0xb84>
 80030f0:	4882      	ldr	r0, [pc, #520]	; (80032fc <_dtoa_r+0x2dc>)
 80030f2:	6018      	str	r0, [r3, #0]
 80030f4:	1e43      	subs	r3, r0, #1
 80030f6:	9308      	str	r3, [sp, #32]
 80030f8:	e7df      	b.n	80030ba <_dtoa_r+0x9a>
 80030fa:	ab16      	add	r3, sp, #88	; 0x58
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	ab17      	add	r3, sp, #92	; 0x5c
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4628      	mov	r0, r5
 8003104:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003108:	f001 fad4 	bl	80046b4 <__d2b>
 800310c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003110:	4682      	mov	sl, r0
 8003112:	2c00      	cmp	r4, #0
 8003114:	d07e      	beq.n	8003214 <_dtoa_r+0x1f4>
 8003116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003118:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800311c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003124:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003128:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800312c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003130:	4b73      	ldr	r3, [pc, #460]	; (8003300 <_dtoa_r+0x2e0>)
 8003132:	2200      	movs	r2, #0
 8003134:	f7fd f8b0 	bl	8000298 <__aeabi_dsub>
 8003138:	a365      	add	r3, pc, #404	; (adr r3, 80032d0 <_dtoa_r+0x2b0>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f7fd fa63 	bl	8000608 <__aeabi_dmul>
 8003142:	a365      	add	r3, pc, #404	; (adr r3, 80032d8 <_dtoa_r+0x2b8>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd f8a8 	bl	800029c <__adddf3>
 800314c:	4606      	mov	r6, r0
 800314e:	4620      	mov	r0, r4
 8003150:	460f      	mov	r7, r1
 8003152:	f7fd f9ef 	bl	8000534 <__aeabi_i2d>
 8003156:	a362      	add	r3, pc, #392	; (adr r3, 80032e0 <_dtoa_r+0x2c0>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd fa54 	bl	8000608 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4630      	mov	r0, r6
 8003166:	4639      	mov	r1, r7
 8003168:	f7fd f898 	bl	800029c <__adddf3>
 800316c:	4606      	mov	r6, r0
 800316e:	460f      	mov	r7, r1
 8003170:	f7fd fcfa 	bl	8000b68 <__aeabi_d2iz>
 8003174:	2200      	movs	r2, #0
 8003176:	4681      	mov	r9, r0
 8003178:	2300      	movs	r3, #0
 800317a:	4630      	mov	r0, r6
 800317c:	4639      	mov	r1, r7
 800317e:	f7fd fcb5 	bl	8000aec <__aeabi_dcmplt>
 8003182:	b148      	cbz	r0, 8003198 <_dtoa_r+0x178>
 8003184:	4648      	mov	r0, r9
 8003186:	f7fd f9d5 	bl	8000534 <__aeabi_i2d>
 800318a:	4632      	mov	r2, r6
 800318c:	463b      	mov	r3, r7
 800318e:	f7fd fca3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003192:	b908      	cbnz	r0, 8003198 <_dtoa_r+0x178>
 8003194:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003198:	f1b9 0f16 	cmp.w	r9, #22
 800319c:	d857      	bhi.n	800324e <_dtoa_r+0x22e>
 800319e:	4b59      	ldr	r3, [pc, #356]	; (8003304 <_dtoa_r+0x2e4>)
 80031a0:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80031ac:	f7fd fc9e 	bl	8000aec <__aeabi_dcmplt>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d04e      	beq.n	8003252 <_dtoa_r+0x232>
 80031b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80031b8:	2300      	movs	r3, #0
 80031ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80031bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80031be:	1b1c      	subs	r4, r3, r4
 80031c0:	1e63      	subs	r3, r4, #1
 80031c2:	9309      	str	r3, [sp, #36]	; 0x24
 80031c4:	bf45      	ittet	mi
 80031c6:	f1c4 0301 	rsbmi	r3, r4, #1
 80031ca:	9306      	strmi	r3, [sp, #24]
 80031cc:	2300      	movpl	r3, #0
 80031ce:	2300      	movmi	r3, #0
 80031d0:	bf4c      	ite	mi
 80031d2:	9309      	strmi	r3, [sp, #36]	; 0x24
 80031d4:	9306      	strpl	r3, [sp, #24]
 80031d6:	f1b9 0f00 	cmp.w	r9, #0
 80031da:	db3c      	blt.n	8003256 <_dtoa_r+0x236>
 80031dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031de:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80031e2:	444b      	add	r3, r9
 80031e4:	9309      	str	r3, [sp, #36]	; 0x24
 80031e6:	2300      	movs	r3, #0
 80031e8:	930a      	str	r3, [sp, #40]	; 0x28
 80031ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	f200 808d 	bhi.w	800330c <_dtoa_r+0x2ec>
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	bfc4      	itt	gt
 80031f6:	3b04      	subgt	r3, #4
 80031f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80031fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031fc:	f1a3 0302 	sub.w	r3, r3, #2
 8003200:	bfcc      	ite	gt
 8003202:	2400      	movgt	r4, #0
 8003204:	2401      	movle	r4, #1
 8003206:	2b03      	cmp	r3, #3
 8003208:	f200 808c 	bhi.w	8003324 <_dtoa_r+0x304>
 800320c:	e8df f003 	tbb	[pc, r3]
 8003210:	5b4d4f2d 	.word	0x5b4d4f2d
 8003214:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003218:	441c      	add	r4, r3
 800321a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800321e:	2b20      	cmp	r3, #32
 8003220:	bfc3      	ittte	gt
 8003222:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003226:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800322a:	fa09 f303 	lslgt.w	r3, r9, r3
 800322e:	f1c3 0320 	rsble	r3, r3, #32
 8003232:	bfc6      	itte	gt
 8003234:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003238:	4318      	orrgt	r0, r3
 800323a:	fa06 f003 	lslle.w	r0, r6, r3
 800323e:	f7fd f969 	bl	8000514 <__aeabi_ui2d>
 8003242:	2301      	movs	r3, #1
 8003244:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003248:	3c01      	subs	r4, #1
 800324a:	9313      	str	r3, [sp, #76]	; 0x4c
 800324c:	e770      	b.n	8003130 <_dtoa_r+0x110>
 800324e:	2301      	movs	r3, #1
 8003250:	e7b3      	b.n	80031ba <_dtoa_r+0x19a>
 8003252:	900f      	str	r0, [sp, #60]	; 0x3c
 8003254:	e7b2      	b.n	80031bc <_dtoa_r+0x19c>
 8003256:	9b06      	ldr	r3, [sp, #24]
 8003258:	eba3 0309 	sub.w	r3, r3, r9
 800325c:	9306      	str	r3, [sp, #24]
 800325e:	f1c9 0300 	rsb	r3, r9, #0
 8003262:	930a      	str	r3, [sp, #40]	; 0x28
 8003264:	2300      	movs	r3, #0
 8003266:	930e      	str	r3, [sp, #56]	; 0x38
 8003268:	e7bf      	b.n	80031ea <_dtoa_r+0x1ca>
 800326a:	2300      	movs	r3, #0
 800326c:	930b      	str	r3, [sp, #44]	; 0x2c
 800326e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003270:	2b00      	cmp	r3, #0
 8003272:	dc5a      	bgt.n	800332a <_dtoa_r+0x30a>
 8003274:	f04f 0b01 	mov.w	fp, #1
 8003278:	f8cd b008 	str.w	fp, [sp, #8]
 800327c:	465b      	mov	r3, fp
 800327e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003282:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003284:	2200      	movs	r2, #0
 8003286:	6042      	str	r2, [r0, #4]
 8003288:	2204      	movs	r2, #4
 800328a:	f102 0614 	add.w	r6, r2, #20
 800328e:	429e      	cmp	r6, r3
 8003290:	6841      	ldr	r1, [r0, #4]
 8003292:	d950      	bls.n	8003336 <_dtoa_r+0x316>
 8003294:	4628      	mov	r0, r5
 8003296:	f000 feeb 	bl	8004070 <_Balloc>
 800329a:	9008      	str	r0, [sp, #32]
 800329c:	2800      	cmp	r0, #0
 800329e:	d14e      	bne.n	800333e <_dtoa_r+0x31e>
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <_dtoa_r+0x2e8>)
 80032a2:	4602      	mov	r2, r0
 80032a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80032a8:	e6ce      	b.n	8003048 <_dtoa_r+0x28>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e7de      	b.n	800326c <_dtoa_r+0x24c>
 80032ae:	2300      	movs	r3, #0
 80032b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80032b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80032b4:	eb09 0b03 	add.w	fp, r9, r3
 80032b8:	f10b 0301 	add.w	r3, fp, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	9302      	str	r3, [sp, #8]
 80032c0:	bfb8      	it	lt
 80032c2:	2301      	movlt	r3, #1
 80032c4:	e7dd      	b.n	8003282 <_dtoa_r+0x262>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e7f2      	b.n	80032b0 <_dtoa_r+0x290>
 80032ca:	bf00      	nop
 80032cc:	f3af 8000 	nop.w
 80032d0:	636f4361 	.word	0x636f4361
 80032d4:	3fd287a7 	.word	0x3fd287a7
 80032d8:	8b60c8b3 	.word	0x8b60c8b3
 80032dc:	3fc68a28 	.word	0x3fc68a28
 80032e0:	509f79fb 	.word	0x509f79fb
 80032e4:	3fd34413 	.word	0x3fd34413
 80032e8:	08004ed1 	.word	0x08004ed1
 80032ec:	08004ee8 	.word	0x08004ee8
 80032f0:	7ff00000 	.word	0x7ff00000
 80032f4:	08004ecd 	.word	0x08004ecd
 80032f8:	08004ec4 	.word	0x08004ec4
 80032fc:	08004ea1 	.word	0x08004ea1
 8003300:	3ff80000 	.word	0x3ff80000
 8003304:	08005040 	.word	0x08005040
 8003308:	08004f47 	.word	0x08004f47
 800330c:	2401      	movs	r4, #1
 800330e:	2300      	movs	r3, #0
 8003310:	9322      	str	r3, [sp, #136]	; 0x88
 8003312:	940b      	str	r4, [sp, #44]	; 0x2c
 8003314:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003318:	2200      	movs	r2, #0
 800331a:	f8cd b008 	str.w	fp, [sp, #8]
 800331e:	2312      	movs	r3, #18
 8003320:	9223      	str	r2, [sp, #140]	; 0x8c
 8003322:	e7ae      	b.n	8003282 <_dtoa_r+0x262>
 8003324:	2301      	movs	r3, #1
 8003326:	930b      	str	r3, [sp, #44]	; 0x2c
 8003328:	e7f4      	b.n	8003314 <_dtoa_r+0x2f4>
 800332a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800332e:	f8cd b008 	str.w	fp, [sp, #8]
 8003332:	465b      	mov	r3, fp
 8003334:	e7a5      	b.n	8003282 <_dtoa_r+0x262>
 8003336:	3101      	adds	r1, #1
 8003338:	6041      	str	r1, [r0, #4]
 800333a:	0052      	lsls	r2, r2, #1
 800333c:	e7a5      	b.n	800328a <_dtoa_r+0x26a>
 800333e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003340:	9a08      	ldr	r2, [sp, #32]
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	9b02      	ldr	r3, [sp, #8]
 8003346:	2b0e      	cmp	r3, #14
 8003348:	f200 80a8 	bhi.w	800349c <_dtoa_r+0x47c>
 800334c:	2c00      	cmp	r4, #0
 800334e:	f000 80a5 	beq.w	800349c <_dtoa_r+0x47c>
 8003352:	f1b9 0f00 	cmp.w	r9, #0
 8003356:	dd34      	ble.n	80033c2 <_dtoa_r+0x3a2>
 8003358:	4a9a      	ldr	r2, [pc, #616]	; (80035c4 <_dtoa_r+0x5a4>)
 800335a:	f009 030f 	and.w	r3, r9, #15
 800335e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003362:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003366:	f419 7f80 	tst.w	r9, #256	; 0x100
 800336a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800336e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003372:	d016      	beq.n	80033a2 <_dtoa_r+0x382>
 8003374:	4b94      	ldr	r3, [pc, #592]	; (80035c8 <_dtoa_r+0x5a8>)
 8003376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800337a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800337e:	f7fd fa6d 	bl	800085c <__aeabi_ddiv>
 8003382:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003386:	f004 040f 	and.w	r4, r4, #15
 800338a:	2703      	movs	r7, #3
 800338c:	4e8e      	ldr	r6, [pc, #568]	; (80035c8 <_dtoa_r+0x5a8>)
 800338e:	b954      	cbnz	r4, 80033a6 <_dtoa_r+0x386>
 8003390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003398:	f7fd fa60 	bl	800085c <__aeabi_ddiv>
 800339c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033a0:	e029      	b.n	80033f6 <_dtoa_r+0x3d6>
 80033a2:	2702      	movs	r7, #2
 80033a4:	e7f2      	b.n	800338c <_dtoa_r+0x36c>
 80033a6:	07e1      	lsls	r1, r4, #31
 80033a8:	d508      	bpl.n	80033bc <_dtoa_r+0x39c>
 80033aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80033ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80033b2:	f7fd f929 	bl	8000608 <__aeabi_dmul>
 80033b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80033ba:	3701      	adds	r7, #1
 80033bc:	1064      	asrs	r4, r4, #1
 80033be:	3608      	adds	r6, #8
 80033c0:	e7e5      	b.n	800338e <_dtoa_r+0x36e>
 80033c2:	f000 80a5 	beq.w	8003510 <_dtoa_r+0x4f0>
 80033c6:	f1c9 0400 	rsb	r4, r9, #0
 80033ca:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <_dtoa_r+0x5a4>)
 80033cc:	4e7e      	ldr	r6, [pc, #504]	; (80035c8 <_dtoa_r+0x5a8>)
 80033ce:	f004 020f 	and.w	r2, r4, #15
 80033d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80033de:	f7fd f913 	bl	8000608 <__aeabi_dmul>
 80033e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033e6:	1124      	asrs	r4, r4, #4
 80033e8:	2300      	movs	r3, #0
 80033ea:	2702      	movs	r7, #2
 80033ec:	2c00      	cmp	r4, #0
 80033ee:	f040 8084 	bne.w	80034fa <_dtoa_r+0x4da>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1d2      	bne.n	800339c <_dtoa_r+0x37c>
 80033f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 808b 	beq.w	8003514 <_dtoa_r+0x4f4>
 80033fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003402:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003406:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <_dtoa_r+0x5ac>)
 800340c:	2200      	movs	r2, #0
 800340e:	f7fd fb6d 	bl	8000aec <__aeabi_dcmplt>
 8003412:	2800      	cmp	r0, #0
 8003414:	d07e      	beq.n	8003514 <_dtoa_r+0x4f4>
 8003416:	9b02      	ldr	r3, [sp, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d07b      	beq.n	8003514 <_dtoa_r+0x4f4>
 800341c:	f1bb 0f00 	cmp.w	fp, #0
 8003420:	dd38      	ble.n	8003494 <_dtoa_r+0x474>
 8003422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <_dtoa_r+0x5b0>)
 8003428:	2200      	movs	r2, #0
 800342a:	f7fd f8ed 	bl	8000608 <__aeabi_dmul>
 800342e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003432:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8003436:	3701      	adds	r7, #1
 8003438:	465c      	mov	r4, fp
 800343a:	4638      	mov	r0, r7
 800343c:	f7fd f87a 	bl	8000534 <__aeabi_i2d>
 8003440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003444:	f7fd f8e0 	bl	8000608 <__aeabi_dmul>
 8003448:	4b62      	ldr	r3, [pc, #392]	; (80035d4 <_dtoa_r+0x5b4>)
 800344a:	2200      	movs	r2, #0
 800344c:	f7fc ff26 	bl	800029c <__adddf3>
 8003450:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003454:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003458:	9611      	str	r6, [sp, #68]	; 0x44
 800345a:	2c00      	cmp	r4, #0
 800345c:	d15d      	bne.n	800351a <_dtoa_r+0x4fa>
 800345e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003462:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <_dtoa_r+0x5b8>)
 8003464:	2200      	movs	r2, #0
 8003466:	f7fc ff17 	bl	8000298 <__aeabi_dsub>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003472:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003474:	4633      	mov	r3, r6
 8003476:	f7fd fb57 	bl	8000b28 <__aeabi_dcmpgt>
 800347a:	2800      	cmp	r0, #0
 800347c:	f040 829e 	bne.w	80039bc <_dtoa_r+0x99c>
 8003480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003486:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800348a:	f7fd fb2f 	bl	8000aec <__aeabi_dcmplt>
 800348e:	2800      	cmp	r0, #0
 8003490:	f040 8292 	bne.w	80039b8 <_dtoa_r+0x998>
 8003494:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003498:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800349c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f2c0 8153 	blt.w	800374a <_dtoa_r+0x72a>
 80034a4:	f1b9 0f0e 	cmp.w	r9, #14
 80034a8:	f300 814f 	bgt.w	800374a <_dtoa_r+0x72a>
 80034ac:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <_dtoa_r+0x5a4>)
 80034ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80034b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80034ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f280 80db 	bge.w	8003678 <_dtoa_r+0x658>
 80034c2:	9b02      	ldr	r3, [sp, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f300 80d7 	bgt.w	8003678 <_dtoa_r+0x658>
 80034ca:	f040 8274 	bne.w	80039b6 <_dtoa_r+0x996>
 80034ce:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <_dtoa_r+0x5b8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034d6:	f7fd f897 	bl	8000608 <__aeabi_dmul>
 80034da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034de:	f7fd fb19 	bl	8000b14 <__aeabi_dcmpge>
 80034e2:	9c02      	ldr	r4, [sp, #8]
 80034e4:	4626      	mov	r6, r4
 80034e6:	2800      	cmp	r0, #0
 80034e8:	f040 824a 	bne.w	8003980 <_dtoa_r+0x960>
 80034ec:	9f08      	ldr	r7, [sp, #32]
 80034ee:	2331      	movs	r3, #49	; 0x31
 80034f0:	f807 3b01 	strb.w	r3, [r7], #1
 80034f4:	f109 0901 	add.w	r9, r9, #1
 80034f8:	e246      	b.n	8003988 <_dtoa_r+0x968>
 80034fa:	07e2      	lsls	r2, r4, #31
 80034fc:	d505      	bpl.n	800350a <_dtoa_r+0x4ea>
 80034fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003502:	f7fd f881 	bl	8000608 <__aeabi_dmul>
 8003506:	3701      	adds	r7, #1
 8003508:	2301      	movs	r3, #1
 800350a:	1064      	asrs	r4, r4, #1
 800350c:	3608      	adds	r6, #8
 800350e:	e76d      	b.n	80033ec <_dtoa_r+0x3cc>
 8003510:	2702      	movs	r7, #2
 8003512:	e770      	b.n	80033f6 <_dtoa_r+0x3d6>
 8003514:	9c02      	ldr	r4, [sp, #8]
 8003516:	46c8      	mov	r8, r9
 8003518:	e78f      	b.n	800343a <_dtoa_r+0x41a>
 800351a:	9908      	ldr	r1, [sp, #32]
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <_dtoa_r+0x5a4>)
 800351e:	4421      	add	r1, r4
 8003520:	9112      	str	r1, [sp, #72]	; 0x48
 8003522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003524:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003528:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800352c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003530:	2900      	cmp	r1, #0
 8003532:	d055      	beq.n	80035e0 <_dtoa_r+0x5c0>
 8003534:	4929      	ldr	r1, [pc, #164]	; (80035dc <_dtoa_r+0x5bc>)
 8003536:	2000      	movs	r0, #0
 8003538:	f7fd f990 	bl	800085c <__aeabi_ddiv>
 800353c:	463b      	mov	r3, r7
 800353e:	4632      	mov	r2, r6
 8003540:	f7fc feaa 	bl	8000298 <__aeabi_dsub>
 8003544:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003548:	9f08      	ldr	r7, [sp, #32]
 800354a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800354e:	f7fd fb0b 	bl	8000b68 <__aeabi_d2iz>
 8003552:	4604      	mov	r4, r0
 8003554:	f7fc ffee 	bl	8000534 <__aeabi_i2d>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003560:	f7fc fe9a 	bl	8000298 <__aeabi_dsub>
 8003564:	3430      	adds	r4, #48	; 0x30
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800356e:	f807 4b01 	strb.w	r4, [r7], #1
 8003572:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003576:	f7fd fab9 	bl	8000aec <__aeabi_dcmplt>
 800357a:	2800      	cmp	r0, #0
 800357c:	d174      	bne.n	8003668 <_dtoa_r+0x648>
 800357e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003582:	4912      	ldr	r1, [pc, #72]	; (80035cc <_dtoa_r+0x5ac>)
 8003584:	2000      	movs	r0, #0
 8003586:	f7fc fe87 	bl	8000298 <__aeabi_dsub>
 800358a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800358e:	f7fd faad 	bl	8000aec <__aeabi_dcmplt>
 8003592:	2800      	cmp	r0, #0
 8003594:	f040 80b6 	bne.w	8003704 <_dtoa_r+0x6e4>
 8003598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800359a:	429f      	cmp	r7, r3
 800359c:	f43f af7a 	beq.w	8003494 <_dtoa_r+0x474>
 80035a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <_dtoa_r+0x5b0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	f7fd f82e 	bl	8000608 <__aeabi_dmul>
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <_dtoa_r+0x5b0>)
 80035ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80035b2:	2200      	movs	r2, #0
 80035b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035b8:	f7fd f826 	bl	8000608 <__aeabi_dmul>
 80035bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035c0:	e7c3      	b.n	800354a <_dtoa_r+0x52a>
 80035c2:	bf00      	nop
 80035c4:	08005040 	.word	0x08005040
 80035c8:	08005018 	.word	0x08005018
 80035cc:	3ff00000 	.word	0x3ff00000
 80035d0:	40240000 	.word	0x40240000
 80035d4:	401c0000 	.word	0x401c0000
 80035d8:	40140000 	.word	0x40140000
 80035dc:	3fe00000 	.word	0x3fe00000
 80035e0:	4630      	mov	r0, r6
 80035e2:	4639      	mov	r1, r7
 80035e4:	f7fd f810 	bl	8000608 <__aeabi_dmul>
 80035e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80035ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035ee:	9c08      	ldr	r4, [sp, #32]
 80035f0:	9314      	str	r3, [sp, #80]	; 0x50
 80035f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035f6:	f7fd fab7 	bl	8000b68 <__aeabi_d2iz>
 80035fa:	9015      	str	r0, [sp, #84]	; 0x54
 80035fc:	f7fc ff9a 	bl	8000534 <__aeabi_i2d>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003608:	f7fc fe46 	bl	8000298 <__aeabi_dsub>
 800360c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800360e:	3330      	adds	r3, #48	; 0x30
 8003610:	f804 3b01 	strb.w	r3, [r4], #1
 8003614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003616:	429c      	cmp	r4, r3
 8003618:	4606      	mov	r6, r0
 800361a:	460f      	mov	r7, r1
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	d124      	bne.n	800366c <_dtoa_r+0x64c>
 8003622:	4bb2      	ldr	r3, [pc, #712]	; (80038ec <_dtoa_r+0x8cc>)
 8003624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003628:	f7fc fe38 	bl	800029c <__adddf3>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4630      	mov	r0, r6
 8003632:	4639      	mov	r1, r7
 8003634:	f7fd fa78 	bl	8000b28 <__aeabi_dcmpgt>
 8003638:	2800      	cmp	r0, #0
 800363a:	d162      	bne.n	8003702 <_dtoa_r+0x6e2>
 800363c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003640:	49aa      	ldr	r1, [pc, #680]	; (80038ec <_dtoa_r+0x8cc>)
 8003642:	2000      	movs	r0, #0
 8003644:	f7fc fe28 	bl	8000298 <__aeabi_dsub>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4630      	mov	r0, r6
 800364e:	4639      	mov	r1, r7
 8003650:	f7fd fa4c 	bl	8000aec <__aeabi_dcmplt>
 8003654:	2800      	cmp	r0, #0
 8003656:	f43f af1d 	beq.w	8003494 <_dtoa_r+0x474>
 800365a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800365c:	1e7b      	subs	r3, r7, #1
 800365e:	9314      	str	r3, [sp, #80]	; 0x50
 8003660:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003664:	2b30      	cmp	r3, #48	; 0x30
 8003666:	d0f8      	beq.n	800365a <_dtoa_r+0x63a>
 8003668:	46c1      	mov	r9, r8
 800366a:	e03a      	b.n	80036e2 <_dtoa_r+0x6c2>
 800366c:	4ba0      	ldr	r3, [pc, #640]	; (80038f0 <_dtoa_r+0x8d0>)
 800366e:	f7fc ffcb 	bl	8000608 <__aeabi_dmul>
 8003672:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003676:	e7bc      	b.n	80035f2 <_dtoa_r+0x5d2>
 8003678:	9f08      	ldr	r7, [sp, #32]
 800367a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800367e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003682:	f7fd f8eb 	bl	800085c <__aeabi_ddiv>
 8003686:	f7fd fa6f 	bl	8000b68 <__aeabi_d2iz>
 800368a:	4604      	mov	r4, r0
 800368c:	f7fc ff52 	bl	8000534 <__aeabi_i2d>
 8003690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003694:	f7fc ffb8 	bl	8000608 <__aeabi_dmul>
 8003698:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800369c:	460b      	mov	r3, r1
 800369e:	4602      	mov	r2, r0
 80036a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036a4:	f7fc fdf8 	bl	8000298 <__aeabi_dsub>
 80036a8:	f807 6b01 	strb.w	r6, [r7], #1
 80036ac:	9e08      	ldr	r6, [sp, #32]
 80036ae:	9b02      	ldr	r3, [sp, #8]
 80036b0:	1bbe      	subs	r6, r7, r6
 80036b2:	42b3      	cmp	r3, r6
 80036b4:	d13a      	bne.n	800372c <_dtoa_r+0x70c>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	f7fc fdef 	bl	800029c <__adddf3>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036ca:	f7fd fa2d 	bl	8000b28 <__aeabi_dcmpgt>
 80036ce:	bb58      	cbnz	r0, 8003728 <_dtoa_r+0x708>
 80036d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036d8:	f7fd f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80036dc:	b108      	cbz	r0, 80036e2 <_dtoa_r+0x6c2>
 80036de:	07e1      	lsls	r1, r4, #31
 80036e0:	d422      	bmi.n	8003728 <_dtoa_r+0x708>
 80036e2:	4628      	mov	r0, r5
 80036e4:	4651      	mov	r1, sl
 80036e6:	f000 fd03 	bl	80040f0 <_Bfree>
 80036ea:	2300      	movs	r3, #0
 80036ec:	703b      	strb	r3, [r7, #0]
 80036ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80036f0:	f109 0001 	add.w	r0, r9, #1
 80036f4:	6018      	str	r0, [r3, #0]
 80036f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f43f acde 	beq.w	80030ba <_dtoa_r+0x9a>
 80036fe:	601f      	str	r7, [r3, #0]
 8003700:	e4db      	b.n	80030ba <_dtoa_r+0x9a>
 8003702:	4627      	mov	r7, r4
 8003704:	463b      	mov	r3, r7
 8003706:	461f      	mov	r7, r3
 8003708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800370c:	2a39      	cmp	r2, #57	; 0x39
 800370e:	d107      	bne.n	8003720 <_dtoa_r+0x700>
 8003710:	9a08      	ldr	r2, [sp, #32]
 8003712:	429a      	cmp	r2, r3
 8003714:	d1f7      	bne.n	8003706 <_dtoa_r+0x6e6>
 8003716:	9908      	ldr	r1, [sp, #32]
 8003718:	2230      	movs	r2, #48	; 0x30
 800371a:	f108 0801 	add.w	r8, r8, #1
 800371e:	700a      	strb	r2, [r1, #0]
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	3201      	adds	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e79f      	b.n	8003668 <_dtoa_r+0x648>
 8003728:	46c8      	mov	r8, r9
 800372a:	e7eb      	b.n	8003704 <_dtoa_r+0x6e4>
 800372c:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <_dtoa_r+0x8d0>)
 800372e:	2200      	movs	r2, #0
 8003730:	f7fc ff6a 	bl	8000608 <__aeabi_dmul>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800373c:	2200      	movs	r2, #0
 800373e:	2300      	movs	r3, #0
 8003740:	f7fd f9ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8003744:	2800      	cmp	r0, #0
 8003746:	d098      	beq.n	800367a <_dtoa_r+0x65a>
 8003748:	e7cb      	b.n	80036e2 <_dtoa_r+0x6c2>
 800374a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800374c:	2a00      	cmp	r2, #0
 800374e:	f000 80d1 	beq.w	80038f4 <_dtoa_r+0x8d4>
 8003752:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003754:	2a01      	cmp	r2, #1
 8003756:	f300 80af 	bgt.w	80038b8 <_dtoa_r+0x898>
 800375a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800375c:	2a00      	cmp	r2, #0
 800375e:	f000 80a7 	beq.w	80038b0 <_dtoa_r+0x890>
 8003762:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003766:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003768:	9f06      	ldr	r7, [sp, #24]
 800376a:	9a06      	ldr	r2, [sp, #24]
 800376c:	441a      	add	r2, r3
 800376e:	9206      	str	r2, [sp, #24]
 8003770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003772:	2101      	movs	r1, #1
 8003774:	441a      	add	r2, r3
 8003776:	4628      	mov	r0, r5
 8003778:	9209      	str	r2, [sp, #36]	; 0x24
 800377a:	f000 fd73 	bl	8004264 <__i2b>
 800377e:	4606      	mov	r6, r0
 8003780:	2f00      	cmp	r7, #0
 8003782:	dd0c      	ble.n	800379e <_dtoa_r+0x77e>
 8003784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	dd09      	ble.n	800379e <_dtoa_r+0x77e>
 800378a:	42bb      	cmp	r3, r7
 800378c:	9a06      	ldr	r2, [sp, #24]
 800378e:	bfa8      	it	ge
 8003790:	463b      	movge	r3, r7
 8003792:	1ad2      	subs	r2, r2, r3
 8003794:	9206      	str	r2, [sp, #24]
 8003796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003798:	1aff      	subs	r7, r7, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	9309      	str	r3, [sp, #36]	; 0x24
 800379e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037a0:	b1f3      	cbz	r3, 80037e0 <_dtoa_r+0x7c0>
 80037a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a9 	beq.w	80038fc <_dtoa_r+0x8dc>
 80037aa:	2c00      	cmp	r4, #0
 80037ac:	dd10      	ble.n	80037d0 <_dtoa_r+0x7b0>
 80037ae:	4631      	mov	r1, r6
 80037b0:	4622      	mov	r2, r4
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 fe12 	bl	80043dc <__pow5mult>
 80037b8:	4652      	mov	r2, sl
 80037ba:	4601      	mov	r1, r0
 80037bc:	4606      	mov	r6, r0
 80037be:	4628      	mov	r0, r5
 80037c0:	f000 fd66 	bl	8004290 <__multiply>
 80037c4:	4651      	mov	r1, sl
 80037c6:	4680      	mov	r8, r0
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fc91 	bl	80040f0 <_Bfree>
 80037ce:	46c2      	mov	sl, r8
 80037d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d2:	1b1a      	subs	r2, r3, r4
 80037d4:	d004      	beq.n	80037e0 <_dtoa_r+0x7c0>
 80037d6:	4651      	mov	r1, sl
 80037d8:	4628      	mov	r0, r5
 80037da:	f000 fdff 	bl	80043dc <__pow5mult>
 80037de:	4682      	mov	sl, r0
 80037e0:	2101      	movs	r1, #1
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 fd3e 	bl	8004264 <__i2b>
 80037e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	4604      	mov	r4, r0
 80037ee:	f340 8087 	ble.w	8003900 <_dtoa_r+0x8e0>
 80037f2:	461a      	mov	r2, r3
 80037f4:	4601      	mov	r1, r0
 80037f6:	4628      	mov	r0, r5
 80037f8:	f000 fdf0 	bl	80043dc <__pow5mult>
 80037fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037fe:	2b01      	cmp	r3, #1
 8003800:	4604      	mov	r4, r0
 8003802:	f340 8080 	ble.w	8003906 <_dtoa_r+0x8e6>
 8003806:	f04f 0800 	mov.w	r8, #0
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003810:	6918      	ldr	r0, [r3, #16]
 8003812:	f000 fcd9 	bl	80041c8 <__hi0bits>
 8003816:	f1c0 0020 	rsb	r0, r0, #32
 800381a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800381c:	4418      	add	r0, r3
 800381e:	f010 001f 	ands.w	r0, r0, #31
 8003822:	f000 8092 	beq.w	800394a <_dtoa_r+0x92a>
 8003826:	f1c0 0320 	rsb	r3, r0, #32
 800382a:	2b04      	cmp	r3, #4
 800382c:	f340 808a 	ble.w	8003944 <_dtoa_r+0x924>
 8003830:	f1c0 001c 	rsb	r0, r0, #28
 8003834:	9b06      	ldr	r3, [sp, #24]
 8003836:	4403      	add	r3, r0
 8003838:	9306      	str	r3, [sp, #24]
 800383a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800383c:	4403      	add	r3, r0
 800383e:	4407      	add	r7, r0
 8003840:	9309      	str	r3, [sp, #36]	; 0x24
 8003842:	9b06      	ldr	r3, [sp, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	dd05      	ble.n	8003854 <_dtoa_r+0x834>
 8003848:	4651      	mov	r1, sl
 800384a:	461a      	mov	r2, r3
 800384c:	4628      	mov	r0, r5
 800384e:	f000 fe1f 	bl	8004490 <__lshift>
 8003852:	4682      	mov	sl, r0
 8003854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	dd05      	ble.n	8003866 <_dtoa_r+0x846>
 800385a:	4621      	mov	r1, r4
 800385c:	461a      	mov	r2, r3
 800385e:	4628      	mov	r0, r5
 8003860:	f000 fe16 	bl	8004490 <__lshift>
 8003864:	4604      	mov	r4, r0
 8003866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d070      	beq.n	800394e <_dtoa_r+0x92e>
 800386c:	4621      	mov	r1, r4
 800386e:	4650      	mov	r0, sl
 8003870:	f000 fe7a 	bl	8004568 <__mcmp>
 8003874:	2800      	cmp	r0, #0
 8003876:	da6a      	bge.n	800394e <_dtoa_r+0x92e>
 8003878:	2300      	movs	r3, #0
 800387a:	4651      	mov	r1, sl
 800387c:	220a      	movs	r2, #10
 800387e:	4628      	mov	r0, r5
 8003880:	f000 fc58 	bl	8004134 <__multadd>
 8003884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003886:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800388a:	4682      	mov	sl, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8193 	beq.w	8003bb8 <_dtoa_r+0xb98>
 8003892:	4631      	mov	r1, r6
 8003894:	2300      	movs	r3, #0
 8003896:	220a      	movs	r2, #10
 8003898:	4628      	mov	r0, r5
 800389a:	f000 fc4b 	bl	8004134 <__multadd>
 800389e:	f1bb 0f00 	cmp.w	fp, #0
 80038a2:	4606      	mov	r6, r0
 80038a4:	f300 8093 	bgt.w	80039ce <_dtoa_r+0x9ae>
 80038a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	dc57      	bgt.n	800395e <_dtoa_r+0x93e>
 80038ae:	e08e      	b.n	80039ce <_dtoa_r+0x9ae>
 80038b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80038b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80038b6:	e756      	b.n	8003766 <_dtoa_r+0x746>
 80038b8:	9b02      	ldr	r3, [sp, #8]
 80038ba:	1e5c      	subs	r4, r3, #1
 80038bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038be:	42a3      	cmp	r3, r4
 80038c0:	bfbf      	itttt	lt
 80038c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80038c4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80038c6:	1ae2      	sublt	r2, r4, r3
 80038c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80038ca:	bfb6      	itet	lt
 80038cc:	189b      	addlt	r3, r3, r2
 80038ce:	1b1c      	subge	r4, r3, r4
 80038d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80038d2:	9b02      	ldr	r3, [sp, #8]
 80038d4:	bfb8      	it	lt
 80038d6:	2400      	movlt	r4, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bfb9      	ittee	lt
 80038dc:	9b06      	ldrlt	r3, [sp, #24]
 80038de:	9a02      	ldrlt	r2, [sp, #8]
 80038e0:	9f06      	ldrge	r7, [sp, #24]
 80038e2:	9b02      	ldrge	r3, [sp, #8]
 80038e4:	bfbc      	itt	lt
 80038e6:	1a9f      	sublt	r7, r3, r2
 80038e8:	2300      	movlt	r3, #0
 80038ea:	e73e      	b.n	800376a <_dtoa_r+0x74a>
 80038ec:	3fe00000 	.word	0x3fe00000
 80038f0:	40240000 	.word	0x40240000
 80038f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80038f6:	9f06      	ldr	r7, [sp, #24]
 80038f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80038fa:	e741      	b.n	8003780 <_dtoa_r+0x760>
 80038fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038fe:	e76a      	b.n	80037d6 <_dtoa_r+0x7b6>
 8003900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003902:	2b01      	cmp	r3, #1
 8003904:	dc19      	bgt.n	800393a <_dtoa_r+0x91a>
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	b9bb      	cbnz	r3, 800393a <_dtoa_r+0x91a>
 800390a:	9b05      	ldr	r3, [sp, #20]
 800390c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003910:	b99b      	cbnz	r3, 800393a <_dtoa_r+0x91a>
 8003912:	9b05      	ldr	r3, [sp, #20]
 8003914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003918:	0d1b      	lsrs	r3, r3, #20
 800391a:	051b      	lsls	r3, r3, #20
 800391c:	b183      	cbz	r3, 8003940 <_dtoa_r+0x920>
 800391e:	9b06      	ldr	r3, [sp, #24]
 8003920:	3301      	adds	r3, #1
 8003922:	9306      	str	r3, [sp, #24]
 8003924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003926:	3301      	adds	r3, #1
 8003928:	9309      	str	r3, [sp, #36]	; 0x24
 800392a:	f04f 0801 	mov.w	r8, #1
 800392e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	f47f af6a 	bne.w	800380a <_dtoa_r+0x7ea>
 8003936:	2001      	movs	r0, #1
 8003938:	e76f      	b.n	800381a <_dtoa_r+0x7fa>
 800393a:	f04f 0800 	mov.w	r8, #0
 800393e:	e7f6      	b.n	800392e <_dtoa_r+0x90e>
 8003940:	4698      	mov	r8, r3
 8003942:	e7f4      	b.n	800392e <_dtoa_r+0x90e>
 8003944:	f43f af7d 	beq.w	8003842 <_dtoa_r+0x822>
 8003948:	4618      	mov	r0, r3
 800394a:	301c      	adds	r0, #28
 800394c:	e772      	b.n	8003834 <_dtoa_r+0x814>
 800394e:	9b02      	ldr	r3, [sp, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	dc36      	bgt.n	80039c2 <_dtoa_r+0x9a2>
 8003954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003956:	2b02      	cmp	r3, #2
 8003958:	dd33      	ble.n	80039c2 <_dtoa_r+0x9a2>
 800395a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800395e:	f1bb 0f00 	cmp.w	fp, #0
 8003962:	d10d      	bne.n	8003980 <_dtoa_r+0x960>
 8003964:	4621      	mov	r1, r4
 8003966:	465b      	mov	r3, fp
 8003968:	2205      	movs	r2, #5
 800396a:	4628      	mov	r0, r5
 800396c:	f000 fbe2 	bl	8004134 <__multadd>
 8003970:	4601      	mov	r1, r0
 8003972:	4604      	mov	r4, r0
 8003974:	4650      	mov	r0, sl
 8003976:	f000 fdf7 	bl	8004568 <__mcmp>
 800397a:	2800      	cmp	r0, #0
 800397c:	f73f adb6 	bgt.w	80034ec <_dtoa_r+0x4cc>
 8003980:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003982:	9f08      	ldr	r7, [sp, #32]
 8003984:	ea6f 0903 	mvn.w	r9, r3
 8003988:	f04f 0800 	mov.w	r8, #0
 800398c:	4621      	mov	r1, r4
 800398e:	4628      	mov	r0, r5
 8003990:	f000 fbae 	bl	80040f0 <_Bfree>
 8003994:	2e00      	cmp	r6, #0
 8003996:	f43f aea4 	beq.w	80036e2 <_dtoa_r+0x6c2>
 800399a:	f1b8 0f00 	cmp.w	r8, #0
 800399e:	d005      	beq.n	80039ac <_dtoa_r+0x98c>
 80039a0:	45b0      	cmp	r8, r6
 80039a2:	d003      	beq.n	80039ac <_dtoa_r+0x98c>
 80039a4:	4641      	mov	r1, r8
 80039a6:	4628      	mov	r0, r5
 80039a8:	f000 fba2 	bl	80040f0 <_Bfree>
 80039ac:	4631      	mov	r1, r6
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 fb9e 	bl	80040f0 <_Bfree>
 80039b4:	e695      	b.n	80036e2 <_dtoa_r+0x6c2>
 80039b6:	2400      	movs	r4, #0
 80039b8:	4626      	mov	r6, r4
 80039ba:	e7e1      	b.n	8003980 <_dtoa_r+0x960>
 80039bc:	46c1      	mov	r9, r8
 80039be:	4626      	mov	r6, r4
 80039c0:	e594      	b.n	80034ec <_dtoa_r+0x4cc>
 80039c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80fc 	beq.w	8003bc6 <_dtoa_r+0xba6>
 80039ce:	2f00      	cmp	r7, #0
 80039d0:	dd05      	ble.n	80039de <_dtoa_r+0x9be>
 80039d2:	4631      	mov	r1, r6
 80039d4:	463a      	mov	r2, r7
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 fd5a 	bl	8004490 <__lshift>
 80039dc:	4606      	mov	r6, r0
 80039de:	f1b8 0f00 	cmp.w	r8, #0
 80039e2:	d05c      	beq.n	8003a9e <_dtoa_r+0xa7e>
 80039e4:	6871      	ldr	r1, [r6, #4]
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 fb42 	bl	8004070 <_Balloc>
 80039ec:	4607      	mov	r7, r0
 80039ee:	b928      	cbnz	r0, 80039fc <_dtoa_r+0x9dc>
 80039f0:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <_dtoa_r+0xbd0>)
 80039f2:	4602      	mov	r2, r0
 80039f4:	f240 21ea 	movw	r1, #746	; 0x2ea
 80039f8:	f7ff bb26 	b.w	8003048 <_dtoa_r+0x28>
 80039fc:	6932      	ldr	r2, [r6, #16]
 80039fe:	3202      	adds	r2, #2
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	f106 010c 	add.w	r1, r6, #12
 8003a06:	300c      	adds	r0, #12
 8003a08:	f000 fb24 	bl	8004054 <memcpy>
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4639      	mov	r1, r7
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 fd3d 	bl	8004490 <__lshift>
 8003a16:	9b08      	ldr	r3, [sp, #32]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	9302      	str	r3, [sp, #8]
 8003a1c:	9b08      	ldr	r3, [sp, #32]
 8003a1e:	445b      	add	r3, fp
 8003a20:	930a      	str	r3, [sp, #40]	; 0x28
 8003a22:	9b04      	ldr	r3, [sp, #16]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	46b0      	mov	r8, r6
 8003a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	9b02      	ldr	r3, [sp, #8]
 8003a30:	4621      	mov	r1, r4
 8003a32:	4650      	mov	r0, sl
 8003a34:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003a38:	f7ff fa66 	bl	8002f08 <quorem>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	3330      	adds	r3, #48	; 0x30
 8003a40:	9004      	str	r0, [sp, #16]
 8003a42:	4641      	mov	r1, r8
 8003a44:	4650      	mov	r0, sl
 8003a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a48:	f000 fd8e 	bl	8004568 <__mcmp>
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	9006      	str	r0, [sp, #24]
 8003a50:	4621      	mov	r1, r4
 8003a52:	4628      	mov	r0, r5
 8003a54:	f000 fda4 	bl	80045a0 <__mdiff>
 8003a58:	68c2      	ldr	r2, [r0, #12]
 8003a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a5c:	4607      	mov	r7, r0
 8003a5e:	bb02      	cbnz	r2, 8003aa2 <_dtoa_r+0xa82>
 8003a60:	4601      	mov	r1, r0
 8003a62:	4650      	mov	r0, sl
 8003a64:	f000 fd80 	bl	8004568 <__mcmp>
 8003a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	4628      	mov	r0, r5
 8003a70:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003a74:	f000 fb3c 	bl	80040f0 <_Bfree>
 8003a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a7c:	9f02      	ldr	r7, [sp, #8]
 8003a7e:	ea43 0102 	orr.w	r1, r3, r2
 8003a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a84:	430b      	orrs	r3, r1
 8003a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a88:	d10d      	bne.n	8003aa6 <_dtoa_r+0xa86>
 8003a8a:	2b39      	cmp	r3, #57	; 0x39
 8003a8c:	d027      	beq.n	8003ade <_dtoa_r+0xabe>
 8003a8e:	9a06      	ldr	r2, [sp, #24]
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	dd01      	ble.n	8003a98 <_dtoa_r+0xa78>
 8003a94:	9b04      	ldr	r3, [sp, #16]
 8003a96:	3331      	adds	r3, #49	; 0x31
 8003a98:	f88b 3000 	strb.w	r3, [fp]
 8003a9c:	e776      	b.n	800398c <_dtoa_r+0x96c>
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	e7b9      	b.n	8003a16 <_dtoa_r+0x9f6>
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	e7e2      	b.n	8003a6c <_dtoa_r+0xa4c>
 8003aa6:	9906      	ldr	r1, [sp, #24]
 8003aa8:	2900      	cmp	r1, #0
 8003aaa:	db04      	blt.n	8003ab6 <_dtoa_r+0xa96>
 8003aac:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003aae:	4301      	orrs	r1, r0
 8003ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ab2:	4301      	orrs	r1, r0
 8003ab4:	d120      	bne.n	8003af8 <_dtoa_r+0xad8>
 8003ab6:	2a00      	cmp	r2, #0
 8003ab8:	ddee      	ble.n	8003a98 <_dtoa_r+0xa78>
 8003aba:	4651      	mov	r1, sl
 8003abc:	2201      	movs	r2, #1
 8003abe:	4628      	mov	r0, r5
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	f000 fce5 	bl	8004490 <__lshift>
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4682      	mov	sl, r0
 8003aca:	f000 fd4d 	bl	8004568 <__mcmp>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	9b02      	ldr	r3, [sp, #8]
 8003ad2:	dc02      	bgt.n	8003ada <_dtoa_r+0xaba>
 8003ad4:	d1e0      	bne.n	8003a98 <_dtoa_r+0xa78>
 8003ad6:	07da      	lsls	r2, r3, #31
 8003ad8:	d5de      	bpl.n	8003a98 <_dtoa_r+0xa78>
 8003ada:	2b39      	cmp	r3, #57	; 0x39
 8003adc:	d1da      	bne.n	8003a94 <_dtoa_r+0xa74>
 8003ade:	2339      	movs	r3, #57	; 0x39
 8003ae0:	f88b 3000 	strb.w	r3, [fp]
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	461f      	mov	r7, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003aee:	2a39      	cmp	r2, #57	; 0x39
 8003af0:	d050      	beq.n	8003b94 <_dtoa_r+0xb74>
 8003af2:	3201      	adds	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e749      	b.n	800398c <_dtoa_r+0x96c>
 8003af8:	2a00      	cmp	r2, #0
 8003afa:	dd03      	ble.n	8003b04 <_dtoa_r+0xae4>
 8003afc:	2b39      	cmp	r3, #57	; 0x39
 8003afe:	d0ee      	beq.n	8003ade <_dtoa_r+0xabe>
 8003b00:	3301      	adds	r3, #1
 8003b02:	e7c9      	b.n	8003a98 <_dtoa_r+0xa78>
 8003b04:	9a02      	ldr	r2, [sp, #8]
 8003b06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003b0c:	428a      	cmp	r2, r1
 8003b0e:	d02a      	beq.n	8003b66 <_dtoa_r+0xb46>
 8003b10:	4651      	mov	r1, sl
 8003b12:	2300      	movs	r3, #0
 8003b14:	220a      	movs	r2, #10
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 fb0c 	bl	8004134 <__multadd>
 8003b1c:	45b0      	cmp	r8, r6
 8003b1e:	4682      	mov	sl, r0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	f04f 020a 	mov.w	r2, #10
 8003b28:	4641      	mov	r1, r8
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	d107      	bne.n	8003b3e <_dtoa_r+0xb1e>
 8003b2e:	f000 fb01 	bl	8004134 <__multadd>
 8003b32:	4680      	mov	r8, r0
 8003b34:	4606      	mov	r6, r0
 8003b36:	9b02      	ldr	r3, [sp, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	9302      	str	r3, [sp, #8]
 8003b3c:	e777      	b.n	8003a2e <_dtoa_r+0xa0e>
 8003b3e:	f000 faf9 	bl	8004134 <__multadd>
 8003b42:	4631      	mov	r1, r6
 8003b44:	4680      	mov	r8, r0
 8003b46:	2300      	movs	r3, #0
 8003b48:	220a      	movs	r2, #10
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f000 faf2 	bl	8004134 <__multadd>
 8003b50:	4606      	mov	r6, r0
 8003b52:	e7f0      	b.n	8003b36 <_dtoa_r+0xb16>
 8003b54:	f1bb 0f00 	cmp.w	fp, #0
 8003b58:	9a08      	ldr	r2, [sp, #32]
 8003b5a:	bfcc      	ite	gt
 8003b5c:	465f      	movgt	r7, fp
 8003b5e:	2701      	movle	r7, #1
 8003b60:	4417      	add	r7, r2
 8003b62:	f04f 0800 	mov.w	r8, #0
 8003b66:	4651      	mov	r1, sl
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	9302      	str	r3, [sp, #8]
 8003b6e:	f000 fc8f 	bl	8004490 <__lshift>
 8003b72:	4621      	mov	r1, r4
 8003b74:	4682      	mov	sl, r0
 8003b76:	f000 fcf7 	bl	8004568 <__mcmp>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	dcb2      	bgt.n	8003ae4 <_dtoa_r+0xac4>
 8003b7e:	d102      	bne.n	8003b86 <_dtoa_r+0xb66>
 8003b80:	9b02      	ldr	r3, [sp, #8]
 8003b82:	07db      	lsls	r3, r3, #31
 8003b84:	d4ae      	bmi.n	8003ae4 <_dtoa_r+0xac4>
 8003b86:	463b      	mov	r3, r7
 8003b88:	461f      	mov	r7, r3
 8003b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b8e:	2a30      	cmp	r2, #48	; 0x30
 8003b90:	d0fa      	beq.n	8003b88 <_dtoa_r+0xb68>
 8003b92:	e6fb      	b.n	800398c <_dtoa_r+0x96c>
 8003b94:	9a08      	ldr	r2, [sp, #32]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d1a5      	bne.n	8003ae6 <_dtoa_r+0xac6>
 8003b9a:	2331      	movs	r3, #49	; 0x31
 8003b9c:	f109 0901 	add.w	r9, r9, #1
 8003ba0:	7013      	strb	r3, [r2, #0]
 8003ba2:	e6f3      	b.n	800398c <_dtoa_r+0x96c>
 8003ba4:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <_dtoa_r+0xbd4>)
 8003ba6:	f7ff baa6 	b.w	80030f6 <_dtoa_r+0xd6>
 8003baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f47f aa7f 	bne.w	80030b0 <_dtoa_r+0x90>
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <_dtoa_r+0xbd8>)
 8003bb4:	f7ff ba9f 	b.w	80030f6 <_dtoa_r+0xd6>
 8003bb8:	f1bb 0f00 	cmp.w	fp, #0
 8003bbc:	dc03      	bgt.n	8003bc6 <_dtoa_r+0xba6>
 8003bbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	f73f aecc 	bgt.w	800395e <_dtoa_r+0x93e>
 8003bc6:	9f08      	ldr	r7, [sp, #32]
 8003bc8:	4621      	mov	r1, r4
 8003bca:	4650      	mov	r0, sl
 8003bcc:	f7ff f99c 	bl	8002f08 <quorem>
 8003bd0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003bd4:	f807 3b01 	strb.w	r3, [r7], #1
 8003bd8:	9a08      	ldr	r2, [sp, #32]
 8003bda:	1aba      	subs	r2, r7, r2
 8003bdc:	4593      	cmp	fp, r2
 8003bde:	ddb9      	ble.n	8003b54 <_dtoa_r+0xb34>
 8003be0:	4651      	mov	r1, sl
 8003be2:	2300      	movs	r3, #0
 8003be4:	220a      	movs	r2, #10
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 faa4 	bl	8004134 <__multadd>
 8003bec:	4682      	mov	sl, r0
 8003bee:	e7eb      	b.n	8003bc8 <_dtoa_r+0xba8>
 8003bf0:	08004f47 	.word	0x08004f47
 8003bf4:	08004ea0 	.word	0x08004ea0
 8003bf8:	08004ec4 	.word	0x08004ec4

08003bfc <__sflush_r>:
 8003bfc:	898a      	ldrh	r2, [r1, #12]
 8003bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c02:	4605      	mov	r5, r0
 8003c04:	0710      	lsls	r0, r2, #28
 8003c06:	460c      	mov	r4, r1
 8003c08:	d458      	bmi.n	8003cbc <__sflush_r+0xc0>
 8003c0a:	684b      	ldr	r3, [r1, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	dc05      	bgt.n	8003c1c <__sflush_r+0x20>
 8003c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	dc02      	bgt.n	8003c1c <__sflush_r+0x20>
 8003c16:	2000      	movs	r0, #0
 8003c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c1e:	2e00      	cmp	r6, #0
 8003c20:	d0f9      	beq.n	8003c16 <__sflush_r+0x1a>
 8003c22:	2300      	movs	r3, #0
 8003c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c28:	682f      	ldr	r7, [r5, #0]
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	d032      	beq.n	8003c94 <__sflush_r+0x98>
 8003c2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	075a      	lsls	r2, r3, #29
 8003c34:	d505      	bpl.n	8003c42 <__sflush_r+0x46>
 8003c36:	6863      	ldr	r3, [r4, #4]
 8003c38:	1ac0      	subs	r0, r0, r3
 8003c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c3c:	b10b      	cbz	r3, 8003c42 <__sflush_r+0x46>
 8003c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c40:	1ac0      	subs	r0, r0, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	4602      	mov	r2, r0
 8003c46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c48:	6a21      	ldr	r1, [r4, #32]
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	47b0      	blx	r6
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	d106      	bne.n	8003c62 <__sflush_r+0x66>
 8003c54:	6829      	ldr	r1, [r5, #0]
 8003c56:	291d      	cmp	r1, #29
 8003c58:	d82c      	bhi.n	8003cb4 <__sflush_r+0xb8>
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <__sflush_r+0x108>)
 8003c5c:	40ca      	lsrs	r2, r1
 8003c5e:	07d6      	lsls	r6, r2, #31
 8003c60:	d528      	bpl.n	8003cb4 <__sflush_r+0xb8>
 8003c62:	2200      	movs	r2, #0
 8003c64:	6062      	str	r2, [r4, #4]
 8003c66:	04d9      	lsls	r1, r3, #19
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	6022      	str	r2, [r4, #0]
 8003c6c:	d504      	bpl.n	8003c78 <__sflush_r+0x7c>
 8003c6e:	1c42      	adds	r2, r0, #1
 8003c70:	d101      	bne.n	8003c76 <__sflush_r+0x7a>
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	b903      	cbnz	r3, 8003c78 <__sflush_r+0x7c>
 8003c76:	6560      	str	r0, [r4, #84]	; 0x54
 8003c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c7a:	602f      	str	r7, [r5, #0]
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d0ca      	beq.n	8003c16 <__sflush_r+0x1a>
 8003c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c84:	4299      	cmp	r1, r3
 8003c86:	d002      	beq.n	8003c8e <__sflush_r+0x92>
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f000 fd7d 	bl	8004788 <_free_r>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	6360      	str	r0, [r4, #52]	; 0x34
 8003c92:	e7c1      	b.n	8003c18 <__sflush_r+0x1c>
 8003c94:	6a21      	ldr	r1, [r4, #32]
 8003c96:	2301      	movs	r3, #1
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b0      	blx	r6
 8003c9c:	1c41      	adds	r1, r0, #1
 8003c9e:	d1c7      	bne.n	8003c30 <__sflush_r+0x34>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0c4      	beq.n	8003c30 <__sflush_r+0x34>
 8003ca6:	2b1d      	cmp	r3, #29
 8003ca8:	d001      	beq.n	8003cae <__sflush_r+0xb2>
 8003caa:	2b16      	cmp	r3, #22
 8003cac:	d101      	bne.n	8003cb2 <__sflush_r+0xb6>
 8003cae:	602f      	str	r7, [r5, #0]
 8003cb0:	e7b1      	b.n	8003c16 <__sflush_r+0x1a>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	e7ad      	b.n	8003c18 <__sflush_r+0x1c>
 8003cbc:	690f      	ldr	r7, [r1, #16]
 8003cbe:	2f00      	cmp	r7, #0
 8003cc0:	d0a9      	beq.n	8003c16 <__sflush_r+0x1a>
 8003cc2:	0793      	lsls	r3, r2, #30
 8003cc4:	680e      	ldr	r6, [r1, #0]
 8003cc6:	bf08      	it	eq
 8003cc8:	694b      	ldreq	r3, [r1, #20]
 8003cca:	600f      	str	r7, [r1, #0]
 8003ccc:	bf18      	it	ne
 8003cce:	2300      	movne	r3, #0
 8003cd0:	eba6 0807 	sub.w	r8, r6, r7
 8003cd4:	608b      	str	r3, [r1, #8]
 8003cd6:	f1b8 0f00 	cmp.w	r8, #0
 8003cda:	dd9c      	ble.n	8003c16 <__sflush_r+0x1a>
 8003cdc:	6a21      	ldr	r1, [r4, #32]
 8003cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b0      	blx	r6
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	dc06      	bgt.n	8003cfa <__sflush_r+0xfe>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf8:	e78e      	b.n	8003c18 <__sflush_r+0x1c>
 8003cfa:	4407      	add	r7, r0
 8003cfc:	eba8 0800 	sub.w	r8, r8, r0
 8003d00:	e7e9      	b.n	8003cd6 <__sflush_r+0xda>
 8003d02:	bf00      	nop
 8003d04:	20400001 	.word	0x20400001

08003d08 <_fflush_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	690b      	ldr	r3, [r1, #16]
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	b913      	cbnz	r3, 8003d18 <_fflush_r+0x10>
 8003d12:	2500      	movs	r5, #0
 8003d14:	4628      	mov	r0, r5
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	b118      	cbz	r0, 8003d22 <_fflush_r+0x1a>
 8003d1a:	6983      	ldr	r3, [r0, #24]
 8003d1c:	b90b      	cbnz	r3, 8003d22 <_fflush_r+0x1a>
 8003d1e:	f000 f887 	bl	8003e30 <__sinit>
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <_fflush_r+0x6c>)
 8003d24:	429c      	cmp	r4, r3
 8003d26:	d11b      	bne.n	8003d60 <_fflush_r+0x58>
 8003d28:	686c      	ldr	r4, [r5, #4]
 8003d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ef      	beq.n	8003d12 <_fflush_r+0xa>
 8003d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d34:	07d0      	lsls	r0, r2, #31
 8003d36:	d404      	bmi.n	8003d42 <_fflush_r+0x3a>
 8003d38:	0599      	lsls	r1, r3, #22
 8003d3a:	d402      	bmi.n	8003d42 <_fflush_r+0x3a>
 8003d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d3e:	f000 f91a 	bl	8003f76 <__retarget_lock_acquire_recursive>
 8003d42:	4628      	mov	r0, r5
 8003d44:	4621      	mov	r1, r4
 8003d46:	f7ff ff59 	bl	8003bfc <__sflush_r>
 8003d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d4c:	07da      	lsls	r2, r3, #31
 8003d4e:	4605      	mov	r5, r0
 8003d50:	d4e0      	bmi.n	8003d14 <_fflush_r+0xc>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	059b      	lsls	r3, r3, #22
 8003d56:	d4dd      	bmi.n	8003d14 <_fflush_r+0xc>
 8003d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d5a:	f000 f90d 	bl	8003f78 <__retarget_lock_release_recursive>
 8003d5e:	e7d9      	b.n	8003d14 <_fflush_r+0xc>
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <_fflush_r+0x70>)
 8003d62:	429c      	cmp	r4, r3
 8003d64:	d101      	bne.n	8003d6a <_fflush_r+0x62>
 8003d66:	68ac      	ldr	r4, [r5, #8]
 8003d68:	e7df      	b.n	8003d2a <_fflush_r+0x22>
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <_fflush_r+0x74>)
 8003d6c:	429c      	cmp	r4, r3
 8003d6e:	bf08      	it	eq
 8003d70:	68ec      	ldreq	r4, [r5, #12]
 8003d72:	e7da      	b.n	8003d2a <_fflush_r+0x22>
 8003d74:	08004f78 	.word	0x08004f78
 8003d78:	08004f98 	.word	0x08004f98
 8003d7c:	08004f58 	.word	0x08004f58

08003d80 <std>:
 8003d80:	2300      	movs	r3, #0
 8003d82:	b510      	push	{r4, lr}
 8003d84:	4604      	mov	r4, r0
 8003d86:	e9c0 3300 	strd	r3, r3, [r0]
 8003d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d8e:	6083      	str	r3, [r0, #8]
 8003d90:	8181      	strh	r1, [r0, #12]
 8003d92:	6643      	str	r3, [r0, #100]	; 0x64
 8003d94:	81c2      	strh	r2, [r0, #14]
 8003d96:	6183      	str	r3, [r0, #24]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	305c      	adds	r0, #92	; 0x5c
 8003d9e:	f7fe fb19 	bl	80023d4 <memset>
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <std+0x38>)
 8003da4:	6263      	str	r3, [r4, #36]	; 0x24
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <std+0x3c>)
 8003da8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <std+0x40>)
 8003dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <std+0x44>)
 8003db0:	6224      	str	r4, [r4, #32]
 8003db2:	6323      	str	r3, [r4, #48]	; 0x30
 8003db4:	bd10      	pop	{r4, pc}
 8003db6:	bf00      	nop
 8003db8:	080048f9 	.word	0x080048f9
 8003dbc:	0800491b 	.word	0x0800491b
 8003dc0:	08004953 	.word	0x08004953
 8003dc4:	08004977 	.word	0x08004977

08003dc8 <_cleanup_r>:
 8003dc8:	4901      	ldr	r1, [pc, #4]	; (8003dd0 <_cleanup_r+0x8>)
 8003dca:	f000 b8af 	b.w	8003f2c <_fwalk_reent>
 8003dce:	bf00      	nop
 8003dd0:	08003d09 	.word	0x08003d09

08003dd4 <__sfmoreglue>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	1e4a      	subs	r2, r1, #1
 8003dd8:	2568      	movs	r5, #104	; 0x68
 8003dda:	4355      	muls	r5, r2
 8003ddc:	460e      	mov	r6, r1
 8003dde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003de2:	f000 fd1f 	bl	8004824 <_malloc_r>
 8003de6:	4604      	mov	r4, r0
 8003de8:	b140      	cbz	r0, 8003dfc <__sfmoreglue+0x28>
 8003dea:	2100      	movs	r1, #0
 8003dec:	e9c0 1600 	strd	r1, r6, [r0]
 8003df0:	300c      	adds	r0, #12
 8003df2:	60a0      	str	r0, [r4, #8]
 8003df4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003df8:	f7fe faec 	bl	80023d4 <memset>
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}

08003e00 <__sfp_lock_acquire>:
 8003e00:	4801      	ldr	r0, [pc, #4]	; (8003e08 <__sfp_lock_acquire+0x8>)
 8003e02:	f000 b8b8 	b.w	8003f76 <__retarget_lock_acquire_recursive>
 8003e06:	bf00      	nop
 8003e08:	20000330 	.word	0x20000330

08003e0c <__sfp_lock_release>:
 8003e0c:	4801      	ldr	r0, [pc, #4]	; (8003e14 <__sfp_lock_release+0x8>)
 8003e0e:	f000 b8b3 	b.w	8003f78 <__retarget_lock_release_recursive>
 8003e12:	bf00      	nop
 8003e14:	20000330 	.word	0x20000330

08003e18 <__sinit_lock_acquire>:
 8003e18:	4801      	ldr	r0, [pc, #4]	; (8003e20 <__sinit_lock_acquire+0x8>)
 8003e1a:	f000 b8ac 	b.w	8003f76 <__retarget_lock_acquire_recursive>
 8003e1e:	bf00      	nop
 8003e20:	2000032b 	.word	0x2000032b

08003e24 <__sinit_lock_release>:
 8003e24:	4801      	ldr	r0, [pc, #4]	; (8003e2c <__sinit_lock_release+0x8>)
 8003e26:	f000 b8a7 	b.w	8003f78 <__retarget_lock_release_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	2000032b 	.word	0x2000032b

08003e30 <__sinit>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	4604      	mov	r4, r0
 8003e34:	f7ff fff0 	bl	8003e18 <__sinit_lock_acquire>
 8003e38:	69a3      	ldr	r3, [r4, #24]
 8003e3a:	b11b      	cbz	r3, 8003e44 <__sinit+0x14>
 8003e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e40:	f7ff bff0 	b.w	8003e24 <__sinit_lock_release>
 8003e44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e48:	6523      	str	r3, [r4, #80]	; 0x50
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <__sinit+0x68>)
 8003e4c:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <__sinit+0x6c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	bf04      	itt	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	61a3      	streq	r3, [r4, #24]
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 f820 	bl	8003ea0 <__sfp>
 8003e60:	6060      	str	r0, [r4, #4]
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 f81c 	bl	8003ea0 <__sfp>
 8003e68:	60a0      	str	r0, [r4, #8]
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 f818 	bl	8003ea0 <__sfp>
 8003e70:	2200      	movs	r2, #0
 8003e72:	60e0      	str	r0, [r4, #12]
 8003e74:	2104      	movs	r1, #4
 8003e76:	6860      	ldr	r0, [r4, #4]
 8003e78:	f7ff ff82 	bl	8003d80 <std>
 8003e7c:	68a0      	ldr	r0, [r4, #8]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2109      	movs	r1, #9
 8003e82:	f7ff ff7d 	bl	8003d80 <std>
 8003e86:	68e0      	ldr	r0, [r4, #12]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	2112      	movs	r1, #18
 8003e8c:	f7ff ff78 	bl	8003d80 <std>
 8003e90:	2301      	movs	r3, #1
 8003e92:	61a3      	str	r3, [r4, #24]
 8003e94:	e7d2      	b.n	8003e3c <__sinit+0xc>
 8003e96:	bf00      	nop
 8003e98:	08004e8c 	.word	0x08004e8c
 8003e9c:	08003dc9 	.word	0x08003dc9

08003ea0 <__sfp>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	4607      	mov	r7, r0
 8003ea4:	f7ff ffac 	bl	8003e00 <__sfp_lock_acquire>
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <__sfp+0x84>)
 8003eaa:	681e      	ldr	r6, [r3, #0]
 8003eac:	69b3      	ldr	r3, [r6, #24]
 8003eae:	b913      	cbnz	r3, 8003eb6 <__sfp+0x16>
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f7ff ffbd 	bl	8003e30 <__sinit>
 8003eb6:	3648      	adds	r6, #72	; 0x48
 8003eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	d503      	bpl.n	8003ec8 <__sfp+0x28>
 8003ec0:	6833      	ldr	r3, [r6, #0]
 8003ec2:	b30b      	cbz	r3, 8003f08 <__sfp+0x68>
 8003ec4:	6836      	ldr	r6, [r6, #0]
 8003ec6:	e7f7      	b.n	8003eb8 <__sfp+0x18>
 8003ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ecc:	b9d5      	cbnz	r5, 8003f04 <__sfp+0x64>
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <__sfp+0x88>)
 8003ed0:	60e3      	str	r3, [r4, #12]
 8003ed2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ed6:	6665      	str	r5, [r4, #100]	; 0x64
 8003ed8:	f000 f84c 	bl	8003f74 <__retarget_lock_init_recursive>
 8003edc:	f7ff ff96 	bl	8003e0c <__sfp_lock_release>
 8003ee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ee8:	6025      	str	r5, [r4, #0]
 8003eea:	61a5      	str	r5, [r4, #24]
 8003eec:	2208      	movs	r2, #8
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ef4:	f7fe fa6e 	bl	80023d4 <memset>
 8003ef8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003efc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f00:	4620      	mov	r0, r4
 8003f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f04:	3468      	adds	r4, #104	; 0x68
 8003f06:	e7d9      	b.n	8003ebc <__sfp+0x1c>
 8003f08:	2104      	movs	r1, #4
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	f7ff ff62 	bl	8003dd4 <__sfmoreglue>
 8003f10:	4604      	mov	r4, r0
 8003f12:	6030      	str	r0, [r6, #0]
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1d5      	bne.n	8003ec4 <__sfp+0x24>
 8003f18:	f7ff ff78 	bl	8003e0c <__sfp_lock_release>
 8003f1c:	230c      	movs	r3, #12
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	e7ee      	b.n	8003f00 <__sfp+0x60>
 8003f22:	bf00      	nop
 8003f24:	08004e8c 	.word	0x08004e8c
 8003f28:	ffff0001 	.word	0xffff0001

08003f2c <_fwalk_reent>:
 8003f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f30:	4606      	mov	r6, r0
 8003f32:	4688      	mov	r8, r1
 8003f34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f38:	2700      	movs	r7, #0
 8003f3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f3e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f42:	d505      	bpl.n	8003f50 <_fwalk_reent+0x24>
 8003f44:	6824      	ldr	r4, [r4, #0]
 8003f46:	2c00      	cmp	r4, #0
 8003f48:	d1f7      	bne.n	8003f3a <_fwalk_reent+0xe>
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f50:	89ab      	ldrh	r3, [r5, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d907      	bls.n	8003f66 <_fwalk_reent+0x3a>
 8003f56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	d003      	beq.n	8003f66 <_fwalk_reent+0x3a>
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4630      	mov	r0, r6
 8003f62:	47c0      	blx	r8
 8003f64:	4307      	orrs	r7, r0
 8003f66:	3568      	adds	r5, #104	; 0x68
 8003f68:	e7e9      	b.n	8003f3e <_fwalk_reent+0x12>
	...

08003f6c <_localeconv_r>:
 8003f6c:	4800      	ldr	r0, [pc, #0]	; (8003f70 <_localeconv_r+0x4>)
 8003f6e:	4770      	bx	lr
 8003f70:	20000160 	.word	0x20000160

08003f74 <__retarget_lock_init_recursive>:
 8003f74:	4770      	bx	lr

08003f76 <__retarget_lock_acquire_recursive>:
 8003f76:	4770      	bx	lr

08003f78 <__retarget_lock_release_recursive>:
 8003f78:	4770      	bx	lr

08003f7a <__swhatbuf_r>:
 8003f7a:	b570      	push	{r4, r5, r6, lr}
 8003f7c:	460e      	mov	r6, r1
 8003f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f82:	2900      	cmp	r1, #0
 8003f84:	b096      	sub	sp, #88	; 0x58
 8003f86:	4614      	mov	r4, r2
 8003f88:	461d      	mov	r5, r3
 8003f8a:	da07      	bge.n	8003f9c <__swhatbuf_r+0x22>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	89b3      	ldrh	r3, [r6, #12]
 8003f92:	061a      	lsls	r2, r3, #24
 8003f94:	d410      	bmi.n	8003fb8 <__swhatbuf_r+0x3e>
 8003f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9a:	e00e      	b.n	8003fba <__swhatbuf_r+0x40>
 8003f9c:	466a      	mov	r2, sp
 8003f9e:	f000 fd41 	bl	8004a24 <_fstat_r>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	dbf2      	blt.n	8003f8c <__swhatbuf_r+0x12>
 8003fa6:	9a01      	ldr	r2, [sp, #4]
 8003fa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fb0:	425a      	negs	r2, r3
 8003fb2:	415a      	adcs	r2, r3
 8003fb4:	602a      	str	r2, [r5, #0]
 8003fb6:	e7ee      	b.n	8003f96 <__swhatbuf_r+0x1c>
 8003fb8:	2340      	movs	r3, #64	; 0x40
 8003fba:	2000      	movs	r0, #0
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	b016      	add	sp, #88	; 0x58
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fc4 <__smakebuf_r>:
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fc8:	079d      	lsls	r5, r3, #30
 8003fca:	4606      	mov	r6, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	d507      	bpl.n	8003fe0 <__smakebuf_r+0x1c>
 8003fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	6163      	str	r3, [r4, #20]
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	ab01      	add	r3, sp, #4
 8003fe2:	466a      	mov	r2, sp
 8003fe4:	f7ff ffc9 	bl	8003f7a <__swhatbuf_r>
 8003fe8:	9900      	ldr	r1, [sp, #0]
 8003fea:	4605      	mov	r5, r0
 8003fec:	4630      	mov	r0, r6
 8003fee:	f000 fc19 	bl	8004824 <_malloc_r>
 8003ff2:	b948      	cbnz	r0, 8004008 <__smakebuf_r+0x44>
 8003ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ff8:	059a      	lsls	r2, r3, #22
 8003ffa:	d4ef      	bmi.n	8003fdc <__smakebuf_r+0x18>
 8003ffc:	f023 0303 	bic.w	r3, r3, #3
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	e7e3      	b.n	8003fd0 <__smakebuf_r+0xc>
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <__smakebuf_r+0x7c>)
 800400a:	62b3      	str	r3, [r6, #40]	; 0x28
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	6020      	str	r0, [r4, #0]
 8004010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004014:	81a3      	strh	r3, [r4, #12]
 8004016:	9b00      	ldr	r3, [sp, #0]
 8004018:	6163      	str	r3, [r4, #20]
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	6120      	str	r0, [r4, #16]
 800401e:	b15b      	cbz	r3, 8004038 <__smakebuf_r+0x74>
 8004020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004024:	4630      	mov	r0, r6
 8004026:	f000 fd0f 	bl	8004a48 <_isatty_r>
 800402a:	b128      	cbz	r0, 8004038 <__smakebuf_r+0x74>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	89a0      	ldrh	r0, [r4, #12]
 800403a:	4305      	orrs	r5, r0
 800403c:	81a5      	strh	r5, [r4, #12]
 800403e:	e7cd      	b.n	8003fdc <__smakebuf_r+0x18>
 8004040:	08003dc9 	.word	0x08003dc9

08004044 <malloc>:
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <malloc+0xc>)
 8004046:	4601      	mov	r1, r0
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	f000 bbeb 	b.w	8004824 <_malloc_r>
 800404e:	bf00      	nop
 8004050:	2000000c 	.word	0x2000000c

08004054 <memcpy>:
 8004054:	440a      	add	r2, r1
 8004056:	4291      	cmp	r1, r2
 8004058:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800405c:	d100      	bne.n	8004060 <memcpy+0xc>
 800405e:	4770      	bx	lr
 8004060:	b510      	push	{r4, lr}
 8004062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800406a:	4291      	cmp	r1, r2
 800406c:	d1f9      	bne.n	8004062 <memcpy+0xe>
 800406e:	bd10      	pop	{r4, pc}

08004070 <_Balloc>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004074:	4604      	mov	r4, r0
 8004076:	460d      	mov	r5, r1
 8004078:	b976      	cbnz	r6, 8004098 <_Balloc+0x28>
 800407a:	2010      	movs	r0, #16
 800407c:	f7ff ffe2 	bl	8004044 <malloc>
 8004080:	4602      	mov	r2, r0
 8004082:	6260      	str	r0, [r4, #36]	; 0x24
 8004084:	b920      	cbnz	r0, 8004090 <_Balloc+0x20>
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <_Balloc+0x78>)
 8004088:	4818      	ldr	r0, [pc, #96]	; (80040ec <_Balloc+0x7c>)
 800408a:	2166      	movs	r1, #102	; 0x66
 800408c:	f000 fc8a 	bl	80049a4 <__assert_func>
 8004090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004094:	6006      	str	r6, [r0, #0]
 8004096:	60c6      	str	r6, [r0, #12]
 8004098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800409a:	68f3      	ldr	r3, [r6, #12]
 800409c:	b183      	cbz	r3, 80040c0 <_Balloc+0x50>
 800409e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80040a6:	b9b8      	cbnz	r0, 80040d8 <_Balloc+0x68>
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f605 	lsl.w	r6, r1, r5
 80040ae:	1d72      	adds	r2, r6, #5
 80040b0:	0092      	lsls	r2, r2, #2
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 fb5a 	bl	800476c <_calloc_r>
 80040b8:	b160      	cbz	r0, 80040d4 <_Balloc+0x64>
 80040ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80040be:	e00e      	b.n	80040de <_Balloc+0x6e>
 80040c0:	2221      	movs	r2, #33	; 0x21
 80040c2:	2104      	movs	r1, #4
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 fb51 	bl	800476c <_calloc_r>
 80040ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040cc:	60f0      	str	r0, [r6, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e4      	bne.n	800409e <_Balloc+0x2e>
 80040d4:	2000      	movs	r0, #0
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	6802      	ldr	r2, [r0, #0]
 80040da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80040de:	2300      	movs	r3, #0
 80040e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80040e4:	e7f7      	b.n	80040d6 <_Balloc+0x66>
 80040e6:	bf00      	nop
 80040e8:	08004ed1 	.word	0x08004ed1
 80040ec:	08004fb8 	.word	0x08004fb8

080040f0 <_Bfree>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040f4:	4605      	mov	r5, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	b976      	cbnz	r6, 8004118 <_Bfree+0x28>
 80040fa:	2010      	movs	r0, #16
 80040fc:	f7ff ffa2 	bl	8004044 <malloc>
 8004100:	4602      	mov	r2, r0
 8004102:	6268      	str	r0, [r5, #36]	; 0x24
 8004104:	b920      	cbnz	r0, 8004110 <_Bfree+0x20>
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <_Bfree+0x3c>)
 8004108:	4809      	ldr	r0, [pc, #36]	; (8004130 <_Bfree+0x40>)
 800410a:	218a      	movs	r1, #138	; 0x8a
 800410c:	f000 fc4a 	bl	80049a4 <__assert_func>
 8004110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004114:	6006      	str	r6, [r0, #0]
 8004116:	60c6      	str	r6, [r0, #12]
 8004118:	b13c      	cbz	r4, 800412a <_Bfree+0x3a>
 800411a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800411c:	6862      	ldr	r2, [r4, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004124:	6021      	str	r1, [r4, #0]
 8004126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800412a:	bd70      	pop	{r4, r5, r6, pc}
 800412c:	08004ed1 	.word	0x08004ed1
 8004130:	08004fb8 	.word	0x08004fb8

08004134 <__multadd>:
 8004134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004138:	690e      	ldr	r6, [r1, #16]
 800413a:	4607      	mov	r7, r0
 800413c:	4698      	mov	r8, r3
 800413e:	460c      	mov	r4, r1
 8004140:	f101 0014 	add.w	r0, r1, #20
 8004144:	2300      	movs	r3, #0
 8004146:	6805      	ldr	r5, [r0, #0]
 8004148:	b2a9      	uxth	r1, r5
 800414a:	fb02 8101 	mla	r1, r2, r1, r8
 800414e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004152:	0c2d      	lsrs	r5, r5, #16
 8004154:	fb02 c505 	mla	r5, r2, r5, ip
 8004158:	b289      	uxth	r1, r1
 800415a:	3301      	adds	r3, #1
 800415c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004160:	429e      	cmp	r6, r3
 8004162:	f840 1b04 	str.w	r1, [r0], #4
 8004166:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800416a:	dcec      	bgt.n	8004146 <__multadd+0x12>
 800416c:	f1b8 0f00 	cmp.w	r8, #0
 8004170:	d022      	beq.n	80041b8 <__multadd+0x84>
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	42b3      	cmp	r3, r6
 8004176:	dc19      	bgt.n	80041ac <__multadd+0x78>
 8004178:	6861      	ldr	r1, [r4, #4]
 800417a:	4638      	mov	r0, r7
 800417c:	3101      	adds	r1, #1
 800417e:	f7ff ff77 	bl	8004070 <_Balloc>
 8004182:	4605      	mov	r5, r0
 8004184:	b928      	cbnz	r0, 8004192 <__multadd+0x5e>
 8004186:	4602      	mov	r2, r0
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <__multadd+0x8c>)
 800418a:	480e      	ldr	r0, [pc, #56]	; (80041c4 <__multadd+0x90>)
 800418c:	21b5      	movs	r1, #181	; 0xb5
 800418e:	f000 fc09 	bl	80049a4 <__assert_func>
 8004192:	6922      	ldr	r2, [r4, #16]
 8004194:	3202      	adds	r2, #2
 8004196:	f104 010c 	add.w	r1, r4, #12
 800419a:	0092      	lsls	r2, r2, #2
 800419c:	300c      	adds	r0, #12
 800419e:	f7ff ff59 	bl	8004054 <memcpy>
 80041a2:	4621      	mov	r1, r4
 80041a4:	4638      	mov	r0, r7
 80041a6:	f7ff ffa3 	bl	80040f0 <_Bfree>
 80041aa:	462c      	mov	r4, r5
 80041ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80041b0:	3601      	adds	r6, #1
 80041b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80041b6:	6126      	str	r6, [r4, #16]
 80041b8:	4620      	mov	r0, r4
 80041ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041be:	bf00      	nop
 80041c0:	08004f47 	.word	0x08004f47
 80041c4:	08004fb8 	.word	0x08004fb8

080041c8 <__hi0bits>:
 80041c8:	0c02      	lsrs	r2, r0, #16
 80041ca:	0412      	lsls	r2, r2, #16
 80041cc:	4603      	mov	r3, r0
 80041ce:	b9ca      	cbnz	r2, 8004204 <__hi0bits+0x3c>
 80041d0:	0403      	lsls	r3, r0, #16
 80041d2:	2010      	movs	r0, #16
 80041d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80041d8:	bf04      	itt	eq
 80041da:	021b      	lsleq	r3, r3, #8
 80041dc:	3008      	addeq	r0, #8
 80041de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80041e2:	bf04      	itt	eq
 80041e4:	011b      	lsleq	r3, r3, #4
 80041e6:	3004      	addeq	r0, #4
 80041e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80041ec:	bf04      	itt	eq
 80041ee:	009b      	lsleq	r3, r3, #2
 80041f0:	3002      	addeq	r0, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	db05      	blt.n	8004202 <__hi0bits+0x3a>
 80041f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80041fa:	f100 0001 	add.w	r0, r0, #1
 80041fe:	bf08      	it	eq
 8004200:	2020      	moveq	r0, #32
 8004202:	4770      	bx	lr
 8004204:	2000      	movs	r0, #0
 8004206:	e7e5      	b.n	80041d4 <__hi0bits+0xc>

08004208 <__lo0bits>:
 8004208:	6803      	ldr	r3, [r0, #0]
 800420a:	4602      	mov	r2, r0
 800420c:	f013 0007 	ands.w	r0, r3, #7
 8004210:	d00b      	beq.n	800422a <__lo0bits+0x22>
 8004212:	07d9      	lsls	r1, r3, #31
 8004214:	d422      	bmi.n	800425c <__lo0bits+0x54>
 8004216:	0798      	lsls	r0, r3, #30
 8004218:	bf49      	itett	mi
 800421a:	085b      	lsrmi	r3, r3, #1
 800421c:	089b      	lsrpl	r3, r3, #2
 800421e:	2001      	movmi	r0, #1
 8004220:	6013      	strmi	r3, [r2, #0]
 8004222:	bf5c      	itt	pl
 8004224:	6013      	strpl	r3, [r2, #0]
 8004226:	2002      	movpl	r0, #2
 8004228:	4770      	bx	lr
 800422a:	b299      	uxth	r1, r3
 800422c:	b909      	cbnz	r1, 8004232 <__lo0bits+0x2a>
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	2010      	movs	r0, #16
 8004232:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004236:	bf04      	itt	eq
 8004238:	0a1b      	lsreq	r3, r3, #8
 800423a:	3008      	addeq	r0, #8
 800423c:	0719      	lsls	r1, r3, #28
 800423e:	bf04      	itt	eq
 8004240:	091b      	lsreq	r3, r3, #4
 8004242:	3004      	addeq	r0, #4
 8004244:	0799      	lsls	r1, r3, #30
 8004246:	bf04      	itt	eq
 8004248:	089b      	lsreq	r3, r3, #2
 800424a:	3002      	addeq	r0, #2
 800424c:	07d9      	lsls	r1, r3, #31
 800424e:	d403      	bmi.n	8004258 <__lo0bits+0x50>
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	f100 0001 	add.w	r0, r0, #1
 8004256:	d003      	beq.n	8004260 <__lo0bits+0x58>
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4770      	bx	lr
 800425c:	2000      	movs	r0, #0
 800425e:	4770      	bx	lr
 8004260:	2020      	movs	r0, #32
 8004262:	4770      	bx	lr

08004264 <__i2b>:
 8004264:	b510      	push	{r4, lr}
 8004266:	460c      	mov	r4, r1
 8004268:	2101      	movs	r1, #1
 800426a:	f7ff ff01 	bl	8004070 <_Balloc>
 800426e:	4602      	mov	r2, r0
 8004270:	b928      	cbnz	r0, 800427e <__i2b+0x1a>
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <__i2b+0x24>)
 8004274:	4805      	ldr	r0, [pc, #20]	; (800428c <__i2b+0x28>)
 8004276:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800427a:	f000 fb93 	bl	80049a4 <__assert_func>
 800427e:	2301      	movs	r3, #1
 8004280:	6144      	str	r4, [r0, #20]
 8004282:	6103      	str	r3, [r0, #16]
 8004284:	bd10      	pop	{r4, pc}
 8004286:	bf00      	nop
 8004288:	08004f47 	.word	0x08004f47
 800428c:	08004fb8 	.word	0x08004fb8

08004290 <__multiply>:
 8004290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	4614      	mov	r4, r2
 8004296:	690a      	ldr	r2, [r1, #16]
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	429a      	cmp	r2, r3
 800429c:	bfb8      	it	lt
 800429e:	460b      	movlt	r3, r1
 80042a0:	460d      	mov	r5, r1
 80042a2:	bfbc      	itt	lt
 80042a4:	4625      	movlt	r5, r4
 80042a6:	461c      	movlt	r4, r3
 80042a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80042ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80042b0:	68ab      	ldr	r3, [r5, #8]
 80042b2:	6869      	ldr	r1, [r5, #4]
 80042b4:	eb0a 0709 	add.w	r7, sl, r9
 80042b8:	42bb      	cmp	r3, r7
 80042ba:	b085      	sub	sp, #20
 80042bc:	bfb8      	it	lt
 80042be:	3101      	addlt	r1, #1
 80042c0:	f7ff fed6 	bl	8004070 <_Balloc>
 80042c4:	b930      	cbnz	r0, 80042d4 <__multiply+0x44>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <__multiply+0x144>)
 80042ca:	4843      	ldr	r0, [pc, #268]	; (80043d8 <__multiply+0x148>)
 80042cc:	f240 115d 	movw	r1, #349	; 0x15d
 80042d0:	f000 fb68 	bl	80049a4 <__assert_func>
 80042d4:	f100 0614 	add.w	r6, r0, #20
 80042d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80042dc:	4633      	mov	r3, r6
 80042de:	2200      	movs	r2, #0
 80042e0:	4543      	cmp	r3, r8
 80042e2:	d31e      	bcc.n	8004322 <__multiply+0x92>
 80042e4:	f105 0c14 	add.w	ip, r5, #20
 80042e8:	f104 0314 	add.w	r3, r4, #20
 80042ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80042f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80042f4:	9202      	str	r2, [sp, #8]
 80042f6:	ebac 0205 	sub.w	r2, ip, r5
 80042fa:	3a15      	subs	r2, #21
 80042fc:	f022 0203 	bic.w	r2, r2, #3
 8004300:	3204      	adds	r2, #4
 8004302:	f105 0115 	add.w	r1, r5, #21
 8004306:	458c      	cmp	ip, r1
 8004308:	bf38      	it	cc
 800430a:	2204      	movcc	r2, #4
 800430c:	9201      	str	r2, [sp, #4]
 800430e:	9a02      	ldr	r2, [sp, #8]
 8004310:	9303      	str	r3, [sp, #12]
 8004312:	429a      	cmp	r2, r3
 8004314:	d808      	bhi.n	8004328 <__multiply+0x98>
 8004316:	2f00      	cmp	r7, #0
 8004318:	dc55      	bgt.n	80043c6 <__multiply+0x136>
 800431a:	6107      	str	r7, [r0, #16]
 800431c:	b005      	add	sp, #20
 800431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004322:	f843 2b04 	str.w	r2, [r3], #4
 8004326:	e7db      	b.n	80042e0 <__multiply+0x50>
 8004328:	f8b3 a000 	ldrh.w	sl, [r3]
 800432c:	f1ba 0f00 	cmp.w	sl, #0
 8004330:	d020      	beq.n	8004374 <__multiply+0xe4>
 8004332:	f105 0e14 	add.w	lr, r5, #20
 8004336:	46b1      	mov	r9, r6
 8004338:	2200      	movs	r2, #0
 800433a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800433e:	f8d9 b000 	ldr.w	fp, [r9]
 8004342:	b2a1      	uxth	r1, r4
 8004344:	fa1f fb8b 	uxth.w	fp, fp
 8004348:	fb0a b101 	mla	r1, sl, r1, fp
 800434c:	4411      	add	r1, r2
 800434e:	f8d9 2000 	ldr.w	r2, [r9]
 8004352:	0c24      	lsrs	r4, r4, #16
 8004354:	0c12      	lsrs	r2, r2, #16
 8004356:	fb0a 2404 	mla	r4, sl, r4, r2
 800435a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800435e:	b289      	uxth	r1, r1
 8004360:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004364:	45f4      	cmp	ip, lr
 8004366:	f849 1b04 	str.w	r1, [r9], #4
 800436a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800436e:	d8e4      	bhi.n	800433a <__multiply+0xaa>
 8004370:	9901      	ldr	r1, [sp, #4]
 8004372:	5072      	str	r2, [r6, r1]
 8004374:	9a03      	ldr	r2, [sp, #12]
 8004376:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800437a:	3304      	adds	r3, #4
 800437c:	f1b9 0f00 	cmp.w	r9, #0
 8004380:	d01f      	beq.n	80043c2 <__multiply+0x132>
 8004382:	6834      	ldr	r4, [r6, #0]
 8004384:	f105 0114 	add.w	r1, r5, #20
 8004388:	46b6      	mov	lr, r6
 800438a:	f04f 0a00 	mov.w	sl, #0
 800438e:	880a      	ldrh	r2, [r1, #0]
 8004390:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004394:	fb09 b202 	mla	r2, r9, r2, fp
 8004398:	4492      	add	sl, r2
 800439a:	b2a4      	uxth	r4, r4
 800439c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80043a0:	f84e 4b04 	str.w	r4, [lr], #4
 80043a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80043a8:	f8be 2000 	ldrh.w	r2, [lr]
 80043ac:	0c24      	lsrs	r4, r4, #16
 80043ae:	fb09 2404 	mla	r4, r9, r4, r2
 80043b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80043b6:	458c      	cmp	ip, r1
 80043b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80043bc:	d8e7      	bhi.n	800438e <__multiply+0xfe>
 80043be:	9a01      	ldr	r2, [sp, #4]
 80043c0:	50b4      	str	r4, [r6, r2]
 80043c2:	3604      	adds	r6, #4
 80043c4:	e7a3      	b.n	800430e <__multiply+0x7e>
 80043c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1a5      	bne.n	800431a <__multiply+0x8a>
 80043ce:	3f01      	subs	r7, #1
 80043d0:	e7a1      	b.n	8004316 <__multiply+0x86>
 80043d2:	bf00      	nop
 80043d4:	08004f47 	.word	0x08004f47
 80043d8:	08004fb8 	.word	0x08004fb8

080043dc <__pow5mult>:
 80043dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e0:	4615      	mov	r5, r2
 80043e2:	f012 0203 	ands.w	r2, r2, #3
 80043e6:	4606      	mov	r6, r0
 80043e8:	460f      	mov	r7, r1
 80043ea:	d007      	beq.n	80043fc <__pow5mult+0x20>
 80043ec:	4c25      	ldr	r4, [pc, #148]	; (8004484 <__pow5mult+0xa8>)
 80043ee:	3a01      	subs	r2, #1
 80043f0:	2300      	movs	r3, #0
 80043f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80043f6:	f7ff fe9d 	bl	8004134 <__multadd>
 80043fa:	4607      	mov	r7, r0
 80043fc:	10ad      	asrs	r5, r5, #2
 80043fe:	d03d      	beq.n	800447c <__pow5mult+0xa0>
 8004400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004402:	b97c      	cbnz	r4, 8004424 <__pow5mult+0x48>
 8004404:	2010      	movs	r0, #16
 8004406:	f7ff fe1d 	bl	8004044 <malloc>
 800440a:	4602      	mov	r2, r0
 800440c:	6270      	str	r0, [r6, #36]	; 0x24
 800440e:	b928      	cbnz	r0, 800441c <__pow5mult+0x40>
 8004410:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <__pow5mult+0xac>)
 8004412:	481e      	ldr	r0, [pc, #120]	; (800448c <__pow5mult+0xb0>)
 8004414:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004418:	f000 fac4 	bl	80049a4 <__assert_func>
 800441c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004420:	6004      	str	r4, [r0, #0]
 8004422:	60c4      	str	r4, [r0, #12]
 8004424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800442c:	b94c      	cbnz	r4, 8004442 <__pow5mult+0x66>
 800442e:	f240 2171 	movw	r1, #625	; 0x271
 8004432:	4630      	mov	r0, r6
 8004434:	f7ff ff16 	bl	8004264 <__i2b>
 8004438:	2300      	movs	r3, #0
 800443a:	f8c8 0008 	str.w	r0, [r8, #8]
 800443e:	4604      	mov	r4, r0
 8004440:	6003      	str	r3, [r0, #0]
 8004442:	f04f 0900 	mov.w	r9, #0
 8004446:	07eb      	lsls	r3, r5, #31
 8004448:	d50a      	bpl.n	8004460 <__pow5mult+0x84>
 800444a:	4639      	mov	r1, r7
 800444c:	4622      	mov	r2, r4
 800444e:	4630      	mov	r0, r6
 8004450:	f7ff ff1e 	bl	8004290 <__multiply>
 8004454:	4639      	mov	r1, r7
 8004456:	4680      	mov	r8, r0
 8004458:	4630      	mov	r0, r6
 800445a:	f7ff fe49 	bl	80040f0 <_Bfree>
 800445e:	4647      	mov	r7, r8
 8004460:	106d      	asrs	r5, r5, #1
 8004462:	d00b      	beq.n	800447c <__pow5mult+0xa0>
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	b938      	cbnz	r0, 8004478 <__pow5mult+0x9c>
 8004468:	4622      	mov	r2, r4
 800446a:	4621      	mov	r1, r4
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff ff0f 	bl	8004290 <__multiply>
 8004472:	6020      	str	r0, [r4, #0]
 8004474:	f8c0 9000 	str.w	r9, [r0]
 8004478:	4604      	mov	r4, r0
 800447a:	e7e4      	b.n	8004446 <__pow5mult+0x6a>
 800447c:	4638      	mov	r0, r7
 800447e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004482:	bf00      	nop
 8004484:	08005108 	.word	0x08005108
 8004488:	08004ed1 	.word	0x08004ed1
 800448c:	08004fb8 	.word	0x08004fb8

08004490 <__lshift>:
 8004490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	460c      	mov	r4, r1
 8004496:	6849      	ldr	r1, [r1, #4]
 8004498:	6923      	ldr	r3, [r4, #16]
 800449a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	4607      	mov	r7, r0
 80044a2:	4691      	mov	r9, r2
 80044a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80044a8:	f108 0601 	add.w	r6, r8, #1
 80044ac:	42b3      	cmp	r3, r6
 80044ae:	db0b      	blt.n	80044c8 <__lshift+0x38>
 80044b0:	4638      	mov	r0, r7
 80044b2:	f7ff fddd 	bl	8004070 <_Balloc>
 80044b6:	4605      	mov	r5, r0
 80044b8:	b948      	cbnz	r0, 80044ce <__lshift+0x3e>
 80044ba:	4602      	mov	r2, r0
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <__lshift+0xd0>)
 80044be:	4829      	ldr	r0, [pc, #164]	; (8004564 <__lshift+0xd4>)
 80044c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80044c4:	f000 fa6e 	bl	80049a4 <__assert_func>
 80044c8:	3101      	adds	r1, #1
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	e7ee      	b.n	80044ac <__lshift+0x1c>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f100 0114 	add.w	r1, r0, #20
 80044d4:	f100 0210 	add.w	r2, r0, #16
 80044d8:	4618      	mov	r0, r3
 80044da:	4553      	cmp	r3, sl
 80044dc:	db33      	blt.n	8004546 <__lshift+0xb6>
 80044de:	6920      	ldr	r0, [r4, #16]
 80044e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80044e4:	f104 0314 	add.w	r3, r4, #20
 80044e8:	f019 091f 	ands.w	r9, r9, #31
 80044ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80044f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80044f4:	d02b      	beq.n	800454e <__lshift+0xbe>
 80044f6:	f1c9 0e20 	rsb	lr, r9, #32
 80044fa:	468a      	mov	sl, r1
 80044fc:	2200      	movs	r2, #0
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	fa00 f009 	lsl.w	r0, r0, r9
 8004504:	4302      	orrs	r2, r0
 8004506:	f84a 2b04 	str.w	r2, [sl], #4
 800450a:	f853 2b04 	ldr.w	r2, [r3], #4
 800450e:	459c      	cmp	ip, r3
 8004510:	fa22 f20e 	lsr.w	r2, r2, lr
 8004514:	d8f3      	bhi.n	80044fe <__lshift+0x6e>
 8004516:	ebac 0304 	sub.w	r3, ip, r4
 800451a:	3b15      	subs	r3, #21
 800451c:	f023 0303 	bic.w	r3, r3, #3
 8004520:	3304      	adds	r3, #4
 8004522:	f104 0015 	add.w	r0, r4, #21
 8004526:	4584      	cmp	ip, r0
 8004528:	bf38      	it	cc
 800452a:	2304      	movcc	r3, #4
 800452c:	50ca      	str	r2, [r1, r3]
 800452e:	b10a      	cbz	r2, 8004534 <__lshift+0xa4>
 8004530:	f108 0602 	add.w	r6, r8, #2
 8004534:	3e01      	subs	r6, #1
 8004536:	4638      	mov	r0, r7
 8004538:	612e      	str	r6, [r5, #16]
 800453a:	4621      	mov	r1, r4
 800453c:	f7ff fdd8 	bl	80040f0 <_Bfree>
 8004540:	4628      	mov	r0, r5
 8004542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004546:	f842 0f04 	str.w	r0, [r2, #4]!
 800454a:	3301      	adds	r3, #1
 800454c:	e7c5      	b.n	80044da <__lshift+0x4a>
 800454e:	3904      	subs	r1, #4
 8004550:	f853 2b04 	ldr.w	r2, [r3], #4
 8004554:	f841 2f04 	str.w	r2, [r1, #4]!
 8004558:	459c      	cmp	ip, r3
 800455a:	d8f9      	bhi.n	8004550 <__lshift+0xc0>
 800455c:	e7ea      	b.n	8004534 <__lshift+0xa4>
 800455e:	bf00      	nop
 8004560:	08004f47 	.word	0x08004f47
 8004564:	08004fb8 	.word	0x08004fb8

08004568 <__mcmp>:
 8004568:	690a      	ldr	r2, [r1, #16]
 800456a:	4603      	mov	r3, r0
 800456c:	6900      	ldr	r0, [r0, #16]
 800456e:	1a80      	subs	r0, r0, r2
 8004570:	b530      	push	{r4, r5, lr}
 8004572:	d10d      	bne.n	8004590 <__mcmp+0x28>
 8004574:	3314      	adds	r3, #20
 8004576:	3114      	adds	r1, #20
 8004578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800457c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004588:	4295      	cmp	r5, r2
 800458a:	d002      	beq.n	8004592 <__mcmp+0x2a>
 800458c:	d304      	bcc.n	8004598 <__mcmp+0x30>
 800458e:	2001      	movs	r0, #1
 8004590:	bd30      	pop	{r4, r5, pc}
 8004592:	42a3      	cmp	r3, r4
 8004594:	d3f4      	bcc.n	8004580 <__mcmp+0x18>
 8004596:	e7fb      	b.n	8004590 <__mcmp+0x28>
 8004598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800459c:	e7f8      	b.n	8004590 <__mcmp+0x28>
	...

080045a0 <__mdiff>:
 80045a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	460c      	mov	r4, r1
 80045a6:	4606      	mov	r6, r0
 80045a8:	4611      	mov	r1, r2
 80045aa:	4620      	mov	r0, r4
 80045ac:	4617      	mov	r7, r2
 80045ae:	f7ff ffdb 	bl	8004568 <__mcmp>
 80045b2:	1e05      	subs	r5, r0, #0
 80045b4:	d111      	bne.n	80045da <__mdiff+0x3a>
 80045b6:	4629      	mov	r1, r5
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff fd59 	bl	8004070 <_Balloc>
 80045be:	4602      	mov	r2, r0
 80045c0:	b928      	cbnz	r0, 80045ce <__mdiff+0x2e>
 80045c2:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <__mdiff+0x10c>)
 80045c4:	f240 2132 	movw	r1, #562	; 0x232
 80045c8:	4839      	ldr	r0, [pc, #228]	; (80046b0 <__mdiff+0x110>)
 80045ca:	f000 f9eb 	bl	80049a4 <__assert_func>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80045d4:	4610      	mov	r0, r2
 80045d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	bfa4      	itt	ge
 80045dc:	463b      	movge	r3, r7
 80045de:	4627      	movge	r7, r4
 80045e0:	4630      	mov	r0, r6
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	bfa6      	itte	ge
 80045e6:	461c      	movge	r4, r3
 80045e8:	2500      	movge	r5, #0
 80045ea:	2501      	movlt	r5, #1
 80045ec:	f7ff fd40 	bl	8004070 <_Balloc>
 80045f0:	4602      	mov	r2, r0
 80045f2:	b918      	cbnz	r0, 80045fc <__mdiff+0x5c>
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <__mdiff+0x10c>)
 80045f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80045fa:	e7e5      	b.n	80045c8 <__mdiff+0x28>
 80045fc:	693e      	ldr	r6, [r7, #16]
 80045fe:	60c5      	str	r5, [r0, #12]
 8004600:	6925      	ldr	r5, [r4, #16]
 8004602:	f107 0114 	add.w	r1, r7, #20
 8004606:	f100 0e14 	add.w	lr, r0, #20
 800460a:	f104 0914 	add.w	r9, r4, #20
 800460e:	f107 0010 	add.w	r0, r7, #16
 8004612:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004616:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800461a:	46f2      	mov	sl, lr
 800461c:	2700      	movs	r7, #0
 800461e:	f859 3b04 	ldr.w	r3, [r9], #4
 8004622:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004626:	fa1f f883 	uxth.w	r8, r3
 800462a:	fa17 f78b 	uxtah	r7, r7, fp
 800462e:	0c1b      	lsrs	r3, r3, #16
 8004630:	eba7 0808 	sub.w	r8, r7, r8
 8004634:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004638:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800463c:	fa1f f888 	uxth.w	r8, r8
 8004640:	141f      	asrs	r7, r3, #16
 8004642:	454d      	cmp	r5, r9
 8004644:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004648:	f84a 3b04 	str.w	r3, [sl], #4
 800464c:	d8e7      	bhi.n	800461e <__mdiff+0x7e>
 800464e:	1b2b      	subs	r3, r5, r4
 8004650:	3b15      	subs	r3, #21
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	3304      	adds	r3, #4
 8004658:	3415      	adds	r4, #21
 800465a:	42a5      	cmp	r5, r4
 800465c:	bf38      	it	cc
 800465e:	2304      	movcc	r3, #4
 8004660:	4419      	add	r1, r3
 8004662:	4473      	add	r3, lr
 8004664:	469e      	mov	lr, r3
 8004666:	460d      	mov	r5, r1
 8004668:	4565      	cmp	r5, ip
 800466a:	d30e      	bcc.n	800468a <__mdiff+0xea>
 800466c:	f10c 0003 	add.w	r0, ip, #3
 8004670:	1a40      	subs	r0, r0, r1
 8004672:	f020 0003 	bic.w	r0, r0, #3
 8004676:	3903      	subs	r1, #3
 8004678:	458c      	cmp	ip, r1
 800467a:	bf38      	it	cc
 800467c:	2000      	movcc	r0, #0
 800467e:	4418      	add	r0, r3
 8004680:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8004684:	b17b      	cbz	r3, 80046a6 <__mdiff+0x106>
 8004686:	6116      	str	r6, [r2, #16]
 8004688:	e7a4      	b.n	80045d4 <__mdiff+0x34>
 800468a:	f855 8b04 	ldr.w	r8, [r5], #4
 800468e:	fa17 f488 	uxtah	r4, r7, r8
 8004692:	1420      	asrs	r0, r4, #16
 8004694:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004698:	b2a4      	uxth	r4, r4
 800469a:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800469e:	f84e 4b04 	str.w	r4, [lr], #4
 80046a2:	1407      	asrs	r7, r0, #16
 80046a4:	e7e0      	b.n	8004668 <__mdiff+0xc8>
 80046a6:	3e01      	subs	r6, #1
 80046a8:	e7ea      	b.n	8004680 <__mdiff+0xe0>
 80046aa:	bf00      	nop
 80046ac:	08004f47 	.word	0x08004f47
 80046b0:	08004fb8 	.word	0x08004fb8

080046b4 <__d2b>:
 80046b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046b8:	2101      	movs	r1, #1
 80046ba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80046be:	4690      	mov	r8, r2
 80046c0:	461d      	mov	r5, r3
 80046c2:	f7ff fcd5 	bl	8004070 <_Balloc>
 80046c6:	4604      	mov	r4, r0
 80046c8:	b930      	cbnz	r0, 80046d8 <__d2b+0x24>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <__d2b+0xb0>)
 80046ce:	4826      	ldr	r0, [pc, #152]	; (8004768 <__d2b+0xb4>)
 80046d0:	f240 310a 	movw	r1, #778	; 0x30a
 80046d4:	f000 f966 	bl	80049a4 <__assert_func>
 80046d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80046dc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80046e0:	bb2d      	cbnz	r5, 800472e <__d2b+0x7a>
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	f1b8 0300 	subs.w	r3, r8, #0
 80046e8:	d026      	beq.n	8004738 <__d2b+0x84>
 80046ea:	4668      	mov	r0, sp
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	f7ff fd8b 	bl	8004208 <__lo0bits>
 80046f2:	9900      	ldr	r1, [sp, #0]
 80046f4:	b1f0      	cbz	r0, 8004734 <__d2b+0x80>
 80046f6:	9a01      	ldr	r2, [sp, #4]
 80046f8:	f1c0 0320 	rsb	r3, r0, #32
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	430b      	orrs	r3, r1
 8004702:	40c2      	lsrs	r2, r0
 8004704:	6163      	str	r3, [r4, #20]
 8004706:	9201      	str	r2, [sp, #4]
 8004708:	9b01      	ldr	r3, [sp, #4]
 800470a:	61a3      	str	r3, [r4, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf14      	ite	ne
 8004710:	2102      	movne	r1, #2
 8004712:	2101      	moveq	r1, #1
 8004714:	6121      	str	r1, [r4, #16]
 8004716:	b1c5      	cbz	r5, 800474a <__d2b+0x96>
 8004718:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800471c:	4405      	add	r5, r0
 800471e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004722:	603d      	str	r5, [r7, #0]
 8004724:	6030      	str	r0, [r6, #0]
 8004726:	4620      	mov	r0, r4
 8004728:	b002      	add	sp, #8
 800472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800472e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004732:	e7d6      	b.n	80046e2 <__d2b+0x2e>
 8004734:	6161      	str	r1, [r4, #20]
 8004736:	e7e7      	b.n	8004708 <__d2b+0x54>
 8004738:	a801      	add	r0, sp, #4
 800473a:	f7ff fd65 	bl	8004208 <__lo0bits>
 800473e:	9b01      	ldr	r3, [sp, #4]
 8004740:	6163      	str	r3, [r4, #20]
 8004742:	2101      	movs	r1, #1
 8004744:	6121      	str	r1, [r4, #16]
 8004746:	3020      	adds	r0, #32
 8004748:	e7e5      	b.n	8004716 <__d2b+0x62>
 800474a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800474e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004752:	6038      	str	r0, [r7, #0]
 8004754:	6918      	ldr	r0, [r3, #16]
 8004756:	f7ff fd37 	bl	80041c8 <__hi0bits>
 800475a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800475e:	6031      	str	r1, [r6, #0]
 8004760:	e7e1      	b.n	8004726 <__d2b+0x72>
 8004762:	bf00      	nop
 8004764:	08004f47 	.word	0x08004f47
 8004768:	08004fb8 	.word	0x08004fb8

0800476c <_calloc_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	fb02 f501 	mul.w	r5, r2, r1
 8004772:	4629      	mov	r1, r5
 8004774:	f000 f856 	bl	8004824 <_malloc_r>
 8004778:	4604      	mov	r4, r0
 800477a:	b118      	cbz	r0, 8004784 <_calloc_r+0x18>
 800477c:	462a      	mov	r2, r5
 800477e:	2100      	movs	r1, #0
 8004780:	f7fd fe28 	bl	80023d4 <memset>
 8004784:	4620      	mov	r0, r4
 8004786:	bd38      	pop	{r3, r4, r5, pc}

08004788 <_free_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	2900      	cmp	r1, #0
 800478e:	d045      	beq.n	800481c <_free_r+0x94>
 8004790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004794:	1f0c      	subs	r4, r1, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfb8      	it	lt
 800479a:	18e4      	addlt	r4, r4, r3
 800479c:	f000 f988 	bl	8004ab0 <__malloc_lock>
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <_free_r+0x98>)
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	4610      	mov	r0, r2
 80047a6:	b933      	cbnz	r3, 80047b6 <_free_r+0x2e>
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	6014      	str	r4, [r2, #0]
 80047ac:	4628      	mov	r0, r5
 80047ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b2:	f000 b983 	b.w	8004abc <__malloc_unlock>
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	d90b      	bls.n	80047d2 <_free_r+0x4a>
 80047ba:	6821      	ldr	r1, [r4, #0]
 80047bc:	1862      	adds	r2, r4, r1
 80047be:	4293      	cmp	r3, r2
 80047c0:	bf04      	itt	eq
 80047c2:	681a      	ldreq	r2, [r3, #0]
 80047c4:	685b      	ldreq	r3, [r3, #4]
 80047c6:	6063      	str	r3, [r4, #4]
 80047c8:	bf04      	itt	eq
 80047ca:	1852      	addeq	r2, r2, r1
 80047cc:	6022      	streq	r2, [r4, #0]
 80047ce:	6004      	str	r4, [r0, #0]
 80047d0:	e7ec      	b.n	80047ac <_free_r+0x24>
 80047d2:	461a      	mov	r2, r3
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b10b      	cbz	r3, 80047dc <_free_r+0x54>
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d9fa      	bls.n	80047d2 <_free_r+0x4a>
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	1850      	adds	r0, r2, r1
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d10b      	bne.n	80047fc <_free_r+0x74>
 80047e4:	6820      	ldr	r0, [r4, #0]
 80047e6:	4401      	add	r1, r0
 80047e8:	1850      	adds	r0, r2, r1
 80047ea:	4283      	cmp	r3, r0
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	d1dd      	bne.n	80047ac <_free_r+0x24>
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	6053      	str	r3, [r2, #4]
 80047f6:	4401      	add	r1, r0
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	e7d7      	b.n	80047ac <_free_r+0x24>
 80047fc:	d902      	bls.n	8004804 <_free_r+0x7c>
 80047fe:	230c      	movs	r3, #12
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	e7d3      	b.n	80047ac <_free_r+0x24>
 8004804:	6820      	ldr	r0, [r4, #0]
 8004806:	1821      	adds	r1, r4, r0
 8004808:	428b      	cmp	r3, r1
 800480a:	bf04      	itt	eq
 800480c:	6819      	ldreq	r1, [r3, #0]
 800480e:	685b      	ldreq	r3, [r3, #4]
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	bf04      	itt	eq
 8004814:	1809      	addeq	r1, r1, r0
 8004816:	6021      	streq	r1, [r4, #0]
 8004818:	6054      	str	r4, [r2, #4]
 800481a:	e7c7      	b.n	80047ac <_free_r+0x24>
 800481c:	bd38      	pop	{r3, r4, r5, pc}
 800481e:	bf00      	nop
 8004820:	20000200 	.word	0x20000200

08004824 <_malloc_r>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	1ccd      	adds	r5, r1, #3
 8004828:	f025 0503 	bic.w	r5, r5, #3
 800482c:	3508      	adds	r5, #8
 800482e:	2d0c      	cmp	r5, #12
 8004830:	bf38      	it	cc
 8004832:	250c      	movcc	r5, #12
 8004834:	2d00      	cmp	r5, #0
 8004836:	4606      	mov	r6, r0
 8004838:	db01      	blt.n	800483e <_malloc_r+0x1a>
 800483a:	42a9      	cmp	r1, r5
 800483c:	d903      	bls.n	8004846 <_malloc_r+0x22>
 800483e:	230c      	movs	r3, #12
 8004840:	6033      	str	r3, [r6, #0]
 8004842:	2000      	movs	r0, #0
 8004844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004846:	f000 f933 	bl	8004ab0 <__malloc_lock>
 800484a:	4921      	ldr	r1, [pc, #132]	; (80048d0 <_malloc_r+0xac>)
 800484c:	680a      	ldr	r2, [r1, #0]
 800484e:	4614      	mov	r4, r2
 8004850:	b99c      	cbnz	r4, 800487a <_malloc_r+0x56>
 8004852:	4f20      	ldr	r7, [pc, #128]	; (80048d4 <_malloc_r+0xb0>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	b923      	cbnz	r3, 8004862 <_malloc_r+0x3e>
 8004858:	4621      	mov	r1, r4
 800485a:	4630      	mov	r0, r6
 800485c:	f000 f83c 	bl	80048d8 <_sbrk_r>
 8004860:	6038      	str	r0, [r7, #0]
 8004862:	4629      	mov	r1, r5
 8004864:	4630      	mov	r0, r6
 8004866:	f000 f837 	bl	80048d8 <_sbrk_r>
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	d123      	bne.n	80048b6 <_malloc_r+0x92>
 800486e:	230c      	movs	r3, #12
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	4630      	mov	r0, r6
 8004874:	f000 f922 	bl	8004abc <__malloc_unlock>
 8004878:	e7e3      	b.n	8004842 <_malloc_r+0x1e>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	1b5b      	subs	r3, r3, r5
 800487e:	d417      	bmi.n	80048b0 <_malloc_r+0x8c>
 8004880:	2b0b      	cmp	r3, #11
 8004882:	d903      	bls.n	800488c <_malloc_r+0x68>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	441c      	add	r4, r3
 8004888:	6025      	str	r5, [r4, #0]
 800488a:	e004      	b.n	8004896 <_malloc_r+0x72>
 800488c:	6863      	ldr	r3, [r4, #4]
 800488e:	42a2      	cmp	r2, r4
 8004890:	bf0c      	ite	eq
 8004892:	600b      	streq	r3, [r1, #0]
 8004894:	6053      	strne	r3, [r2, #4]
 8004896:	4630      	mov	r0, r6
 8004898:	f000 f910 	bl	8004abc <__malloc_unlock>
 800489c:	f104 000b 	add.w	r0, r4, #11
 80048a0:	1d23      	adds	r3, r4, #4
 80048a2:	f020 0007 	bic.w	r0, r0, #7
 80048a6:	1ac2      	subs	r2, r0, r3
 80048a8:	d0cc      	beq.n	8004844 <_malloc_r+0x20>
 80048aa:	1a1b      	subs	r3, r3, r0
 80048ac:	50a3      	str	r3, [r4, r2]
 80048ae:	e7c9      	b.n	8004844 <_malloc_r+0x20>
 80048b0:	4622      	mov	r2, r4
 80048b2:	6864      	ldr	r4, [r4, #4]
 80048b4:	e7cc      	b.n	8004850 <_malloc_r+0x2c>
 80048b6:	1cc4      	adds	r4, r0, #3
 80048b8:	f024 0403 	bic.w	r4, r4, #3
 80048bc:	42a0      	cmp	r0, r4
 80048be:	d0e3      	beq.n	8004888 <_malloc_r+0x64>
 80048c0:	1a21      	subs	r1, r4, r0
 80048c2:	4630      	mov	r0, r6
 80048c4:	f000 f808 	bl	80048d8 <_sbrk_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d1dd      	bne.n	8004888 <_malloc_r+0x64>
 80048cc:	e7cf      	b.n	800486e <_malloc_r+0x4a>
 80048ce:	bf00      	nop
 80048d0:	20000200 	.word	0x20000200
 80048d4:	20000204 	.word	0x20000204

080048d8 <_sbrk_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d06      	ldr	r5, [pc, #24]	; (80048f4 <_sbrk_r+0x1c>)
 80048dc:	2300      	movs	r3, #0
 80048de:	4604      	mov	r4, r0
 80048e0:	4608      	mov	r0, r1
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	f7fc fc2a 	bl	800113c <_sbrk>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_sbrk_r+0x1a>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_sbrk_r+0x1a>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	20000334 	.word	0x20000334

080048f8 <__sread>:
 80048f8:	b510      	push	{r4, lr}
 80048fa:	460c      	mov	r4, r1
 80048fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004900:	f000 fa3a 	bl	8004d78 <_read_r>
 8004904:	2800      	cmp	r0, #0
 8004906:	bfab      	itete	ge
 8004908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800490a:	89a3      	ldrhlt	r3, [r4, #12]
 800490c:	181b      	addge	r3, r3, r0
 800490e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004912:	bfac      	ite	ge
 8004914:	6563      	strge	r3, [r4, #84]	; 0x54
 8004916:	81a3      	strhlt	r3, [r4, #12]
 8004918:	bd10      	pop	{r4, pc}

0800491a <__swrite>:
 800491a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491e:	461f      	mov	r7, r3
 8004920:	898b      	ldrh	r3, [r1, #12]
 8004922:	05db      	lsls	r3, r3, #23
 8004924:	4605      	mov	r5, r0
 8004926:	460c      	mov	r4, r1
 8004928:	4616      	mov	r6, r2
 800492a:	d505      	bpl.n	8004938 <__swrite+0x1e>
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	2302      	movs	r3, #2
 8004932:	2200      	movs	r2, #0
 8004934:	f000 f898 	bl	8004a68 <_lseek_r>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800493e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	4632      	mov	r2, r6
 8004946:	463b      	mov	r3, r7
 8004948:	4628      	mov	r0, r5
 800494a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800494e:	f000 b817 	b.w	8004980 <_write_r>

08004952 <__sseek>:
 8004952:	b510      	push	{r4, lr}
 8004954:	460c      	mov	r4, r1
 8004956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495a:	f000 f885 	bl	8004a68 <_lseek_r>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	bf15      	itete	ne
 8004964:	6560      	strne	r0, [r4, #84]	; 0x54
 8004966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800496a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800496e:	81a3      	strheq	r3, [r4, #12]
 8004970:	bf18      	it	ne
 8004972:	81a3      	strhne	r3, [r4, #12]
 8004974:	bd10      	pop	{r4, pc}

08004976 <__sclose>:
 8004976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497a:	f000 b831 	b.w	80049e0 <_close_r>
	...

08004980 <_write_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d07      	ldr	r5, [pc, #28]	; (80049a0 <_write_r+0x20>)
 8004984:	4604      	mov	r4, r0
 8004986:	4608      	mov	r0, r1
 8004988:	4611      	mov	r1, r2
 800498a:	2200      	movs	r2, #0
 800498c:	602a      	str	r2, [r5, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	f7fc faec 	bl	8000f6c <_write>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_write_r+0x1e>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	b103      	cbz	r3, 800499e <_write_r+0x1e>
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	20000334 	.word	0x20000334

080049a4 <__assert_func>:
 80049a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049a6:	4614      	mov	r4, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <__assert_func+0x2c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4605      	mov	r5, r0
 80049b0:	68d8      	ldr	r0, [r3, #12]
 80049b2:	b14c      	cbz	r4, 80049c8 <__assert_func+0x24>
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <__assert_func+0x30>)
 80049b6:	9100      	str	r1, [sp, #0]
 80049b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049bc:	4906      	ldr	r1, [pc, #24]	; (80049d8 <__assert_func+0x34>)
 80049be:	462b      	mov	r3, r5
 80049c0:	f000 f81e 	bl	8004a00 <fiprintf>
 80049c4:	f000 f9f7 	bl	8004db6 <abort>
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <__assert_func+0x38>)
 80049ca:	461c      	mov	r4, r3
 80049cc:	e7f3      	b.n	80049b6 <__assert_func+0x12>
 80049ce:	bf00      	nop
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	08005114 	.word	0x08005114
 80049d8:	08005121 	.word	0x08005121
 80049dc:	0800514f 	.word	0x0800514f

080049e0 <_close_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d06      	ldr	r5, [pc, #24]	; (80049fc <_close_r+0x1c>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc fb76 	bl	80010dc <_close>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_close_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_close_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000334 	.word	0x20000334

08004a00 <fiprintf>:
 8004a00:	b40e      	push	{r1, r2, r3}
 8004a02:	b503      	push	{r0, r1, lr}
 8004a04:	4601      	mov	r1, r0
 8004a06:	ab03      	add	r3, sp, #12
 8004a08:	4805      	ldr	r0, [pc, #20]	; (8004a20 <fiprintf+0x20>)
 8004a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a0e:	6800      	ldr	r0, [r0, #0]
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	f000 f881 	bl	8004b18 <_vfiprintf_r>
 8004a16:	b002      	add	sp, #8
 8004a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a1c:	b003      	add	sp, #12
 8004a1e:	4770      	bx	lr
 8004a20:	2000000c 	.word	0x2000000c

08004a24 <_fstat_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4d07      	ldr	r5, [pc, #28]	; (8004a44 <_fstat_r+0x20>)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	f7fc fb5e 	bl	80010f2 <_fstat>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	d102      	bne.n	8004a40 <_fstat_r+0x1c>
 8004a3a:	682b      	ldr	r3, [r5, #0]
 8004a3c:	b103      	cbz	r3, 8004a40 <_fstat_r+0x1c>
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	bf00      	nop
 8004a44:	20000334 	.word	0x20000334

08004a48 <_isatty_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_isatty_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc fb5c 	bl	8001110 <_isatty>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_isatty_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_isatty_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	20000334 	.word	0x20000334

08004a68 <_lseek_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4d07      	ldr	r5, [pc, #28]	; (8004a88 <_lseek_r+0x20>)
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	4608      	mov	r0, r1
 8004a70:	4611      	mov	r1, r2
 8004a72:	2200      	movs	r2, #0
 8004a74:	602a      	str	r2, [r5, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f7fc fb54 	bl	8001124 <_lseek>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_lseek_r+0x1e>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_lseek_r+0x1e>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	20000334 	.word	0x20000334

08004a8c <__ascii_mbtowc>:
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	b901      	cbnz	r1, 8004a92 <__ascii_mbtowc+0x6>
 8004a90:	a901      	add	r1, sp, #4
 8004a92:	b142      	cbz	r2, 8004aa6 <__ascii_mbtowc+0x1a>
 8004a94:	b14b      	cbz	r3, 8004aaa <__ascii_mbtowc+0x1e>
 8004a96:	7813      	ldrb	r3, [r2, #0]
 8004a98:	600b      	str	r3, [r1, #0]
 8004a9a:	7812      	ldrb	r2, [r2, #0]
 8004a9c:	1e10      	subs	r0, r2, #0
 8004a9e:	bf18      	it	ne
 8004aa0:	2001      	movne	r0, #1
 8004aa2:	b002      	add	sp, #8
 8004aa4:	4770      	bx	lr
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	e7fb      	b.n	8004aa2 <__ascii_mbtowc+0x16>
 8004aaa:	f06f 0001 	mvn.w	r0, #1
 8004aae:	e7f8      	b.n	8004aa2 <__ascii_mbtowc+0x16>

08004ab0 <__malloc_lock>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__malloc_lock+0x8>)
 8004ab2:	f7ff ba60 	b.w	8003f76 <__retarget_lock_acquire_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	2000032c 	.word	0x2000032c

08004abc <__malloc_unlock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__malloc_unlock+0x8>)
 8004abe:	f7ff ba5b 	b.w	8003f78 <__retarget_lock_release_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	2000032c 	.word	0x2000032c

08004ac8 <__sfputc_r>:
 8004ac8:	6893      	ldr	r3, [r2, #8]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	b410      	push	{r4}
 8004ad0:	6093      	str	r3, [r2, #8]
 8004ad2:	da07      	bge.n	8004ae4 <__sfputc_r+0x1c>
 8004ad4:	6994      	ldr	r4, [r2, #24]
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	db01      	blt.n	8004ade <__sfputc_r+0x16>
 8004ada:	290a      	cmp	r1, #10
 8004adc:	d102      	bne.n	8004ae4 <__sfputc_r+0x1c>
 8004ade:	bc10      	pop	{r4}
 8004ae0:	f7fe b952 	b.w	8002d88 <__swbuf_r>
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	1c58      	adds	r0, r3, #1
 8004ae8:	6010      	str	r0, [r2, #0]
 8004aea:	7019      	strb	r1, [r3, #0]
 8004aec:	4608      	mov	r0, r1
 8004aee:	bc10      	pop	{r4}
 8004af0:	4770      	bx	lr

08004af2 <__sfputs_r>:
 8004af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af4:	4606      	mov	r6, r0
 8004af6:	460f      	mov	r7, r1
 8004af8:	4614      	mov	r4, r2
 8004afa:	18d5      	adds	r5, r2, r3
 8004afc:	42ac      	cmp	r4, r5
 8004afe:	d101      	bne.n	8004b04 <__sfputs_r+0x12>
 8004b00:	2000      	movs	r0, #0
 8004b02:	e007      	b.n	8004b14 <__sfputs_r+0x22>
 8004b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b08:	463a      	mov	r2, r7
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7ff ffdc 	bl	8004ac8 <__sfputc_r>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d1f3      	bne.n	8004afc <__sfputs_r+0xa>
 8004b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b18 <_vfiprintf_r>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	460d      	mov	r5, r1
 8004b1e:	b09d      	sub	sp, #116	; 0x74
 8004b20:	4614      	mov	r4, r2
 8004b22:	4698      	mov	r8, r3
 8004b24:	4606      	mov	r6, r0
 8004b26:	b118      	cbz	r0, 8004b30 <_vfiprintf_r+0x18>
 8004b28:	6983      	ldr	r3, [r0, #24]
 8004b2a:	b90b      	cbnz	r3, 8004b30 <_vfiprintf_r+0x18>
 8004b2c:	f7ff f980 	bl	8003e30 <__sinit>
 8004b30:	4b89      	ldr	r3, [pc, #548]	; (8004d58 <_vfiprintf_r+0x240>)
 8004b32:	429d      	cmp	r5, r3
 8004b34:	d11b      	bne.n	8004b6e <_vfiprintf_r+0x56>
 8004b36:	6875      	ldr	r5, [r6, #4]
 8004b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b3a:	07d9      	lsls	r1, r3, #31
 8004b3c:	d405      	bmi.n	8004b4a <_vfiprintf_r+0x32>
 8004b3e:	89ab      	ldrh	r3, [r5, #12]
 8004b40:	059a      	lsls	r2, r3, #22
 8004b42:	d402      	bmi.n	8004b4a <_vfiprintf_r+0x32>
 8004b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b46:	f7ff fa16 	bl	8003f76 <__retarget_lock_acquire_recursive>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	071b      	lsls	r3, r3, #28
 8004b4e:	d501      	bpl.n	8004b54 <_vfiprintf_r+0x3c>
 8004b50:	692b      	ldr	r3, [r5, #16]
 8004b52:	b9eb      	cbnz	r3, 8004b90 <_vfiprintf_r+0x78>
 8004b54:	4629      	mov	r1, r5
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7fe f968 	bl	8002e2c <__swsetup_r>
 8004b5c:	b1c0      	cbz	r0, 8004b90 <_vfiprintf_r+0x78>
 8004b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b60:	07dc      	lsls	r4, r3, #31
 8004b62:	d50e      	bpl.n	8004b82 <_vfiprintf_r+0x6a>
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b68:	b01d      	add	sp, #116	; 0x74
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	4b7b      	ldr	r3, [pc, #492]	; (8004d5c <_vfiprintf_r+0x244>)
 8004b70:	429d      	cmp	r5, r3
 8004b72:	d101      	bne.n	8004b78 <_vfiprintf_r+0x60>
 8004b74:	68b5      	ldr	r5, [r6, #8]
 8004b76:	e7df      	b.n	8004b38 <_vfiprintf_r+0x20>
 8004b78:	4b79      	ldr	r3, [pc, #484]	; (8004d60 <_vfiprintf_r+0x248>)
 8004b7a:	429d      	cmp	r5, r3
 8004b7c:	bf08      	it	eq
 8004b7e:	68f5      	ldreq	r5, [r6, #12]
 8004b80:	e7da      	b.n	8004b38 <_vfiprintf_r+0x20>
 8004b82:	89ab      	ldrh	r3, [r5, #12]
 8004b84:	0598      	lsls	r0, r3, #22
 8004b86:	d4ed      	bmi.n	8004b64 <_vfiprintf_r+0x4c>
 8004b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b8a:	f7ff f9f5 	bl	8003f78 <__retarget_lock_release_recursive>
 8004b8e:	e7e9      	b.n	8004b64 <_vfiprintf_r+0x4c>
 8004b90:	2300      	movs	r3, #0
 8004b92:	9309      	str	r3, [sp, #36]	; 0x24
 8004b94:	2320      	movs	r3, #32
 8004b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b9e:	2330      	movs	r3, #48	; 0x30
 8004ba0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d64 <_vfiprintf_r+0x24c>
 8004ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ba8:	f04f 0901 	mov.w	r9, #1
 8004bac:	4623      	mov	r3, r4
 8004bae:	469a      	mov	sl, r3
 8004bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb4:	b10a      	cbz	r2, 8004bba <_vfiprintf_r+0xa2>
 8004bb6:	2a25      	cmp	r2, #37	; 0x25
 8004bb8:	d1f9      	bne.n	8004bae <_vfiprintf_r+0x96>
 8004bba:	ebba 0b04 	subs.w	fp, sl, r4
 8004bbe:	d00b      	beq.n	8004bd8 <_vfiprintf_r+0xc0>
 8004bc0:	465b      	mov	r3, fp
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff ff93 	bl	8004af2 <__sfputs_r>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f000 80aa 	beq.w	8004d26 <_vfiprintf_r+0x20e>
 8004bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bd4:	445a      	add	r2, fp
 8004bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8004bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80a2 	beq.w	8004d26 <_vfiprintf_r+0x20e>
 8004be2:	2300      	movs	r3, #0
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bec:	f10a 0a01 	add.w	sl, sl, #1
 8004bf0:	9304      	str	r3, [sp, #16]
 8004bf2:	9307      	str	r3, [sp, #28]
 8004bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8004bfa:	4654      	mov	r4, sl
 8004bfc:	2205      	movs	r2, #5
 8004bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c02:	4858      	ldr	r0, [pc, #352]	; (8004d64 <_vfiprintf_r+0x24c>)
 8004c04:	f7fb faf4 	bl	80001f0 <memchr>
 8004c08:	9a04      	ldr	r2, [sp, #16]
 8004c0a:	b9d8      	cbnz	r0, 8004c44 <_vfiprintf_r+0x12c>
 8004c0c:	06d1      	lsls	r1, r2, #27
 8004c0e:	bf44      	itt	mi
 8004c10:	2320      	movmi	r3, #32
 8004c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c16:	0713      	lsls	r3, r2, #28
 8004c18:	bf44      	itt	mi
 8004c1a:	232b      	movmi	r3, #43	; 0x2b
 8004c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c20:	f89a 3000 	ldrb.w	r3, [sl]
 8004c24:	2b2a      	cmp	r3, #42	; 0x2a
 8004c26:	d015      	beq.n	8004c54 <_vfiprintf_r+0x13c>
 8004c28:	9a07      	ldr	r2, [sp, #28]
 8004c2a:	4654      	mov	r4, sl
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f04f 0c0a 	mov.w	ip, #10
 8004c32:	4621      	mov	r1, r4
 8004c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c38:	3b30      	subs	r3, #48	; 0x30
 8004c3a:	2b09      	cmp	r3, #9
 8004c3c:	d94e      	bls.n	8004cdc <_vfiprintf_r+0x1c4>
 8004c3e:	b1b0      	cbz	r0, 8004c6e <_vfiprintf_r+0x156>
 8004c40:	9207      	str	r2, [sp, #28]
 8004c42:	e014      	b.n	8004c6e <_vfiprintf_r+0x156>
 8004c44:	eba0 0308 	sub.w	r3, r0, r8
 8004c48:	fa09 f303 	lsl.w	r3, r9, r3
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	46a2      	mov	sl, r4
 8004c52:	e7d2      	b.n	8004bfa <_vfiprintf_r+0xe2>
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	1d19      	adds	r1, r3, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	9103      	str	r1, [sp, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bfbb      	ittet	lt
 8004c60:	425b      	neglt	r3, r3
 8004c62:	f042 0202 	orrlt.w	r2, r2, #2
 8004c66:	9307      	strge	r3, [sp, #28]
 8004c68:	9307      	strlt	r3, [sp, #28]
 8004c6a:	bfb8      	it	lt
 8004c6c:	9204      	strlt	r2, [sp, #16]
 8004c6e:	7823      	ldrb	r3, [r4, #0]
 8004c70:	2b2e      	cmp	r3, #46	; 0x2e
 8004c72:	d10c      	bne.n	8004c8e <_vfiprintf_r+0x176>
 8004c74:	7863      	ldrb	r3, [r4, #1]
 8004c76:	2b2a      	cmp	r3, #42	; 0x2a
 8004c78:	d135      	bne.n	8004ce6 <_vfiprintf_r+0x1ce>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	1d1a      	adds	r2, r3, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	9203      	str	r2, [sp, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfb8      	it	lt
 8004c86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c8a:	3402      	adds	r4, #2
 8004c8c:	9305      	str	r3, [sp, #20]
 8004c8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d74 <_vfiprintf_r+0x25c>
 8004c92:	7821      	ldrb	r1, [r4, #0]
 8004c94:	2203      	movs	r2, #3
 8004c96:	4650      	mov	r0, sl
 8004c98:	f7fb faaa 	bl	80001f0 <memchr>
 8004c9c:	b140      	cbz	r0, 8004cb0 <_vfiprintf_r+0x198>
 8004c9e:	2340      	movs	r3, #64	; 0x40
 8004ca0:	eba0 000a 	sub.w	r0, r0, sl
 8004ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8004ca8:	9b04      	ldr	r3, [sp, #16]
 8004caa:	4303      	orrs	r3, r0
 8004cac:	3401      	adds	r4, #1
 8004cae:	9304      	str	r3, [sp, #16]
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	482c      	ldr	r0, [pc, #176]	; (8004d68 <_vfiprintf_r+0x250>)
 8004cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cba:	2206      	movs	r2, #6
 8004cbc:	f7fb fa98 	bl	80001f0 <memchr>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d03f      	beq.n	8004d44 <_vfiprintf_r+0x22c>
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <_vfiprintf_r+0x254>)
 8004cc6:	bb1b      	cbnz	r3, 8004d10 <_vfiprintf_r+0x1f8>
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	3307      	adds	r3, #7
 8004ccc:	f023 0307 	bic.w	r3, r3, #7
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd6:	443b      	add	r3, r7
 8004cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cda:	e767      	b.n	8004bac <_vfiprintf_r+0x94>
 8004cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	e7a5      	b.n	8004c32 <_vfiprintf_r+0x11a>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	3401      	adds	r4, #1
 8004cea:	9305      	str	r3, [sp, #20]
 8004cec:	4619      	mov	r1, r3
 8004cee:	f04f 0c0a 	mov.w	ip, #10
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf8:	3a30      	subs	r2, #48	; 0x30
 8004cfa:	2a09      	cmp	r2, #9
 8004cfc:	d903      	bls.n	8004d06 <_vfiprintf_r+0x1ee>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0c5      	beq.n	8004c8e <_vfiprintf_r+0x176>
 8004d02:	9105      	str	r1, [sp, #20]
 8004d04:	e7c3      	b.n	8004c8e <_vfiprintf_r+0x176>
 8004d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e7f0      	b.n	8004cf2 <_vfiprintf_r+0x1da>
 8004d10:	ab03      	add	r3, sp, #12
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	462a      	mov	r2, r5
 8004d16:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <_vfiprintf_r+0x258>)
 8004d18:	a904      	add	r1, sp, #16
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f7fd fc00 	bl	8002520 <_printf_float>
 8004d20:	4607      	mov	r7, r0
 8004d22:	1c78      	adds	r0, r7, #1
 8004d24:	d1d6      	bne.n	8004cd4 <_vfiprintf_r+0x1bc>
 8004d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d28:	07d9      	lsls	r1, r3, #31
 8004d2a:	d405      	bmi.n	8004d38 <_vfiprintf_r+0x220>
 8004d2c:	89ab      	ldrh	r3, [r5, #12]
 8004d2e:	059a      	lsls	r2, r3, #22
 8004d30:	d402      	bmi.n	8004d38 <_vfiprintf_r+0x220>
 8004d32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d34:	f7ff f920 	bl	8003f78 <__retarget_lock_release_recursive>
 8004d38:	89ab      	ldrh	r3, [r5, #12]
 8004d3a:	065b      	lsls	r3, r3, #25
 8004d3c:	f53f af12 	bmi.w	8004b64 <_vfiprintf_r+0x4c>
 8004d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d42:	e711      	b.n	8004b68 <_vfiprintf_r+0x50>
 8004d44:	ab03      	add	r3, sp, #12
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	462a      	mov	r2, r5
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <_vfiprintf_r+0x258>)
 8004d4c:	a904      	add	r1, sp, #16
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7fd fe7e 	bl	8002a50 <_printf_i>
 8004d54:	e7e4      	b.n	8004d20 <_vfiprintf_r+0x208>
 8004d56:	bf00      	nop
 8004d58:	08004f78 	.word	0x08004f78
 8004d5c:	08004f98 	.word	0x08004f98
 8004d60:	08004f58 	.word	0x08004f58
 8004d64:	0800515a 	.word	0x0800515a
 8004d68:	08005164 	.word	0x08005164
 8004d6c:	08002521 	.word	0x08002521
 8004d70:	08004af3 	.word	0x08004af3
 8004d74:	08005160 	.word	0x08005160

08004d78 <_read_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4d07      	ldr	r5, [pc, #28]	; (8004d98 <_read_r+0x20>)
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	2200      	movs	r2, #0
 8004d84:	602a      	str	r2, [r5, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7fc f98b 	bl	80010a2 <_read>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_read_r+0x1e>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_read_r+0x1e>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	20000334 	.word	0x20000334

08004d9c <__ascii_wctomb>:
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4608      	mov	r0, r1
 8004da0:	b141      	cbz	r1, 8004db4 <__ascii_wctomb+0x18>
 8004da2:	2aff      	cmp	r2, #255	; 0xff
 8004da4:	d904      	bls.n	8004db0 <__ascii_wctomb+0x14>
 8004da6:	228a      	movs	r2, #138	; 0x8a
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dae:	4770      	bx	lr
 8004db0:	700a      	strb	r2, [r1, #0]
 8004db2:	2001      	movs	r0, #1
 8004db4:	4770      	bx	lr

08004db6 <abort>:
 8004db6:	b508      	push	{r3, lr}
 8004db8:	2006      	movs	r0, #6
 8004dba:	f000 f82b 	bl	8004e14 <raise>
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f7fc f965 	bl	800108e <_exit>

08004dc4 <_raise_r>:
 8004dc4:	291f      	cmp	r1, #31
 8004dc6:	b538      	push	{r3, r4, r5, lr}
 8004dc8:	4604      	mov	r4, r0
 8004dca:	460d      	mov	r5, r1
 8004dcc:	d904      	bls.n	8004dd8 <_raise_r+0x14>
 8004dce:	2316      	movs	r3, #22
 8004dd0:	6003      	str	r3, [r0, #0]
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004dda:	b112      	cbz	r2, 8004de2 <_raise_r+0x1e>
 8004ddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004de0:	b94b      	cbnz	r3, 8004df6 <_raise_r+0x32>
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 f830 	bl	8004e48 <_getpid_r>
 8004de8:	462a      	mov	r2, r5
 8004dea:	4601      	mov	r1, r0
 8004dec:	4620      	mov	r0, r4
 8004dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004df2:	f000 b817 	b.w	8004e24 <_kill_r>
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d00a      	beq.n	8004e10 <_raise_r+0x4c>
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	d103      	bne.n	8004e06 <_raise_r+0x42>
 8004dfe:	2316      	movs	r3, #22
 8004e00:	6003      	str	r3, [r0, #0]
 8004e02:	2001      	movs	r0, #1
 8004e04:	e7e7      	b.n	8004dd6 <_raise_r+0x12>
 8004e06:	2400      	movs	r4, #0
 8004e08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	4798      	blx	r3
 8004e10:	2000      	movs	r0, #0
 8004e12:	e7e0      	b.n	8004dd6 <_raise_r+0x12>

08004e14 <raise>:
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <raise+0xc>)
 8004e16:	4601      	mov	r1, r0
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	f7ff bfd3 	b.w	8004dc4 <_raise_r>
 8004e1e:	bf00      	nop
 8004e20:	2000000c 	.word	0x2000000c

08004e24 <_kill_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d07      	ldr	r5, [pc, #28]	; (8004e44 <_kill_r+0x20>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	f7fc f91c 	bl	800106e <_kill>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d102      	bne.n	8004e40 <_kill_r+0x1c>
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	b103      	cbz	r3, 8004e40 <_kill_r+0x1c>
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	20000334 	.word	0x20000334

08004e48 <_getpid_r>:
 8004e48:	f7fc b90a 	b.w	8001060 <_getpid>

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr
